IDEAL
MODEL small
STACK 100h

DATASEG

; *********************************IMAGES *****************************************
palette dw 2
db 0,0,0,63,63,63

charAsterisk db ImageId
dw 4, 5
db 1,-1,1,-1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,-1,1,-1,1,-1
char0 db ImageId
dw 4, 5
db 1,1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,1,1,-1
char1 db ImageId
dw 4, 5
db 1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,1,1,-1
char2 db ImageId
dw 4, 5
db 1,1,1,-1,-1,-1,1,-1,1,1,1,-1,1,-1,-1,-1,1,1,1,-1
char3 db ImageId
dw 4, 5
db 1,1,1,-1,-1,-1,1,-1,-1,1,1,-1,-1,-1,1,-1,1,1,1,-1
char4 db ImageId
dw 4, 5
db 1,-1,1,-1,1,-1,1,-1,1,1,1,-1,-1,-1,1,-1,-1,-1,1,-1
char5 db ImageId
dw 4, 5
db 1,1,1,-1,1,-1,-1,-1,1,1,1,-1,-1,-1,1,-1,1,1,1,-1
char6 db ImageId
dw 4, 5
db 1,-1,-1,-1,1,-1,-1,-1,1,1,1,-1,1,-1,1,-1,1,1,1,-1
char7 db ImageId
dw 4, 5
db 1,1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1
char8 db ImageId
dw 4, 5
db 1,1,1,-1,1,-1,1,-1,1,1,1,-1,1,-1,1,-1,1,1,1,-1
char9 db ImageId
dw 4, 5
db 1,1,1,-1,1,-1,1,-1,1,1,1,-1,-1,-1,1,-1,-1,-1,1,-1
charA db ImageId
dw 4, 5
db 1,1,1,-1,1,-1,1,-1,1,1,1,-1,1,-1,1,-1,1,-1,1,-1
charB db ImageId
dw 4, 5
db 1,1,1,-1,1,-1,1,-1,1,1,-1,-1,1,-1,1,-1,1,1,1,-1
charC db ImageId
dw 4, 5
db -1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1,1,4 dup(-1),1,1,-1
charD db ImageId
dw 4, 5
db 1,1,-1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,1,-1,-1
charE db ImageId
dw 4, 5
db 1,1,1,-1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,1,1,-1
charF db ImageId
dw 4, 5
db 1,1,1,-1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1
charG db ImageId
dw 4, 5
db 1,1,1,-1,1,-1,-1,-1,1,-1,1,-1,1,-1,1,-1,1,1,1,-1
charH db ImageId
dw 4, 5
db 1,-1,1,-1,1,-1,1,-1,1,1,1,-1,1,-1,1,-1,1,-1,1,-1
charI db ImageId
dw 4, 5
db 1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,1,1,-1
charJ db ImageId
dw 4, 5
db 1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,1,-1,-1
charK db ImageId
dw 4, 5
db 1,-1,1,-1,1,-1,1,-1,1,1,-1,-1,1,-1,1,-1,1,-1,1,-1
charL db ImageId
dw 4, 5
db 1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,1,1,-1
charM db ImageId
dw 4, 5
db 1,1,1,-1,1,1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1
charN db ImageId
dw 4, 5
db 1,1,-1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1
charO db ImageId
dw 4, 5
db -1,1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,1,-1,-1
charP db ImageId
dw 4, 5
db 1,1,1,-1,1,-1,1,-1,1,1,1,-1,1,-1,-1,-1,1,-1,-1,-1
charQ db ImageId
dw 4, 5
db -1,1,-1,-1,1,-1,1,-1,1,-1,1,-1,1,1,-1,-1,-1,1,1,-1
charR db ImageId
dw 4, 5
db 1,1,1,-1,1,-1,1,-1,1,1,-1,-1,1,-1,1,-1,1,-1,1,-1
charS db ImageId
dw 4, 5
db -1,1,1,-1,1,-1,-1,-1,1,1,1,-1,-1,-1,1,-1,1,1,-1,-1
charT db ImageId
dw 4, 5
db 1,1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1
charU db ImageId
dw 4, 5
db 1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,-1,1,1,-1
charV db ImageId
dw 4, 5
db 1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,1,1,-1,-1,1,-1,-1
charW db ImageId
dw 4, 5
db 1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,1,1,-1,1,1,1,-1
charX db ImageId
dw 4, 5
db 1,-1,1,-1,1,-1,1,-1,-1,1,-1,-1,1,-1,1,-1,1,-1,1,-1
charY db ImageId
dw 4, 5
db 1,-1,1,-1,1,-1,1,-1,1,1,1,-1,-1,-1,1,-1,1,1,1,-1
charZ db ImageId
dw 4, 5
db 1,1,1,-1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,-1,1,1,1,-1
charColon db ImageId
dw 4, 5
db 5 dup(-1),1,7 dup(-1),1,6 dup(-1)
charComma db ImageId
dw 4, 5
db 13 dup(-1),1,-1,-1,1,-1,-1,-1
charDollar db ImageId
dw 4, 5
db 1,1,1,-1,1,1,-1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1
charDot db ImageId
dw 4, 5
db 17 dup(-1),1,-1,-1
charEquals db ImageId
dw 4, 5
db 4 dup(-1),1,1,1,5 dup(-1),1,1,1,5 dup(-1)
charExclamation db ImageId
dw 4, 5
db -1,1,-1,-1,-1,1,-1,-1,-1,1,7 dup(-1),1,-1,-1
charGreaterThan db ImageId
dw 4, 5
db 1,4 dup(-1),1,4 dup(-1),1,-1,-1,1,-1,-1,1,-1,-1,-1
charLessThan db ImageId
dw 4, 5
db -1,-1,1,-1,-1,1,-1,-1,1,4 dup(-1),1,4 dup(-1),1,-1
charNeg db ImageId
dw 4, 5
db 8 dup(-1),1,1,1,9 dup(-1)
charParenthesesEnd db ImageId
dw 4, 5
db -1,1,4 dup(-1),1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,-1
charParenthesesStart db ImageId
dw 4, 5
db -1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,4 dup(-1),1,-1,-1
charPercent db ImageId
dw 4, 5
db 1,-1,1,-1,-1,-1,1,-1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,-1
charPlus db ImageId
dw 4, 5
db 5 dup(-1),1,-1,-1,1,1,1,-1,-1,1,6 dup(-1)
charQuestionMark db ImageId
dw 4, 5
db 1,1,1,-1,-1,-1,1,-1,-1,1,1,6 dup(-1),1,-1,-1
charQuotationEnd db ImageId
dw 5, 5
db -1,1,-1,1,-1,-1,1,-1,1,16 dup(-1)
charQuotationStart db ImageId
dw 4, 5
db 1,-1,1,-1,1,-1,1,13 dup(-1)
charSemicolon db ImageId
dw 4, 5
db 5 dup(-1),1,7 dup(-1),1,-1,-1,1,-1,-1,-1
charSlash db ImageId
dw 4, 5
db -1,-1,1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,1,-1,-1,-1
charSpace db ImageId
dw 4, 5
db 20 dup(-1)

font db FontId
dw 56 ; length
db '0123456789abcdefghijklmnopqrstuvwxyz()*:,$.=!><-%+?"";/ ' ; order of chars
dw offset char0,  seg char0,  offset char1,  seg char1,  offset char2,  seg char2,  offset char3,  seg char3
dw offset char4,  seg char4,  offset char5,  seg char5,  offset char6,  seg char6,  offset char7,  seg char7
dw offset char8,  seg char8,  offset char9,  seg char9,  offset charA,  seg charA,  offset charB,  seg charB
dw offset charC,  seg charC,  offset charD,  seg charD,  offset charE,  seg charE,  offset charF,  seg charF
dw offset charG,  seg charG,  offset charH,  seg charH,  offset charI,  seg charI,  offset charJ,  seg charJ
dw offset charK,  seg charK,  offset charL,  seg charL,  offset charM,  seg charM,  offset charN,  seg charN
dw offset charO,  seg charO,  offset charP,  seg charP,  offset charQ,  seg charQ,  offset charR,  seg charR
dw offset charS,  seg charS,  offset charT,  seg charT,  offset charU,  seg charU,  offset charV,  seg charV
dw offset charW,  seg charW,  offset charX,  seg charX,  offset charY,  seg charY,  offset charZ,  seg charZ
dw offset charParenthesesStart, seg charParenthesesStart, offset charParenthesesEnd, seg charParenthesesEnd
dw offset charAsterisk,       seg charAsterisk,       offset charColon,          seg charColon
dw offset charComma,          seg charComma,          offset charDollar,         seg charDollar
dw offset charDot,            seg charDot,            offset charEquals,         seg charEquals
dw offset charExclamation,    seg charExclamation,    offset charGreaterThan,    seg charGreaterThan
dw offset charLessThan,       seg charLessThan,       offset charNeg,            seg charNeg
dw offset charPercent,        seg charPercent,        offset charPlus,           seg charPlus
dw offset charQuestionMark,   seg charQuestionMark,   offset charQuotationEnd,   seg charQuotationEnd
dw offset charQuotationStart, seg charQuotationStart, offset charSemicolon,      seg charSemicolon
dw offset charSlash,          seg charSlash,          offset charSpace,          seg charSpace

startButton db 2
db RenderComponentId
dw offset startButtonRender, seg startButtonRender
db PhysicsComponentId
dw offset startButtonPhysics, seg startButtonPhysics

startButtonRender dw 0, 0, offset text, seg text, 0, 0, 0, 75, 5 ; x, y, image pointer, prev x, prev y, rotation, width, height
db 75*5 dup(0) ; background save place

startButtonPhysics dw 0, 0, 0, 0, 1000  ; addx, vx, ax, fx, mx
                   dw 0, 5, 0, 0, 1000  ; addy, vy, ay, fy, my

text db LabelId
dw offset font, seg font
db 11, 'hello there'

playerRect db RectId
dw 5, 30
db 1

ballRect db RectId
dw 3, 3
db 1

ballController db 3
db PhysicsComponentId
dw offset ballControllerPhysicsComponent, seg ballControllerPhysicsComponent
db RenderComponentId
dw offset ballControllerRenderComponent, seg ballControllerRenderComponent

ballControllerPhysicsComponent dw 0, 0, 0, 0, 1000  ; vx, ax, fx, mx
                               dw 0, 0, 0, 0, 1000  ; vy, ay, fy, my

ballControllerRenderComponent dw 0, 0, offset ballRect, seg ballRect, 0, 0, 0, 3, 3 ; x, y, image pointer, prev x, prev y, rotation, width, height
db 3*3 dup(0) ; background save place

leftPlayerController db 2
db RenderComponentId
dw offset leftPlayerControllerRenderComponent, seg leftPlayerControllerRenderComponent
db PhysicsComponentId
dw offset leftPlayerControllerPhysicsComponent, seg leftPlayerControllerPhysicsComponent

leftPlayerControllerRenderComponent dw 0, 0, offset playerRect, seg playerRect, 0, 0, 0, 5, 30 ; x, y, image pointer, prev x, prev y, rotation, width, height
db 5*30 dup(0) ; background save place

leftPlayerControllerPhysicsComponent dw 0, 0, 0, 0, 1000  ; vx, ax, fx, mx
                                     dw 0, 0, 0, 20, 1000  ; vy, ay, fy, my

rightPlayerController db 2
db RenderComponentId
dw offset rightPlayerControllerRenderComponent, seg rightPlayerControllerRenderComponent
db PhysicsComponentId
dw offset rightPlayerControllerPhysicsComponent, seg rightPlayerControllerPhysicsComponent

rightPlayerControllerRenderComponent dw 0, 0, offset playerRect, seg playerRect, 0, 0, 0, 5, 30 ; x, y, image pointer, prev x, prev y, rotation, width, height
db 5*30 dup(0) ; background save place

rightPlayerControllerPhysicsComponent dw 0, 0, 0, 0, 1000  ; vx, ax, fx, mx
                                      dw 0, 0, 0, 20, 1000  ; vy, ay, fy, my

upBorder db 1
db RenderComponentId
dw offset upBorderRenderComponent, seg upBorderRenderComponent

upBorderRenderComponent dw 0, 0, 0, 0, 0, 0, 0, 320, 1 ; x, y, image pointer, prev x, prev y, rotation, width, height
db 1*320 dup(0) ; background save place

downBorder db 1
db RenderComponentId
dw offset downBorderRenderComponent, seg downBorderRenderComponent

downBorderRenderComponent dw 0, 0, 0, 0, 0, 0, 0, 320, 1 ; x, y, image pointer, prev x, prev y, rotation, width, height
db 1*320 dup(0) ; background save place

physicsLayer dw 50 dup(0)
collisionLayer dw 50 dup(0)
renderLayer dw 50 dup(0)

; *********************************OFFSET CONSTANTS*********************************

VIDEO_MEMORY equ 0A000h
R_SCAN_CODE equ 13h
RaycastPrecision equ 128
ScreenWidth equ 320
ScreenHeight equ 200
ClockMemory equ 6Ch
BLACK_COLOR equ 0
WHITE_COLOR equ 1

PhysicsComponentId            equ 4
PhysicsComponentAxisX         equ 0
PhysicsComponentAddX          equ 0
PhysicsComponentVelocityX     equ 2
PhysicsComponentAccelerationX equ 4
PhysicsComponentFrictionX     equ 6
PhysicsComponentMaxVelocityX  equ 8
PhysicsComponentAxisY         equ 10
PhysicsComponentAddY          equ 10
PhysicsComponentVelocityY     equ 12
PhysicsComponentAccelerationY equ 14
PhysicsComponentFrictionY     equ 16
PhysicsComponentMaxVelocityY  equ 18

PhysicsComponentAxisAdd          equ 0
PhysicsComponentAxisVelocity     equ 2
PhysicsComponentAxisAcceleration equ 4
PhysicsComponentAxisFriction     equ 6
PhysicsComponentAxisMaxVelocity  equ 8

AnimatorComponentId                    equ 3
AnimatorComponentCurrentAnimationIndex equ 0
AnimatorComponentCurrentFrameIndex     equ 1
AnimatorComponentAnimationAmount       equ 2
AnimatorComponentData                  equ 3

AnimationId         equ 2
AnimationSize       equ 1
AnimationSpeed      equ 2
AnimationData       equ 3

ArrayId              equ 8
ArraySize            equ 1
ArrayElementSize     equ 3
ArrayData            equ 5

Array2DId               equ 9
Array2DColumns          equ 1
Array2DRows             equ 3
Array2DElementSize      equ 5
Array2DData             equ 7

RenderComponentId                  equ 1
RenderComponentPositionX           equ 0
RenderComponentPositionY           equ 2
RenderComponentImageOffset         equ 4
RenderComponentImageSegment        equ 6
RenderComponentPreviousPositionX   equ 8
RenderComponentPreviousPositionY   equ 10
RenderComponentRotation            equ 12
RenderComponentWidth               equ 14
RenderComponentHeight              equ 16
RenderComponentBackground          equ 18

MouseComponentId           equ 7
MouseComponentLeftPressed  equ 0
MouseComponentRightPressed equ 1
MouseComponentLeftClicked  equ 2
MouseComponentRightClicked equ 3

ControllerMaxComponentAmount equ 0
ControllerComponentData      equ 1

ComponentId            equ 0
ComponentOffset        equ 1
ComponentSegment       equ 3
ComponentNextComponent equ 5

ImageId     equ 11
ImageWidth  equ 1
ImageHeight equ 3
ImageData   equ 5

RectId     equ 10
RectWidth  equ 1
RectHeight equ 3
RectColor  equ 5

FontId         equ 15
FontSize       equ 1
FontData       equ 3

LabelId          equ 14
LabelFontOffset  equ 1
LabelFontSegment equ 3
LabelSize        equ 5
LabelData        equ 6

PointerArrayId   equ 13
PointerArraySize equ 0
PointerArrayData equ 2

PaletteLength equ 0
PaletteData   equ 2

PointerOffset  equ 0
PointerSegment equ 2
PointerSize    equ 4

MallocManagerId               equ 12
MallocManagerSegment          equ 1
MallocManagerBytesLeft        equ 3
MallocManagerBytesUsed        equ 5
MallocManagerBytesAllocations equ 7

KeyStateTable db 256 dup(0) ; Table to store key states (0 = released, 1 = pressed)

DirectionMultiplier equ 16*5
JumpHeight equ 16*4
SubPixelAmount equ 16
animationTime dw 0
GAME_SPEED equ 50 ; in ms (to calculate FPS -> 1024 / FPS)
globalTime dw 0  ; in ms
randomSeed dw 100
oldKeyboardHandlerOffset dw ?
oldKeyboardHandlerSegment dw ?
previousIRQMask db ?

CODESEG

; input - Mouse pointer
proc initAndUploadMouse
    push bp
    mov bp, sp
    push ax
    
    mov ax, 0 ; init Mouse
    int 33h
    mov ax, 2 ; disable default mouse icon
    int 33h

    push [bp + 10] ; mouse segment
    push [bp + 8]  ; mouse pointer
    push ScreenWidth / 2
    push ScreenHeight / 2
    push [bp + 6] ; layer offset
    push [bp + 4] ; layer segment
    call initAndUploadController ;  init to the middle of the screen

    pop ax
    pop bp
    ret 8
endp initAndUploadMouse

proc setControllerXandY
    push bp
    mov bp, sp
    push ds
    push bx
    push ax

    push [bp + 10] ; controller pointer
    push [bp + 8]  ; controller segment
    push RenderComponentId
    call getControllerComponent
    pop bx ; bx -> render component
    pop ds ; ds -> render segment

    mov ax, [bp + 6] ; x
    mov [bx + RenderComponentPositionX], ax
    mov ax, [bp + 4] ; y
    mov [bx + RenderComponentPositionY], ax

    pop ax
    pop bx
    pop ds
    pop bp
    ret 8
endp setControllerXandY

proc updateMouse
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push cx
    push di
    push ds

    mov di, [bp + 6] ; controller
    mov ds, [bp + 4] ; segment

    ; --- Get mouse position and buttons ---
    mov ax, 3
    int 33h   ; cx -> x, dx -> y, bx -> button status
    shr cx, 1 ; convert x from 0–639 to 0–319

    push di ; controller
    push ds ; segment
    push cx ; x
    push dx ; y
    call setControllerXandY

    ; --- Access Mouse component from controller ---
    push di   ; controller
    push ds   ; segment
    push MouseComponentId
    call getControllerComponent
    pop di    ; di -> mouse component pointer
    pop ds    ; ds -> component segment

    ; --- Extract button states ---
    mov al, bl
    and al, 1         ; al -> left button (bit 0)

    mov ah, bl
    shr ah, 1
    and ah, 1         ; ah -> right button (bit 1)

    ; === Detect Left Click ===
    mov bh, al                                ; current left
    mov bl, [di + MouseComponentLeftPressed]  ; previous left
    not bl
    and bl, bh
    and bl, 1
    mov [di + MouseComponentLeftClicked], bh

    ; === Detect Right Click ===
    mov bh, ah
    mov bl, [di + MouseComponentRightPressed]
    not bl
    and bl, bh
    and bl, 1
    mov [di + MouseComponentRightClicked], bl

    ; --- Save current button states ---
    mov [di + MouseComponentLeftPressed], al
    mov [di + MouseComponentRightPressed], ah

    pop ds
    pop di
    pop cx
    pop dx
    pop ax
    pop bx
    pop bp
    ret 4
endp updateMouse

proc keyboardHandler far              
	push ax
	push bx
    push cx
    push dx
	push di
	push si
	; read keyboard scan code
    in al, 60h

	; update keyboard state
    xor bh, bh
    mov bl, al
    and bl, 7Fh     ; bl = scan code
	
	; save to the keyboard array
    push cx
	mov cx, 7
    shr al, cl ; al = 0 if pressed, 1 if released
	pop cx
    xor al, 1  ; al = 1 if pressed, 0 if released
    mov [cs:KeyStateTable + bx], al  ; save pressed buttons in array
	
	; send EOI to XT keyboard
    in  al, 61h
    mov ah, al
    or  al, 80h
    out 61h, al
    mov al, ah
    out 61h, al

	; send EOI to master PIC
    mov al, 20h
    out 20h, al
	
    pop si
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    iret
endp keyboardHandler

; interrupt that hooks on to int70h
; that is called by the computer
; and call the "periodic" method 1024 times a sec
proc clock far
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    push ds

    ; Preserve port 70h contents
    in al, 70h
    mov bx, ax

    ; Read status register C to acknowledge RTC interrupt
    mov al, 0Ch
    out 70h, al
    mov al, 8Ch
    out 70h, al
    in al, 71h

    ; Restore port 70h contents
    mov ax, bx
    out 70h, al

    ; Notify PICs that interrupt is handled
    mov al, 20h
    out 0A0h, al
    out 020h, al

    push offset globalTime
    call periodic ; every tick (1024 times a sec)

    pop ds
    pop dx
    pop bx
    pop ax
    pop bp
    iret
endp clock

; setup the game clock
proc setUpClock
    push bp
    mov bp, sp
    push ax
    push ds
    push dx

    cli
    ; Save original mask of secondary PIC
    in al, 0A1h
    mov [bp + 4], al
    and al, 0FEh ; Enable IRQ 8 (RTC)
    out 0A1h, al

    ; Set frequency divisor in RTC register A
    mov al, 0Ah
    out 70h, al
    mov al, 8Ah
    out 70h, al
    in al, 71h
    and al, 11110000b ; Clear rate bits
    or al, 0110b      ; Set rate to 1024 Hz
    out 71h, al
    in al, 71h        ; Ensure the write is complete

    ; Enable periodic interrupts in RTC register B
    mov al, 0Bh
    out 70h, al
    mov al, 8Bh
    out 70h, al
    in al, 71h
    or al, 40h        ; Set PI (bit 6)
    out 71h, al
    in al, 71h        ; Acknowledge the change

    ; Set new interrupt handler for interrupt 70h
    mov al, 70h       ; Interrupt vector 70h
    mov ah, 25h       ; Set interrupt vector
    mov dx, offset clock ; Offset of the ISR
    push seg clock
    pop ds
    int 21h
    sti

    pop dx
    pop ds
    pop ax
    pop bp
    ret 2
endp setUpClock

; clean up the game's clock
proc cleanUpClock
    push bp
    mov bp, sp
    push ax
    ; Restore original mask of secondary PIC
    mov al, [bp + 4] ; mask pointer
    out 0A1h, al
    pop ax
    pop bp
    ret 2
endp cleanUpClock

; ***********************GENERAL GETTERS*********************

proc getControllerWordValue
    push bp
    mov bp, sp
    push bx
    push ds

    mov bx, [bp + 10] ; controller
    mov ds, [bp + 8] ; segment

    push bx
    push ds
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx
    pop ds ; component segment

    add bx, [bp + 4] ; parameter
    mov bx, [bx]

    mov [bp + 10], bx

    pop ds
    pop bx
    pop bp
    ret 6
endp getControllerWordValue

proc getControllerByteValue
    push bp
    mov bp, sp
    push bx
    push ds

    mov bx, [bp + 10] ; controller
    mov ds, [bp + 8]  ; segment

    push bx
    push ds
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx ; component
    pop ds ; component segment

    add bx, [bp + 4] ; parameter
    mov bl, [bx]
    mov bh, 0
    mov [bp + 10], bx ; value

    pop ds
    pop bx
    pop bp
    ret 6
endp getControllerByteValue

; ***********************GENERAL SETTERS*********************

proc setControllerWordValue
    push bp
    mov bp, sp
    push ax
    push bx
    push ds

    mov bx, [bp + 12] ; controller
    mov ds, [bp + 10] ; segment

    push bx
    push ds
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx ; component
    pop ds ; component segment

    add bx, [bp + 4] ; parameter
    mov ax, [bp + 8] ; value
    mov [bx], ax

    pop ds
    pop bx
    pop ax
    pop bp
    ret 10
endp setControllerWordValue

proc addControllerWordValue
    push bp
    mov bp, sp
    push ax
    push bx
    push ds

    mov bx, [bp + 12] ; controller
    mov ds, [bp + 10] ; segment

    push bx
    push ds
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx ; component
    pop ds ; component segment

    add bx, [bp + 4] ; parameter
    mov ax, [bp + 8] ; addition
    add [bx], ax

    pop ds
    pop bx
    pop ax
    pop bp
    ret 10
endp addControllerWordValue

; ****************************************

; input - word directionX pointer, word directionY pointer
proc updateDirection
    push bp
    mov bp, sp
    push ax
    push si
    push di
    push ds
    push es

    mov si, [bp + 10] ; directionX offset
    mov ds, [bp + 8]  ; directionX segment
    mov di, [bp + 6]  ; directionY offset
    mov es, [bp + 4]  ; directionY segment
    
    xor ax, ax
    mov [ds:si], ax ; reset directionX
    mov [es:di], ax ; reset directionY

    ; Horizontal input
    mov al, [KeyStateTable + 1Eh] ; 'A'
    or  al, al
    jz  .checkD
    mov [word ptr ds:si], -1
    jmp .checkVertical

.checkD:
    mov al, [KeyStateTable + 20h] ; 'D'
    or  al, al
    jz  .checkVertical
    mov [word ptr ds:si], 1

.checkVertical:
    mov al, [KeyStateTable + 11h] ; 'W'
    or  al, al
    jz  .checkS
    mov [word ptr es:di], -1
    jmp .end

.checkS:
    mov al, [KeyStateTable + 1Fh] ; 'S'
    or  al, al
    jz  .end
    mov [word ptr es:di], 1

.end:
    pop es
    pop ds
    pop di
    pop si
    pop ax
    pop bp
    ret 8
endp updateDirection

; clears the screen (turns all pixels to 0)
proc clearScreen
    push di
    push ax
    push es

    mov ax, VIDEO_MEMORY
    mov es, ax
    mov di, ScreenHeight * ScreenWidth
.clearLoop:
    mov [byte ptr es:di], BLACK_COLOR
    dec di
    jnz .clearLoop

    pop es
    pop ax
    pop di
    ret
endp clearScreen

; input - palette pointer
; sets it to the screen's palette
proc setPalette
    push bp
    mov bp, sp
    push ax
    push si
    push cx
    push dx
    push ds

	mov si, [bp + 6] ; controller
	mov ds, [bp + 4] ; segment

	mov cx, [si + PaletteLength]
    add si, PaletteData
	mov dx, 3C8h
	mov al, 0
	out dx, al ; copy starting color to port 3C8h
	inc dx     ; copy palette itself to port 3C9h
.setLoop:
	mov al, [si]   ; red
	out dx, al
	mov al, [si + 1] ; green
	out dx, al
	mov al, [si + 2] ; blue
	out dx, al
	add si, 3      ; move to next color
	loop .setLoop

    pop ds
    pop dx
    pop cx
    pop si
    pop ax
    pop bp
	ret 4
endp setPalette

proc printRect
    push bp
    mov bp, sp
    push bx
    push es

    mov bx, [bp + 8] ; rect pointer
    mov es, [bp + 6] ; rect segment
    
    push [es:bx + RectColor]
    push [es:bx + RectWidth]
    push [es:bx + RectHeight]
    push [bp + 4] ; screen position (left top)
    call printRectBySize

    pop es
    pop bx
    pop bp
    ret 6
endp printRect

proc clampSizeToScreenBounds
    push bp
    mov bp, sp
    push ax
    push dx
    push bx
    push cx
    push si

    mov bx, [bp + 8] ; width
    mov si, [bp + 6] ; height

    push 0
    push [bp + 4] ; position
    call toXandY
    pop dx ; dx -> x
    pop ax ; ax -> y

    ; if position is out of bounds skip draw
    cmp ax, ScreenHeight
    jge .skipDraw
    cmp dx, ScreenWidth
    jge .skipDraw

    ; Clamp width to screen bounds if necessary
    add dx, bx
    cmp dx, ScreenWidth
    jl .checkHeight

    sub dx, ScreenWidth
    sub bx, dx ; bx -> new width

.checkHeight:
    ; Clamp height to screen bounds if necessary
    add ax, si
    cmp ax, ScreenHeight
    jl .end

    sub ax, ScreenHeight
    sub si, ax ; si -> new height

    jmp .end
.skipDraw:
    mov cx, -1
.end:
    mov [bp + 4], bx ; new width
    mov [bp + 6], si ; new height
    mov [bp + 8], cx ; flag (-1 = skip)

    pop si
    pop cx
    pop bx
    pop dx
    pop ax
    pop bp
    ret
endp clampSizeToScreenBounds

proc printRectBySize
    push bp
    mov bp, sp
    push di
    push ax
    push bx
    push cx
    push dx
    push si
    push es
    mov ax, VIDEO_MEMORY ; set the print location
    mov es, ax
    
    mov bx, [bp + 10] ; color
    mov dx, [bp + 8]  ; width
    mov cx, [bp + 6]  ; height
    mov di, [bp + 4]  ; screen start position

    cmp bl, -1 ; skip draw if color is transparent
    je .end

    ; Adjust size to screen boundaries
    push dx
    push cx
    push di
    call clampSizeToScreenBounds
    pop dx  ; adjusted width
    pop cx  ; adjusted height
    pop ax  ; skip draw flag

    cmp ax, -1
    je .end ; skip draw if completely out of bounds

    ; di = current screen position
    ; dx = width
    ; bx = color
    ; cx = height counter
    ; si = x counter within current row

    mov si, 0
.printLoop:
    mov [byte ptr es:di], bl ; draw pixel
.skipPixel:
    inc di         ; next screen pixel
    inc si
    cmp si, dx     ; if row not done, continue
    jne .printLoop
; move to next row
    add di, ScreenWidth
    sub di, dx     ; move to next row
    xor si, si     ; reset x counter
    dec cx
    jnz .printLoop ; repeat for next row
.end:
    pop es
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    pop di
    pop bp
    ret 8
endp printRectBySize

proc printImageBySize
    push bp
    mov bp, sp
    push di
    push ax
    push bx
    push cx
    push dx
    push si
    push es
    push ds

    mov ax, VIDEO_MEMORY
    mov es, ax ; set the print location

    mov bx, [bp + 12] ; image color array
    mov ds, [bp + 10] ; image color segment
    mov dx, [bp + 8]  ; image width
    mov cx, [bp + 6]  ; image height
    mov di, [bp + 4]  ; screen start position

    ; Adjust size to screen boundaries
    push dx
    push cx
    push di
    call clampSizeToScreenBounds
    pop dx  ; adjusted width
    pop cx  ; adjusted height
    pop ax  ; skip draw flag

    cmp ax, -1
    je .end ; skip drawing if completely out of bounds

    ; di = current screen position
    ; bx = points the current color in image array
    ; dx = image width
    ; cx = image height counter
    ; si = x counter within current row

    xor si, si
.printLoop:
    mov al, [byte ptr bx]    ; get color
    cmp al, -1
    je .skipPixel            ; skip if transparent pixel (-1)
    mov [byte ptr es:di], al ; draw pixel
.skipPixel:
    inc di                   ; next screen pixel
    inc bx                   ; next image pixel
    inc si
    cmp si, dx
    jne .printLoop           ; if row not done, continue
; move to next row
    add di, ScreenWidth
    sub di, dx               ; move to next row

    mov ax, [bp + 8]         ; move to next color row
    sub ax, dx               ; add (original width - new width)
    add bx, ax

    xor si, si               ; reset x counter
    dec cx
    jnz .printLoop           ; repeat for next row
.end:
    pop ds
    pop es
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    pop di
    pop bp
    ret 10
endp printImageBySize

; input - image pointer, position (left top corner)
; prints the image at the specified location
proc printImage
    push bp
    mov bp, sp
    push ax
    push bx
    push es

    mov bx, [bp + 8] ; image pointer
    mov es, [bp + 6] ; image segment

    mov ax, bx
    add ax, ImageData
    push ax ; image data (colors)
    push es ; image segment
    push [es:bx + ImageWidth]
    push [es:bx + ImageHeight]
    push [bp + 4] ; screen position (left top)
    call printImageBySize

    pop es
    pop bx
    pop ax
    pop bp
    ret 6
endp printImage

; input - controller pointer
; prints it to the screen
proc printController
    push bp
    mov bp, sp
    push di
    push bx
    push ax
    push ds
    push es
    push dx

    mov bx, [bp + 6] ; bx -> controller pointer
    mov es, [bp + 4] ; es -> controller segment

    push bx ; controller pointer
    push es ; controller segment
    push RenderComponentId
    call getControllerComponent
    pop di ; di -> render component
    pop es ; es -> component segment

    mov bx, [es:di + RenderComponentImageOffset]  ; bx -> image offset
    mov ds, [es:di + RenderComponentImageSegment] ; ds -> image segment

    push [es:di + RenderComponentPositionX]
    push [es:di + RenderComponentPositionY]
    call toPosition
    pop dx ; dx -> position

    mov al, [bx] ; image type

    cmp al, RectId
    jz .isRect
    cmp al, ImageId
    jz .isImage
    cmp al, ArrayId
    jz .isArray
    cmp al, LabelId
    jz .isLabel

    jmp .end
.isRect:
    push bx ; rect pointer
    push ds ; rect segment
    push dx ; position
    call printRect
    jmp .end
.isArray:
    push bx ; array pointer
    push ds ; array segment
    push [es:di + RenderComponentRotation]
    call getArrayElementValue
    push ds ; array segment
    push dx ; position
    call printImage
    jmp .end
.isLabel:
    push bx ; label pointer
    push ds ; label segment
    push dx ; position
    call printLabel
    jmp .end
.isImage:
    push bx ; image pointer
    push ds ; image segment
    push dx ; position
    call printImage
.end:

    pop dx
    pop es
    pop ds
    pop ax
    pop bx
    pop di
    pop bp
    ret 4
endp printController

; saves the background to the controller so it could move
; without affecting the background
proc saveController
    push bp
    mov bp, sp
    push di
    push bx
    push cx
    push dx
    push si
    push ax
    push es
    push ds
    
    mov ax, VIDEO_MEMORY ; set the input location
    mov es, ax

    mov bx, [bp + 6] ; controller
    mov ds, [bp + 4] ; segment
    
    push bx ; controller
    push ds ; segment
    push RenderComponentId
    call getControllerComponent
    pop di ; di -> render component
    pop ds ; ds -> render segment

    mov bx, di
    add bx, RenderComponentBackground ; bx -> background saving place

    mov dx, [di + RenderComponentWidth]  ; dx -> width
    mov cx, [di + RenderComponentHeight] ; cx -> height

    push [di + RenderComponentPositionX]
    push [di + RenderComponentPositionY]
    call toPosition
    pop di ; di -> position

    mov si, 0  ; width counter
.saveLoop:
    mov al, [es:di] ; get color from screen
    mov [bx], al    ; save the color to the background array
    inc di
    inc bx
    inc si
    cmp si, dx ; if reached end of the row
    jne .saveLoop
    add di, ScreenWidth
    sub di, dx ; point to the next column
    xor si, si
    dec cx
    jnz .saveLoop

    pop ds
    pop es
    pop ax
    pop si
    pop dx
    pop cx
    pop bx
    pop di
    pop bp
    ret 4
endp saveController

proc printBackground
    push bp
    mov bp, sp
    push di
    push dx
    push ds
    
    mov di, [bp + 6] ; controller
    mov ds, [bp + 4] ; segment

    push di ; controller
    push ds ; segment
    push RenderComponentId
    call getControllerComponent
    pop di ; di -> render component
    pop ds ; ds -> render segment

    mov dx, di
    add dx, RenderComponentBackground

    push dx ; background save location
    push ds ; component segment
    push [di + RenderComponentWidth]
    push [di + RenderComponentHeight]

    push [di + RenderComponentPreviousPositionX]
    push [di + RenderComponentPreviousPositionY]
    call toPosition
    
    call printImageBySize

    mov dx, [di + RenderComponentPositionX]
    mov [di + RenderComponentPreviousPositionX], dx
    mov dx, [di + RenderComponentPositionY]
    mov [di + RenderComponentPreviousPositionY], dx

    pop ds
    pop dx
    pop di
    pop bp
    ret 4
endp printBackground

; input - controller pointer, word init position
; init the controller to the set position (saves the background, moves to the location)
proc initController
    push bp
    mov bp, sp
    push di
    push ax
    push bx
    push ds
    push dx

    mov di, [bp + 10] ; di -> controller pointer
    mov ds, [bp + 8]  ; ds -> controller segment
    mov ax, [bp + 6]  ; ax -> set x position
    mov dx, [bp + 4]  ; dx -> set y position

    push di
    push ds
    push RenderComponentId
    call getControllerComponent
    pop bx ; component offset
    pop ds ; component segment

    mov [bx + RenderComponentPositionX], ax
    mov [bx + RenderComponentPreviousPositionX], ax
    mov [bx + RenderComponentPositionY], dx
    mov [bx + RenderComponentPreviousPositionY], dx
    
    push di ; controller
    push ds ; segment
    call saveController

    pop dx
    pop ds
    pop bx
    pop ax
    pop di
    pop bp
    ret 8
endp initController

proc initAndUploadController
    push bp
    mov bp, sp

    push [bp + 14] ; controller offset
    push [bp + 12] ; controller segment
    push [bp + 10] ; x 
    push [bp + 8]  ; y
    call initController

    push [bp + 6]  ; renderLayer offset
    push [bp + 4]  ; renderLayer segment
    push [bp + 14] ; controller offset
    push [bp + 12] ; controller segment
    call uploadPointer

    pop bp
    ret 12
endp initAndUploadController

; input - animated controller pointer
; moves the current animation a frame (if last frame resets it)
proc moveToNextAnimationFrame
    push bp
    mov bp, sp
    push di
    push bx
    push ax
    push ds
    push es

    mov di, [bp + 6] ; controller pointer
    mov ds, [bp + 4] ; controller segment
    xor ax, ax
    
    push di ; controller
    push ds ; controller segment
    call getCurrentAnimation
    pop bx ; current animation
    pop es ; animtion segment
    mov bl, [es:bx + AnimationSize] ; animation size

    push di ; controller
    push ds ; controller segment
    push AnimatorComponentId
    call getControllerComponent
    pop di ; component pointer
    pop ds ; component segment

    mov al, [di + AnimatorComponentCurrentFrameIndex] ; current frame number
    inc al ; next frame

    cmp al, bl
    jne .end

    mov al, 0
.end:
    mov [di + AnimatorComponentCurrentFrameIndex], al ; set the frame
    
    pop es
    pop ds
    pop ax
    pop bx
    pop di
    pop bp
    ret 4
endp moveToNextAnimationFrame

; input - controller pointer, byte animation number
; sets the current animation by index
proc setAnimation
    push bp
    mov bp, sp
    push di
    push ax
    push ds

    mov di, [bp + 8] ; di -> controller pointer
    mov ds, [bp + 6] ; ds -> controller segment
    mov al, [bp + 4] ; al -> animation index

    push di ; controller pointer
    push ds ; controller segment
    push AnimatorComponentId
    call getControllerComponent
    pop di ; di -> animator component
    pop ds ; ds -> animator segment

    mov [di + AnimatorComponentCurrentAnimationIndex], al     ; set current animation
    mov [byte ptr di + AnimatorComponentCurrentFrameIndex], 0 ; set current frame 0

    pop ds
    pop ax
    pop di
    pop bp
    ret 6
endp setAnimation

proc getFrameImage
    push bp
    mov bp, sp
    push bx
    push si
    push ds

    mov bx, [bp + 8] ; animation pointer
    mov ds, [bp + 6] ; animation segment
    mov si, [bp + 4] ; frame index

    add bx, AnimationData ; first animation
    sal si, 2  ; byte * 4 = 2 words
    add bx, si ; current animation (every anim is 2 words)

    mov si, [bx]     ; image pointer
    mov bx, [bx + 2] ; image segment

    mov [bp + 6], si ; image pointer
    mov [bp + 8], bx ; image segment

    pop ds
    pop si
    pop bx
    pop bp
    ret 2
endp getFrameImage

; input - animated controller, current time (0-255)
; updates it's current animation
proc updateAnimation
    push bp
    mov bp, sp
    push ax
    push bx
    push di
    push cx
    push ds
    push es

    mov di, [bp + 8] ; di -> controller pointer
    mov ds, [bp + 6] ; ds -> controller segment
    mov al, [bp + 4] ; al -> current time

    push di ; controller pointer
    push ds ; controller segment
    call getCurrentAnimation
    pop bx ; bx -> animation pointer
    pop es ; es -> animation segment
    
    mov ch, [es:bx + AnimationSpeed] ; animation speed
    div ch ; ah -> current time % animation speed
    cmp ah, 0
    jne .end ; if correct time, move to next frame

    push di ; controller pointer
    push ds ; controller segment
    call moveToNextAnimationFrame

    push di ; controller pointer
    push ds ; controller segment
    push AnimatorComponentId
    push AnimatorComponentCurrentFrameIndex
    call getControllerByteValue
    pop cx ; cl -> current frame index

    push bx ; animation pointer
    push es ; animation segment
    push cx ; frame index
    call getFrameImage
    pop bx ; bx -> image pointer
    pop cx ; cx -> image segment

    push di ; controller pointer
    push ds ; controller segment
    push RenderComponentId
    call getControllerComponent
    pop di ; di -> render component
    pop ds ; ds -> component segment

    mov [di + RenderComponentImageOffset], bx
    mov [di + RenderComponentImageSegment], cx

.end:
    pop es
    pop ds
    pop cx
    pop di
    pop bx
    pop ax
    pop bp
    ret 6
endp updateAnimation

; updates animation time
proc updateAnimationTime
    push bp
    mov bp, sp
    push bx
    push ds

    mov bx, [bp + 6]    ; time pointer
    mov ds, [bp + 4]    ; time segment

    cmp [byte ptr bx], 255
    jne .continue
    mov [byte ptr bx], 0
.continue:
    inc [byte ptr bx]

    pop ds
    pop bx
    pop bp
    ret 4
endp updateAnimationTime

; input - renderLayer pointer
; prints all the controllers
proc printAllControllers
    push bp
    mov bp, sp
    push bx
    push cx
    push si
    push ds

    mov si, [bp + 6] ; layer offset
    mov ds, [bp + 4] ; ladyer segment

    mov cx, [si + PointerArraySize] ; layer size

    mov bx, si
    add bx, PointerArrayData

.printBackgroundLoop:
    cmp cx, 0
    je .printBackgroundEnd
    push [bx + PointerOffset]  ; controller pointer
    push [bx + PointerSegment] ; controller segment
    call printBackground
    add bx, PointerSize
    dec cx
    jmp .printBackgroundLoop
.printBackgroundEnd:
    mov cx, [si + PointerArraySize] ; layer size
    mov bx, si
    add bx, PointerArrayData
.saveLoop:
    cmp cx, 0
    je .saveEnd
    push [bx + PointerOffset]  ; controller pointer
    push [bx + PointerSegment] ; controller segment
    call saveController
    add bx, PointerSize
    dec cx
    jmp .saveLoop

.saveEnd:
    mov cx, [si + PointerArraySize] ; layer size
    mov bx, si
    add bx, PointerArrayData
.printImageLoop:
    cmp cx, 0
    je .end
    push [bx + PointerOffset]  ; controller pointer
    push [bx + PointerSegment] ; controller segment
    call printController
    add bx, PointerSize
    dec cx
    jmp .printImageLoop
.end:

    pop ds
    pop si
    pop cx
    pop bx
    pop bp
    ret 4
endp printAllControllers

; input - animated controller
; returns the current animation
proc getCurrentAnimation
    push bp
    mov bp, sp
    push di
    push bx
    push ds

    push [bp + 6] ; controller pointer
    push [bp + 4] ; controller segment
    push AnimatorComponentId
    call getControllerComponent
    pop di ; component
    pop ds ; segment

    xor bx, bx
    mov bl, [di + AnimatorComponentCurrentAnimationIndex]  ; current animation index
    add di, AnimatorComponentData ; animation list
    shl bx, 2                     ; each animation is 2 words     
    add di, bx                    ; current animation

    mov bx, [di + 2]              ; segment
    mov di, [di]                  ; get the pointer to anim and not the pointer to the pointer
    
    mov [bp + 4], di ; animation offset
    mov [bp + 6], bx ; animation segment

    pop ds
    pop bx
    pop di
    pop bp
    ret
endp getCurrentAnimation

; input - velocity controller
; update its velocity (x and y)
proc updateVelocity
    push bp
    mov bp, sp
    push bx
    push ax
    push si
    
    mov bx, [bp + 6] ; controller
    mov si, [bp + 4] ; segment

    push bx ; controller
    push si ; segment
    push PhysicsComponentId
    call getControllerComponent
    pop bx ; component
    pop si ; component segment

    mov ax, bx
    add ax, PhysicsComponentAxisX
    push ax ; axis
    push si ; segment
    call updatePhysicsAxis ; update x axis

    mov ax, bx
    add ax, PhysicsComponentAxisY
    push ax ; axis
    push si ; segment
    call updatePhysicsAxis ; update y axis

    pop si
    pop ax
    pop bx
    pop bp
    ret 4
endp updateVelocity

; input - velocity axis (start of each axis part)
; updates its velocity
proc updatePhysicsAxis
    push bp
    mov bp, sp
    push bx
    push dx
    push si
    push cx
    push ds

    mov si, [bp + 6]                                ; physics axis
    mov ds, [bp + 4]                                ; segment

    mov dx, [si + PhysicsComponentAxisFriction]     ; friction
    mov bx, [si + PhysicsComponentAxisVelocity]     ; velocity
    mov cx, [si + PhysicsComponentAxisMaxVelocity]  ; max velocity
    
    cmp bx, 0
    jl .positiveFriction ; if we go negative
    cmp bx, 0
    jg .negativeFriction ; if we go negative

    mov bx, [si + PhysicsComponentAxisAcceleration] ; accerlation
    add [si], bx                                    ; add velocity acceleration

    jmp .end
.negativeFriction:
    sub bx, dx ; check if the gravity is too much it will become positive, if so reset it
    cmp bx, 0
    jl .resetFriction
    sub [si + PhysicsComponentAxisVelocity], dx

    mov bx, [si + PhysicsComponentAxisAcceleration] ; accerlation
    add [si], bx                                    ; add velocity acceleration

    jmp .limitPositiveVelocity
.positiveFriction:
    add bx, dx ; check if the gravity is too much it will become negative, if so reset it
    cmp bx, 0
    jg .resetFriction
    add [si + PhysicsComponentAxisVelocity], dx
    
    mov bx, [si + PhysicsComponentAxisAcceleration] ; accerlation
    add [si], bx                                    ; add velocity acceleration

    jmp .limitNegativeVelocity
.resetFriction:
    mov [word ptr si + PhysicsComponentAxisVelocity], 0
    jmp .end
.limitPositiveVelocity:
    cmp [si + PhysicsComponentAxisVelocity], cx
    jl .limitNegativeVelocity
    mov [si + PhysicsComponentAxisVelocity], cx
.limitNegativeVelocity:
    neg cx
    cmp [si + PhysicsComponentAxisVelocity], cx
    jg .end
    mov [si + PhysicsComponentAxisVelocity], cx
.end:

    pop ds
    pop cx
    pop si
    pop dx
    pop bx
    pop bp
    ret 4
endp updatePhysicsAxis

; input - value min max
; returns the clamp of a value by: max(minimum, min(x, maximum))
proc getClamp
    push bp
    mov bp, sp
    push ax

    push [bp + 6] ; min

    push [bp + 8] ; value
    push [bp + 4] ; max
    call getMin
    call getMax
    pop ax
    mov [bp + 8], ax

    pop ax
    pop bp
    ret 4
endp getClamp

; width height x y
proc getClampedXandY
    push bp
    mov bp, sp
    push ax
    push cx
    push dx

    mov ax, ScreenWidth
    sub ax, [bp + 10] ; width

    push [bp + 6]     ; x
    push 0
    push ax
    call getClamp
    pop cx

    mov ax, ScreenHeight
    sub ax, [bp + 8] ; height

    push [bp + 4]    ; y
    push 0
    push ax
    call getClamp
    pop dx

    mov [bp + 8], cx ; x
    mov [bp + 10], dx ; y

    pop dx
    pop cx
    pop ax
    pop bp
    ret 4
endp getClampedXandY

; input - physics controller
; adds the velocity to the controllers using the subPixelAmount
; const to enable sub-pixel movement, for example - 0.5 pixels/frame
proc applyVelocity
    push bp
    mov bp, sp
    push bx
    push ax
    push di
    push dx
    push cx
    push ds
    push es

    mov bx, [bp + 6] ; bx -> controller pointer
    mov ds, [bp + 4] ; ds -> controller segment

    push bx ; controller offset
    push ds ; controller segment
    push PhysicsComponentId
    call getControllerComponent
    pop di ; physics component
    pop es ; es -> physics component segment

    push bx ; controller offset
    push ds ; controller segment
    push RenderComponentId
    call getControllerComponent
    pop bx ; render component
    pop ds ; render component segment

    mov cx, [bx + RenderComponentPositionX] ; cx -> x
    mov dx, [bx + RenderComponentPositionY] ; dx -> y

    push [es:di + PhysicsComponentVelocityY]
    push SubPixelAmount
    call divideModulo
    pop ax     ; y add
    add dx, ax ; dx new y

    pop ax ; left over
    add [es:di + PhysicsComponentAddY], ax

    push [es:di + PhysicsComponentAddY]
    push SubPixelAmount
    call divideModulo
    pop ax
    add dx, ax
    pop [es:di + PhysicsComponentAddY]

    push [es:di + PhysicsComponentVelocityX]
    push SubPixelAmount
    call divideModulo
    pop ax     ; x add
    add cx, ax ; cx new x

    pop ax ; left over
    add [es:di + PhysicsComponentAddX], ax

    push [es:di + PhysicsComponentAddX]
    push SubPixelAmount
    call divideModulo
    pop ax
    add cx, ax
    pop [es:di + PhysicsComponentAddX]

    push [bx + RenderComponentWidth]
    push [bx + RenderComponentHeight]
    push cx ; x
    push dx ; y
    call getClampedXandY
    pop [bx + RenderComponentPositionX]
    pop [bx + RenderComponentPositionY]

    pop es
    pop ds
    pop cx
    pop dx
    pop di
    pop ax
    pop bx
    pop bp
    ret 4
endp applyVelocity

proc updateAndApplyVelocity
    push bp
    mov bp, sp
    push bx
    push ax

    mov bx, [bp + 6] ; controller
    mov ax, [bp + 4] ; segment

    push bx ; controller
    push ax ; segment
    call updateVelocity

    push bx ; controller
    push ax ; segment
    call applyVelocity

    pop ax
    pop bx
    pop bp
    ret 4
endp updateAndApplyVelocity

proc walk
    push bp
    mov bp, sp
    push ax
    push bx
    
    mov ax, [bp + 4] ; direction X
    or ax, ax
    jz .isZero

    push [bp + 8] ; controller offset
    push [bp + 6] ; controller segment
    push ax       ; direction x
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call setControllerWordValue

.isZero:
    pop bx
    pop ax
    pop bp
    ret 6
endp walk

proc move2d
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    mov bx, [bp + 4] ; controller

    cmp ax, 0
    je .skipX

    push bx
    push ax
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call setControllerWordValue
.skipX:

    cmp dx, 0
    je .skipY

    push bx
    push dx
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.skipY:

    pop dx
    pop bx
    pop ax
    pop bp
    ret 2
endp move2d   

proc jump
    push bp
    mov bp, sp
    push ds

    cmp [byte ptr KeyStateTable + 39h], 0 ; space scan code
    jz .end

    push [bp + 6] ; controller offset
    push [bp + 4] ; controller segment
    push -1 * JumpHeight
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.end:

    pop ds
    pop bp
    ret 4
endp jump

proc getAbsValue
    push bp
    mov bp, sp
    push ax
    mov ax, [bp + 4]
    cmp ax, 0    ; check if positive
    jge .end     ; if greater than or equal to 0, jump to end
    neg ax       ; negate to get the absolute value
.end:
    mov [bp + 4], ax
    pop ax
    pop bp
    ret
endp getAbsValue

proc toXandY
    push bp
    mov bp, sp
    push ax
    push dx
    push cx

    mov ax, [bp + 4] ; position
    mov cx, ScreenWidth
    xor dx, dx
    idiv cx ; ax = y ; dx = x

    mov [bp + 4], dx
    mov [bp + 6], ax

    pop cx
    pop dx
    pop ax
    pop bp
    ret
endp toXandY

proc isInRange
    push bp
    mov bp, sp
    push ax

    mov ax, [bp + 4] ; value

    cmp ax, [bp + 8] ; if value < min
    jl .false

    cmp ax, [bp + 6]  ; if value > max
    jg .false

    mov ax, 1   ; return true
    jmp .end

.false:
    xor ax, ax
.end:
    mov [bp + 8], ax
    pop ax
    pop bp
    ret 4
endp isInRange

proc getControllerXandY
    push bp
    mov bp, sp
    push ds
    push di
    push ax
    
    push [bp + 6] ; controller pointer
    push [bp + 4] ; controller segment
    push RenderComponentId
    call getControllerComponent
    pop di ; component
    pop ds ; component segment

    mov ax, [di + RenderComponentPositionX]
    mov [bp + 4], ax ; x
    mov ax, [di + RenderComponentPositionY]
    mov [bp + 6], ax ; y

    pop ax
    pop di
    pop ds
    pop bp
    ret
endp getControllerXandY

proc doesPointCollideController
    push bp
    mov bp, sp
    push bx
    push si
    push ax
    push cx
    push dx
    push di
    push ds

    push [bp + 10] ; bx -> controller pointer
    push [bp + 8]  ; ds -> controller segment
    push RenderComponentId
    call getControllerComponent
    pop bx ; bx -> render component
    pop ds ; ds -> component segment

    mov cx, [bx + RenderComponentPositionX] ; cx -> controller x
    mov si, [bx + RenderComponentPositionY] ; si -> controller y
    
    push cx                             ; controller left x
    add cx, [bx + RenderComponentWidth]
    push cx                             ; controller right x
    push [bp + 4]                       ; point x
    call isInRange
    pop ax                              ; if there is collision

    cmp ax, 0
    jz .setFalse

    push si                              ; controller top y
    add si, [bx + RenderComponentHeight]
    push si                              ; controller bottom y
    push [bp + 6]                        ; point y
    call isInRange
    pop ax                               ; if there is collision
    cmp ax, 0
    jz .setFalse

    mov ax, 1 ; return true if both tests passed
    jmp .end

.setFalse:
    mov ax, 0
.end:
    mov [bp + 10], ax

    pop ds
    pop di
    pop dx
    pop cx
    pop ax
    pop si
    pop bx
    pop bp
    ret 6
endp doesPointCollideController

proc toPosition
    push bp
    mov bp, sp
    push ax
    push dx
    push cx
    push bx

    mov bx, [bp + 6] ; x
    mov ax, [bp + 4] ; y

    mov cx, ScreenWidth
    xor dx, dx
    imul cx ; ax = y * ScreenWidth
    add ax, bx

    mov [bp + 6], ax

    pop bx
    pop cx
    pop dx
    pop ax
    pop bp
    ret 2
endp toPosition

proc getStepElements
    push bp
    mov bp, sp
    push dx
    push cx
    push ax

    mov dx, [bp + 10] ; x1
    mov cx, [bp + 8]  ; y1
    sub dx, [bp + 6]  ; dx -> diff x
    sub cx, [bp + 4]  ; cx -> diff y

    push dx ; diff x
    push cx ; diff y
    call getMaxAbs
    pop ax ; ax -> amount of steps

    push dx ; diff x
    push RaycastPrecision
    call multiply
    pop dx ; dx -> diff x * 128

    push cx ; diff y
    push RaycastPrecision
    call multiply
    pop cx ; cx -> diff x * 128

    mov [bp + 6], dx ; diff x
    mov [bp + 8], cx ; diff y
    mov [bp + 10], ax ; amount of steps

    pop ax
    pop cx
    pop dx
    pop bp
    ret 2
endp getStepElements

proc areControllersColliding
    push bp
    mov bp, sp
    push ax
    push bx
    push si
    push cx
    push di
    push dx
    push ds

    push [bp + 10] ; controller offset
    push [bp + 8]  ; controller segment
    push RenderComponentId
    call getControllerComponent
    pop di ; di -> render component
    pop ds ; ds -> component segment

    push [di + RenderComponentPositionX] ; save original x
    push [di + RenderComponentPositionY] ; save original y

    push [di + RenderComponentPositionX]
    push [di + RenderComponentPositionY]
    push [di + RenderComponentPreviousPositionX]
    push [di + RenderComponentPreviousPositionY]
    call getStepElements
    pop cx ; cx -> diffX
    pop dx ; dx -> diffY
    pop ax ; ax -> amount of steps

    ; if no movement, don't raycast
    cmp ax, 0
    jne .startRaycast

    push [bp + 10] ; controller offset
    push [bp + 8]  ; controller segment
    push [bp + 6]  ; collider offset
    push [bp + 4]  ; collider segment
    call areControllersCollidingThisFrame
    pop dx ; x overlap
    pop cx ; y overlap
    pop ax ; collision flag
    jmp .cleanup

.startRaycast:
    push cx ; diffX
    push ax ; steps
    call divide
    pop cx ; cx -> stepX

    push dx ; diffY
    push ax ; steps
    call divide
    pop dx ; dx -> stepY

    ; start raycast from previous position
    mov bx, [di + RenderComponentPreviousPositionX]
    mov [di + RenderComponentPositionX], bx
    mov bx, [di + RenderComponentPreviousPositionY]
    mov [di + RenderComponentPositionY], bx

    xor bx, bx ; reset sumX
    xor si, si ; reset sumY

.raycastLoop:
    push cx ; store cx

    add bx, cx ; sumX += step X
    add si, dx ; sumY += step Y

    push bx ; sumX
    push RaycastPrecision
    call divideModulo
    pop cx  ; addX
    pop bx  ; updated sumX
    add [di + RenderComponentPositionX], cx ; apply step x

    push si ; sumY
    push RaycastPrecision
    call divideModulo
    pop cx  ; addY
    pop si  ; updated sumY
    add [di + RenderComponentPositionY], cx ; apply step y

    pop cx ; restore cx

    push ax ; store ax (steps left)
    push dx ; store dx
    push cx ; store cx

    ; check collision at current position
    push [bp + 10] ; controller pointer
    push [bp + 8]  ; controller segment
    push [bp + 6]  ; collider pointer
    push [bp + 4]  ; collider segment
    call areControllersCollidingThisFrame
    pop dx ; dx -> x change to correctly collide
    pop cx ; cx -> y change to correctly collide
    pop ax ; ax -> collision flag (1/0)

    ; push [bp + 10]
    ; push [bp + 8]
    ; push 90
    ; call printControllerByColor ; to visualize

    cmp ax, 0
    je .didntCollide

    pop bx ; clear the store of ax
    pop bx ; clear the store of dx
    pop bx ; clear the store of cx
    jmp .cleanup

.didntCollide:
    pop cx ; restore cx
    pop dx ; restore dx
    pop ax ; restore ax (steps left)

    dec ax
    jnz .raycastLoop
    mov ax, 0

.cleanup:
    pop bx ; get original y
    pop si ; get original x

    cmp ax, 1 ; if collision detect don't restore the position
    je .didCollide

    mov [di + RenderComponentPositionX], si
    mov [di + RenderComponentPositionY], bx

.didCollide:

    mov [bp + 6], dx  ; x change to correctly collide
    mov [bp + 8], cx  ; y change to correctly collide
    mov [bp + 10], ax ; collision flag (1/0)

    pop ds
    pop dx
    pop di
    pop cx
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp areControllersColliding

proc areControllerCollidingLayer
    push bp
    mov bp, sp
    push ax
    push bx
    push si
    push cx
    push di
    push dx
    push ds

    push [bp + 10] ; controller offset
    push [bp + 8]  ; controller segment
    push RenderComponentId
    call getControllerComponent
    pop di ; di -> render component
    pop ds ; ds -> component segment

    push [di + RenderComponentPositionX] ; save original x
    push [di + RenderComponentPositionY] ; save original y

    push [di + RenderComponentPositionX]
    push [di + RenderComponentPositionY]
    push [di + RenderComponentPreviousPositionX]
    push [di + RenderComponentPreviousPositionY]
    call getStepElements
    pop cx ; cx -> diffX
    pop dx ; dx -> diffY
    pop ax ; ax -> amount of steps

    ; if no movement, don't raycast
    cmp ax, 0
    jne .startRaycast

    push [bp + 10] ; controller offset
    push [bp + 8]  ; controller segment
    push [bp + 6]  ; collider offset
    push [bp + 4]  ; collider segment
    call getFirstCollisionFromLayer
    pop dx ; x overlap
    pop cx ; y overlap
    pop ax ; collision flag
    jmp .cleanup

.startRaycast:
    push cx ; diffX
    push ax ; steps
    call divide
    pop cx ; cx -> stepX

    push dx ; diffY
    push ax ; steps
    call divide
    pop dx ; dx -> stepY

    ; start raycast from previous position
    mov bx, [di + RenderComponentPreviousPositionX]
    mov [di + RenderComponentPositionX], bx
    mov bx, [di + RenderComponentPreviousPositionY]
    mov [di + RenderComponentPositionY], bx

    xor bx, bx ; reset sumX
    xor si, si ; reset sumY

.raycastLoop:
    push cx ; store cx

    add bx, cx ; sumX += step X
    add si, dx ; sumY += step Y

    push bx ; sumX
    push RaycastPrecision
    call divideModulo
    pop cx  ; addX
    pop bx  ; updated sumX
    add [di + RenderComponentPositionX], cx ; apply step x

    push si ; sumY
    push RaycastPrecision
    call divideModulo
    pop cx  ; addY
    pop si  ; updated sumY
    add [di + RenderComponentPositionY], cx ; apply step y

    pop cx ; restore cx

    push ax ; store ax (steps left)
    push dx ; store dx
    push cx ; store cx

    ; check collision at current position
    push [bp + 10] ; controller pointer
    push [bp + 8]  ; controller segment
    push [bp + 6]  ; collider pointer
    push [bp + 4]  ; collider segment
    call getFirstCollisionFromLayer
    pop dx ; dx -> x change to correctly collide
    pop cx ; cx -> y change to correctly collide
    pop ax ; ax -> collision flag (1/0)

    ; push [bp + 10]
    ; push [bp + 8]
    ; push 90
    ; call printControllerByColor ; to visualize

    cmp ax, 0
    je .didntCollide

    pop bx ; clear the store of ax
    pop bx ; clear the store of dx
    pop bx ; clear the store of cx
    jmp .cleanup

.didntCollide:
    pop cx ; restore cx
    pop dx ; restore dx
    pop ax ; restore ax (steps left)

    dec ax
    jnz .raycastLoop
    mov ax, 0

.cleanup:
    pop bx ; get original y
    pop si ; get original x

    cmp ax, 1 ; if collision detect don't restore the position
    je .didCollide

    mov [di + RenderComponentPositionX], si
    mov [di + RenderComponentPositionY], bx

.didCollide:

    mov [bp + 6], dx  ; x change to correctly collide
    mov [bp + 8], cx  ; y change to correctly collide
    mov [bp + 10], ax ; collision flag (1/0)

    pop ds
    pop dx
    pop di
    pop cx
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp areControllerCollidingLayer

proc getMin
    push bp
    mov bp, sp
    push bx
    push dx

    mov bx, [bp + 4] ; value1
    mov dx, [bp + 6] ; value2

    cmp bx, dx
    jg .end
    mov dx, bx
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMin

proc getMax
   push bp
    mov bp, sp
    push bx
    push dx

    mov bx, [bp + 4] ; value1
    mov dx, [bp + 6] ; value2

    cmp bx, dx
    jl .end
    mov dx, bx
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMax

proc getMinAbs
   push bp
    mov bp, sp
    push bx
    push dx

    mov bx, [bp + 4] ; value1
    mov dx, [bp + 6] ; value2

    push bx
    call getAbsValue
    pop bx
    
    push dx
    call getAbsValue
    pop dx

    cmp bx, dx
    jg .end
    mov dx, bx
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMinAbs

proc getMaxAbsIndex
    push bp
    mov bp, sp
    push bx
    push dx

    mov bx, [bp + 4] ; value1
    mov dx, [bp + 6] ; value2

    push bx
    call getAbsValue
    pop bx
    
    push dx
    call getAbsValue
    pop dx

    cmp bx, dx
    jl .continue
    mov dx, 1
    jmp .end
.continue:
    mov dx, 0
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMaxAbsIndex

proc getMinAbsIndex
    push bp
    mov bp, sp
    push bx
    push dx

    push [bp + 6] ; value1
    call getAbsValue
    pop dx

    push [bp + 4] ; value2
    call getAbsValue
    pop bx
    
    cmp bx, dx ; value1
    jg .continue
    mov dx, 1
    jmp .end
.continue:
    mov dx, 0
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMinAbsIndex

proc getMaxAbs
    push bp
    mov bp, sp
    push bx
    push dx

    mov bx, [bp + 4] ; value1
    mov dx, [bp + 6] ; value2

    push bx
    call getAbsValue
    pop bx
    
    push dx
    call getAbsValue
    pop dx

    cmp bx, dx
    jl .end
    mov dx, bx
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMaxAbs

proc multiply
    push bp
    mov bp, sp
    push ax
    push dx
    push cx

    mov ax, [bp + 6]
    mov cx, [bp + 4]

    xor dx, dx
    imul cx
    mov [bp + 6], ax

    pop cx
    pop dx
    pop ax
    pop bp
    ret 2
endp multiply

proc divideModulo
    push bp
    mov bp, sp
    push ax
    push dx

    mov ax, [bp + 6]

    cwd
    idiv [bp + 4]
    mov [bp + 4], ax ; /
    mov [bp + 6], dx ; %

    pop dx
    pop ax
    pop bp
    ret
endp divideModulo

proc divide
    push bp
    mov bp, sp
    push ax
    push dx
    push cx

    mov ax, [bp + 6]

    cwd
    idiv [bp + 4]
    mov [bp + 6], ax

    pop cx
    pop dx
    pop ax
    pop bp
    ret 2
endp divide

proc getSign
    push bp
    mov bp, sp
    push ax

    cmp [bp + 4], 0
    jnz .isNotZero
    mov ax, 0
    jmp .end
.isNotZero:

    cmp [bp + 4], 0
    jg .isPositive

    mov ax, -1
    jmp .end
.isPositive:
    mov ax, 1

.end:
    mov [bp + 4], ax
    pop ax
    pop bp
    ret
endp getSign

proc areControllersCollidingThisFrame
    push bp
    mov bp, sp
    push ax
    push bx
    push si
    push dx
    push ds
    push es
    
    push [bp + 10] ; controller offset1
    push [bp + 8]  ; controller segment1
    push RenderComponentId
    call getControllerComponent
    pop bx ; bx -> render component1
    pop es ; es -> component segment1

    push [bp + 6]  ; controller offset2
    push [bp + 4]  ; controller segment2
    push RenderComponentId
    call getControllerComponent
    pop si ; si -> render component2
    pop ds ; ds -> component segment2

    push [es:bx + RenderComponentPositionX]
    push [es:bx + RenderComponentWidth]
    push [si + RenderComponentPositionX]
    push [si + RenderComponentWidth]
    call isAxisCollision
    pop dx ; dx -> x collision

    cmp dx, 0 ; if doesn't collide in x
    jz .setFalse

    push [es:bx + RenderComponentPositionY]
    push [es:bx + RenderComponentHeight]
    push [si + RenderComponentPositionY]
    push [si + RenderComponentHeight]
    call isAxisCollision
    pop ax ; ax -> y collision

    cmp ax, 0 ; if doesn't collide in y
    je .setFalse
    mov bx, 1

    push dx ; x overlap
    push ax ; y overlap
    call getMinAbsIndex
    pop si ; 0 -> x is smaller, 1 -> y is smaller

    cmp si, 1 ; if y is smaller, reset x
    je .resetX

    mov ax, 0 ; reset y
    jmp .end
.resetX:
    mov dx, 0 ; reset x

    jmp .end
.setFalse:
    mov ax, 0
    mov dx, 0
    mov bx, 0
.end:
    mov [bp + 6], dx  ; x change to correctly collide
    mov [bp + 8], ax  ; y change to correctly collide
    mov [bp + 10], bx ; collision flag (1/0)

    pop es
    pop ds
    pop dx
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp areControllersCollidingThisFrame

proc isAxisCollision
    push bp
    mov bp, sp
    push cx
    push dx
    push bx
    push ax
    push si
    push di

    mov bx, [bp + 10] ; bx -> left/top1
    mov ax, [bp + 8]  ; ax -> width/height1
    mov dx, [bp + 6]  ; dx -> left/top2
    mov cx, [bp + 4]  ; cx -> width/height2

    add ax, bx ; ax -> right/bottom1
    add cx, dx ; cx -> right/bottom2

    cmp ax, dx  ; if bottom1 is less than top2
    jle .noCollision
    cmp cx, bx  ; if bottom2 is less than top1
    jle .noCollision

    push ax ; bottom1
    push cx ; bottom2
    call getMin
    pop si ; si -> min (bottom1, bottom2)

    push bx ; top1
    push dx ; top2
    call getMax
    pop di ; di -> max (top1, top2)

    sub di, si ; di -> overlap

    cmp ax, cx ; if bottom1 < bottom2 the overlap is opposite
    jle .end

    neg di
    jmp .end

.noCollision:
    mov di, 0
.end:
    mov [bp + 10], di

    pop di
    pop si
    pop ax
    pop bx
    pop dx
    pop cx
    pop bp
    ret 6
endp isAxisCollision

proc getControllerComponent
    push bp
    mov bp, sp
    push ax
    push bx
    push si
    push ds

    mov bx, [bp + 8] ; controller
    mov ds, [bp + 6] ; segment
    mov ax, [bp + 4] ; al -> target componentId

    add bx, ControllerComponentData
    sub bx, ComponentNextComponent

.componentLoop:
    add bx, ComponentNextComponent
    mov ah, [bx + ComponentId] ; current component id

    cmp al, ah
    jne .componentLoop

    mov ax, [bx + ComponentOffset]
    mov bx, [bx + ComponentSegment]

    mov [bp + 6], ax ; offset
    mov [bp + 8], bx ; segment

    pop ds
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp getControllerComponent

proc endAndCleanUp
    push offset previousIRQMask
    call cleanUpClock

    mov ah, 0
    mov al, 2
    int 10h
    mov ax, 4C00h
    int 21h
    ret
endp endAndCleanUp

; called 1024 times a sec
proc periodic
    push bp
    mov bp, sp
    push bx
    push cx
    push dx
    push ax
    mov bx, [bp + 4]
    inc [word ptr bx]
    cmp [word ptr bx], 1025
    jl .skipReset
    mov [word ptr bx], 1
.skipReset:
    mov ax, [bx]
    mov cx, GAME_SPEED
    xor dx, dx
    div cx
    cmp dx, 0
    jne .skipGameLoop
    call gameLoop
.skipGameLoop:
    pop ax
    pop dx
    pop cx
    pop bx
    pop bp
    ret 2
endp periodic

; setups the keyboard handler
; input - pointer to the old segment save, another for the offset
proc setupKeyboardHandler
    push bp
    mov bp, sp
    push ax
    push es
    xor ax, ax
    mov es, ax ; set es to IVT
    cli
    ; Save the original ISR address
    mov ax, [word ptr es:9*4]
    mov [bp + 4], ax ; save old offset
    mov ax, [word ptr es:9*4+2]
    mov [bp + 6], ax ; save old segment
    ; Set the new ISR address
    mov [word ptr es:9*4], offset keyboardHandler
    mov [word ptr es:9*4+2], seg keyboardHandler
    sti
    pop es
    pop ax
    pop bp
    ret 4
endp setupKeyboardHandler

proc handleBounceCollision
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push ds

    push [bp + 10] ; controller
    push [bp + 8]  ; controller segment
    push [bp + 6]  ; collider
    push [bp + 4]  ; collider segment
    call areControllersColliding
    pop ax ; ax -> x overlap
    pop dx ; dx -> y overlap
    pop bx ; bx -> collision flag (1/0)

    cmp bx, 0
    je .end ; if didn't collide

    push [bp + 10] ; controller
    push [bp + 8]  ; segment
    push ax ; x overlap
    push RenderComponentId
    push RenderComponentPositionX
    call addControllerWordValue

    push [bp + 10] ; controller
    push [bp + 8]  ; segment
    push dx ; y overlap
    push RenderComponentId
    push RenderComponentPositionY
    call addControllerWordValue

    push [bp + 10] ; controller offset
    push [bp + 8]  ; controller segment
    push PhysicsComponentId
    call getControllerComponent
    pop bx ; bx -> physics component
    pop ds ; ds -> component segment

    push dx
    call getAbsValue
    pop dx
    cmp dx, 1
    jl .bounceX

.bounceY:
    mov ax, [bx + PhysicsComponentVelocityY]
    neg ax
    mov [bx + PhysicsComponentVelocityY], ax
    jmp .end

.bounceX:
    mov ax, [bx + PhysicsComponentVelocityX]
    neg ax
    mov [bx + PhysicsComponentVelocityX], ax

.end:

    pop ds
    pop dx
    pop ax
    pop bx
    pop bp
    ret 8
endp handleBounceCollision

proc handleBounceCollisionLayer
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push ds

    push [bp + 6]
    push [bp + 4]
    push [bp + 10]
    push [bp + 8]
    call sortCollisionLayerByDistance

    push [bp + 10] ; controller
    push [bp + 8]  ; controller segment
    push [bp + 6]  ; collider
    push [bp + 4]  ; collider segment
    call areControllerCollidingLayer
    pop ax ; ax -> x overlap
    pop dx ; dx -> y overlap
    pop bx ; bx -> collision flag (1/0)

    cmp bx, 0
    je .end ; if didn't collide

    push [bp + 10] ; controller
    push [bp + 8]  ; segment
    push ax ; x overlap
    push RenderComponentId
    push RenderComponentPositionX
    call addControllerWordValue

    push [bp + 10] ; controller
    push [bp + 8]  ; segment
    push dx ; y overlap
    push RenderComponentId
    push RenderComponentPositionY
    call addControllerWordValue

    push [bp + 10] ; controller offset
    push [bp + 8]  ; controller segment
    push PhysicsComponentId
    call getControllerComponent
    pop bx ; bx -> physics component
    pop ds ; ds -> component segment

    push dx
    call getAbsValue
    pop dx
    cmp dx, 1
    jl .bounceX

.bounceY:
    mov ax, [bx + PhysicsComponentVelocityY]
    neg ax
    mov [bx + PhysicsComponentVelocityY], ax
    jmp .end

.bounceX:
    mov ax, [bx + PhysicsComponentVelocityX]
    neg ax
    mov [bx + PhysicsComponentVelocityX], ax

.end:

    pop ds
    pop dx
    pop ax
    pop bx
    pop bp
    ret 8
endp handleBounceCollisionLayer

; proc handleWallCollision
;     push bp
;     mov bp, sp
;     push bx
;     push ax
;     mov bx, [bp + 6] ; controller

;     push bx
;     push [bp + 4] ; collider
;     call areControllersColliding
;     pop ax ; amount to move

;     cmp ax, 0
;     je .skipResetX

;     push bx
;     push ax
;     push RenderComponentId
;     push RenderComponentPosition
;     call addControllerWordValue

;     push ax
;     call getAbsValue
;     pop ax
;     cmp ax, ScreenWidth
;     jl .skipResetY

;     push bx
;     push 0
;     push PhysicsComponentId
;     push PhysicsComponentVelocityY
;     call setControllerWordValue
;     jmp .skipResetX

; .skipResetY:

;     push bx
;     push 0
;     push PhysicsComponentId
;     push PhysicsComponentVelocityX
;     call setControllerWordValue

; .skipResetX:
;     pop ax
;     pop bx
;     pop bp
;     ret 4
; endp handleWallCollision

proc getRandomInRange
    push bp
    mov bp, sp
    push bx
    push ax

    push [bp + 10] ; seed offset
    push [bp + 8]  ; seed segment
    call getRandomWordBySeed
    pop bx ; bx -> word random value

    mov ax, [bp + 4] ; max
    sub ax, [bp + 6] ; max - min
    inc ax           ; ax -> number of possibilities

    and bx, ax       ; divide by range
    add bx, [bp + 6] ; add min value

    mov [bp + 10], bx ; return it

    pop ax
    pop bx
    pop bp
    ret 6
endp getRandomInRange

; calculates pseudo random numbers by a seed
; based on LFSR https://en.wikipedia.org/wiki/Linear-feedback_shift_register#Xorshift_LFSRs
proc getRandomWordBySeed
    push bp
    mov bp, sp
    push ax
    push cx
    push si
    push ds

    mov si, [bp + 6] ; seed pointer
    mov ds, [bp + 4] ; seed segment
    mov ax, [si]     ; get seed

    ; xorshift-style PRNG
    mov cx, ax
    shl cx, 7
    xor ax, cx

    mov cx, ax
    shr cx, 9
    xor ax, cx

    mov cx, ax
    shl cx, 8
    xor ax, cx

    mov [si], ax     ; change the seed
    mov [bp + 6], ax ; return the random number

    pop ds
    pop si
    pop cx
    pop ax
    pop bp
    ret 2
endp getRandomWordBySeed

; Array Procs

proc getArrayElementValue
    push bp
    mov bp, sp
    push bx
    push dx
    push ax
    push ds

    mov bx, [bp + 8] ; array offset
    mov ds, [bp + 6] ; array segment
    mov dx, [bp + 4] ; index

    mov ax, [bx + ArrayElementSize]
    mul dx ; ax -> index * element size

    add bx, ArrayData
    add bx, ax
    mov bx, [bx]
    mov [bp + 8], bx

    pop ds
    pop ax
    pop dx
    pop bx
    pop bp
    ret 4
endp getArrayElementValue

proc getArrayElementPointer
    push bp
    mov bp, sp
    push bx
    push dx
    push ax
    push ds

    mov bx, [bp + 8] ; array offset
    mov ds, [bp + 6] ; array segment
    mov dx, [bp + 4] ; index

    mov ax, [bx + ArrayElementSize]
    mul dx ; ax -> index * element size

    add bx, ArrayData
    add bx, ax
    mov [bp + 8], bx

    pop ds
    pop ax
    pop dx
    pop bx
    pop bp
    ret 4
endp getArrayElementPointer

proc setArrayElement
    push bp
    mov bp, sp
    push bx
    push si
    push dx
    push ax
    push ds

    mov bx, [bp + 10] ; array pointer
    mov ds, [bp + 8]  ; array segment
    mov si, [bp + 6]  ; value
    mov ax, [bp + 4]  ; index

    mov dx, [bx + ArrayElementSize] ; element size
    mul dx ; ax = index * element size

    add bx, ArrayData ; first element
    add bx, ax

    mov [bx], si

    pop ds
    pop ax
    pop dx
    pop si
    pop bx
    pop bp
    ret 8
endp setArrayElement

proc pushToArray
    push bp
    mov bp, sp
    push bx
    push si
    push dx
    push ax
    push ds

    mov bx, [bp + 8] ; array offset
    mov ds, [bp + 6] ; array segment
    mov si, [bp + 4] ; value

    mov dx, [bx + ArrayElementSize] ; element size
    mov ax, [bx + ArraySize]        ; array size
    inc [word ptr bx + ArraySize]   ; increase array size
    mul dx                          ; ax = index * element size

    add bx, ArrayData ; first element
    add bx, ax        ; currect element position

    mov [bx], si

    pop ds
    pop ax
    pop dx
    pop si
    pop bx
    pop bp
    ret 6
endp pushToArray

proc popFromArray
    push bp
    mov bp, sp
    push bx
    push dx
    push ax
    push ds

    mov bx, [bp + 6] ; array offset
    mov ds, [bp + 4] ; array segment

    mov dx, [bx + ArrayElementSize] ; element size
    mov ax, [bx + ArraySize]        ; array size
    dec [word ptr bx + ArraySize]            ; decrease array size
    mul dx                          ; ax = index * element size

    add bx, ArrayData ; first element
    add bx, ax        ; currect element position

    mov bx, [bx]
    mov [bp + 6], bx

    pop ds
    pop ax
    pop dx
    pop bx
    pop bp
    ret 2
endp popFromArray

proc createArray
    push bp
    mov bp, sp
    push bx
    push si
    push cx
    push ds

    mov bx, [bp + 10] ; offset
    mov ds, [bp + 8] ; segment
    mov si, [bp + 6] ; length
    mov cx, [bp + 4] ; element size
    
    mov [byte ptr bx], ArrayId
    mov [bx + ArrayElementSize], cx
    mov [bx + ArraySize], si

    pop ds
    pop cx
    pop si
    pop bx
    pop bp
    ret 8
endp createArray

proc goThroughArrayDownwards
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push ds

    mov bx, [bp + 8] ; array offset
    mov ds, [bp + 6] ; array segment
    mov dx, [bp + 4] ; current index

    cmp dx, -1
    jnz .continue
    mov dx, [bx + ArraySize]
.continue:
    dec dx
    mov [bp + 8], dx

    push bx
    push ds
    push dx
    call getArrayElementValue
    pop bx
    mov [bp + 6], bx

    pop ds
    pop dx
    pop ax
    pop bx
    pop bp
    ret 2
endp goThroughArrayDownwards

proc goThroughArrayUpwardsValue
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push ds

    mov bx, [bp + 8] ; array offset
    mov ds, [bp + 6] ; array segment
    mov dx, [bp + 4] ; current counter (not index)

    cmp dx, -1
    jnz .continue
    mov dx, [bx + ArraySize]
.continue:
    dec dx
    mov [bp + 8], dx

    mov ax, [bx + ArraySize]
    sub ax, dx
    mov dx, ax
    dec dx ; dx -> index

    mov ax, [bx + ArrayElementSize]
    mul dx ; ax = index * element size

    add bx, ArrayData
    add bx, ax
    mov bx, [bx]
    mov [bp + 6], bx

    pop ds
    pop dx
    pop ax
    pop bx
    pop bp
    ret 2
endp goThroughArrayUpwardsValue

proc goThroughArrayUpwardsOffset
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push ds

    mov bx, [bp + 8] ; array offset
    mov ds, [bp + 6] ; array segment
    mov dx, [bp + 4] ; current counter (not index)

    cmp dx, -1
    jnz .continue
    mov dx, [bx + ArraySize]
.continue:
    dec dx
    mov [bp + 8], dx

    mov ax, [bx + ArraySize]
    sub ax, dx
    mov dx, ax
    dec dx ; dx -> index

    mov ax, [bx + ArrayElementSize]
    mul dx ; ax = index * element size

    add bx, ArrayData
    add bx, ax
    mov [bp + 6], bx

    pop ds
    pop dx
    pop ax
    pop bx
    pop bp
    ret 2
endp goThroughArrayUpwardsOffset

proc create2DArray
    push bp
    mov bp, sp
    push bx
    push si
    push cx
    push ax

    mov bx, [bp + 10] ; location
    mov si, [bp + 8]  ; columns
    mov ax, [bp + 6]  ; rows
    mov cx, [bp + 4]  ; element size
    
    mov [byte ptr bx], Array2DId
    mov [bx + Array2DElementSize], cx
    mov [bx + Array2DColumns], si
    mov [bx + Array2DRows], ax

    pop ax
    pop cx
    pop si
    pop bx
    pop bp
    ret 8
endp create2DArray

proc get2DArrayElement
    push bp
    mov bp, sp
    push bx
    push dx
    push ax
    push si

    mov bx, [bp + 8] ; array
    mov si, [bp + 6] ; column
    mov dx, [bp + 4] ; row
    
    mov ax, [bx + Array2DRows]
    mul dx ; ax = rows * row
    add ax, si
    mov dx, [bx + Array2DElementSize]
    mul dx

    add bx, Array2DData
    add bx, ax
    mov bx, [bx]
    mov [bp + 8], bx

    pop si
    pop ax
    pop dx
    pop bx
    pop bp
    ret 4
endp get2DArrayElement

proc get2DArrayRow
    push bp
    mov bp, sp
    push bx
    push dx
    push ax

    mov bx, [bp + 6] ; array
    mov dx, [bp + 4] ; row
    
    mov ax, [bx + Array2DColumns]
    mul dx ; ax = rows * row
    mov dx, [bx + Array2DElementSize]
    mul dx

    add bx, Array2DData
    add bx, ax
    mov [bp + 6], bx

    pop ax
    pop dx
    pop bx
    pop bp
    ret 2
endp get2DArrayRow

proc goThroughRowUpwards
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push di

    mov di, [bp + 8] ; 2d array
    mov bx, [bp + 6] ; row array
    mov dx, [bp + 4] ; current index

    cmp dx, -1
    jnz .continue
    mov dx, [di + Array2DColumns]
    sub bx, [di + Array2DElementSize]
.continue:
    dec dx
    mov [bp + 6], dx

    add bx, [di + Array2DElementSize]
    mov [bp + 8], bx

    pop di
    pop dx
    pop ax
    pop bx
    pop bp
    ret 2
endp goThroughRowUpwards

proc goThroughRowDownwards
    push bp
    mov bp, sp
    push bx
    push dx
    push di
    push ax

    mov di, [bp + 8] ; 2d array
    mov bx, [bp + 6] ; row array
    mov dx, [bp + 4] ; current index

    cmp dx, -1
    jnz .continue
    
    mov ax, [di + Array2DElementSize]
    mov dx, [di + Array2DColumns]
    push dx

    inc dx
    mul dx
    add bx, ax

    pop dx

.continue:
    dec dx
    mov [bp + 6], dx

    sub bx, [di + Array2DElementSize]
    mov [bp + 8], bx

    pop ax
    pop di
    pop dx
    pop bx
    pop bp
    ret 2
endp goThroughRowDownwards

proc printChar
    push bp
    mov bp, sp
    push dx
    push ax
    mov dl, [bp + 4]
    add dl, 30h
    mov ah, 2
    int 21h
    mov dl, ' '
    mov ah, 2
    int 21h
    pop ax
    pop dx
    pop bp
    ret 2
endp printChar

proc printNumber
    push bp
    mov bp, sp
    push dx
    push ax
    push cx
    push si

    mov ax, [bp + 4] ; number to print
    mov si, 10
    mov cx, 0

    ; check if negative
    cmp ax, 0
    jge .saveLoop    ; if positive or zero, proceed normally

    ; if negative, print '-' and make number positive for correct ASCII
    push ax
    mov dl, '-'
    mov ah, 2
    int 21h
    pop ax

    neg ax

.saveLoop:
    cwd
    idiv si  ; ax / 10 -> quotient in ax, remainder in dx

    add dl, '0'  ; Convert remainder to ASCII
    push dx      ; Store digit on stack
    inc cx       ; Count number of digits

    test ax, ax
    jnz .saveLoop

.printLoop:
    pop dx    ; get digit from stack
    mov ah, 2
    int 21h   ; print char

    dec cx
    jnz .printLoop

    ; print space at the end
    mov dl, ' '
    mov ah, 2
    int 21h
    
    pop si
    pop cx
    pop ax
    pop dx
    pop bp
    ret 2
endp printNumber

proc handleRightPlayer
    push bp
    mov bp, sp
    push bx
    push ax
    
    mov bx, [bp + 6] ; controller
    mov ax, [bp + 4] ; segment

    cmp [byte ptr KeyStateTable + 23], 0
    je .skipUp

    push bx
    push ax
    push -100
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.skipUp:

    cmp [byte ptr KeyStateTable + 37], 0
    je .skipDown

    push bx
    push ax
    push 100
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.skipDown:

    pop ax
    pop bx
    pop bp
    ret 4
endp handleRightPlayer

proc handleLeftPlayer
    push bp
    mov bp, sp
    push bx
    push ax

    mov bx, [bp + 6] ; controller
    mov ax, [bp + 4] ; segment

    cmp [byte ptr KeyStateTable + 17], 0
    je .skipUp

    push bx
    push ax
    push -100
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.skipUp:

    cmp [byte ptr KeyStateTable + 31], 0
    je .skipDown

    push bx
    push ax
    push 100
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.skipDown:

    pop ax
    pop bx
    pop bp
    ret 4
endp handleLeftPlayer

; prints a controller's outline by a color
proc printControllerByColor
    push bp
    mov bp, sp
    push bx
    push ds

    mov ds, [bp + 6] ; segment

    push [bp + 8] ; controller
    push ds
    push RenderComponentId
    call getControllerComponent
    pop bx ; component
    pop ds ; component segment

    push [bp + 4] ; color
    push [bx + RenderComponentWidth]
    push [bx + RenderComponentHeight]

    push [bx + RenderComponentPositionX]
    push [bx + RenderComponentPositionY]
    call toPosition

    call printRectBySize
    
    pop ds
    pop bx
    pop bp
    ret 6
endp printControllerByColor

proc endGameIfCollide
    push bp
    mov bp, sp
    push ax
    
    push [bp + 10]
    push [bp + 8]
    push [bp + 6]
    push [bp + 4]
    call areControllersColliding
    pop ax
    pop ax
    pop ax

    cmp ax, 0
    je .end

    call endAndCleanUp
.end:
    pop ax
    pop bp
    ret 8
endp endGameIfCollide

proc printAllColors
    push bp
    mov bp, sp
    push ax
    push es
    push di
    mov ax, VIDEO_MEMORY
    mov es, ax
	mov di, 0
.printLoop:
    mov [es:di], di
    inc di
	cmp di, 256
    jne .printLoop
    pop di
    pop es
    pop ax
    pop bp
	ret
endp printAllColors

proc handleBallAcceleration

    push offset ballController
    push seg ballController
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call getControllerWordValue
    pop bx

    cmp bx, 0
    jl .skipPositive

    push offset ballController
    push seg ballController
    push 1
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call addControllerWordValue

    jmp .end

.skipPositive:

    push offset ballController
    push seg ballController
    push -1
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call addControllerWordValue

.end:

    ret
endp handleBallAcceleration

proc printPoint
    push bp
    mov bp, sp
    push ax
    push es
    push di

    mov ax, VIDEO_MEMORY
    mov es, ax ; write to the video memory

    mov di, [bp + 6] ; position
    mov ax, [bp + 4] ; color

    mov [byte ptr es:di], al

    pop di
    pop es
    pop ax
    pop bp
    ret 4
endp printPoint

proc isClicking
    push bp
    mov bp, sp
    push ax

    push [bp + 10] ; mouse controller
    push [bp + 8] ; mouse segment
    push MouseComponentId
    push MouseComponentLeftClicked
    call getControllerByteValue
    pop ax

    cmp al, 0
    je .end ; if did not click

    push [bp + 6] ; button controller
    push [bp + 4] ; button segment

    push [bp + 10] ; mouse controller
    push [bp + 8]  ; mouse segment
    call getControllerXandY

    call doesPointCollideController
    pop ax  ; result (1/0)

.end:
    mov [bp + 10], ax

    pop ax
    pop bp
    ret 6
endp isClicking

proc executeProcIfTrue
    push bp
    mov bp, sp
    push ds

    cmp [bp + 8], 0 ; if not true
    je .end

    mov ds, [bp + 4] ; proc segment
    call [bp + 6]    ; call the proc

.end:
    pop ds
    pop bp
    ret 6
endp executeProcIfTrue

proc allocateMemory
    push bp
    mov bp, sp
    push bx
    push ax
    push cx
    push dx
    push ds

    mov bx, [bp + 8] ; malloc manager
    mov ds, [bp + 6] ; segment
    mov ax, [bp + 4] ; bytes to allocate

    mov dx, [bx + MallocManagerSegment]
    mov cx, [bx + MallocManagerBytesLeft]
    add cx, [bx + MallocManagerBytesUsed] ; cx -> head

    mov [bp + 6], cx ; pointer
    mov [bp + 8], dx ; segment

    add [bx + MallocManagerBytesUsed], ax
    sub [bx + MallocManagerBytesLeft], ax

    pop ds
    pop dx
    pop cx
    pop ax
    pop bx
    pop bp
    ret 2
endp allocateMemory

proc print1
    push 1
    call printNumber
    ret
endp print1

proc uploadPointer
    push bp
    mov bp, sp
    push bx
    push ax
    push ds

    mov bx, [bp + 10] ; array offset
    mov ds, [bp + 8]  ; array segment

    mov ax, [bx + PointerArraySize]
    sal ax, 2

    inc [word ptr bx + PointerArraySize]
    add bx, ax

    add bx, PointerArrayData ; bx -> correct location

    mov ax, [bp + 6] ; pointer offset
    mov [bx + PointerOffset], ax

    mov ax, [bp + 4] ; pointer segment
    mov [bx + PointerSegment], ax

    pop ds
    pop ax
    pop bx
    pop bp
    ret 8
endp uploadPointer

proc sortCollisionLayerByDistance
    push bp
    mov bp, sp
    push bx
    push cx
    push ax
    push ds
    push si
    push di

    mov bx, [bp + 10] ; layer offset
    mov ds, [bp + 8]  ; layer segment

    mov cx, [bx + PointerArraySize]
    xor di, di

.sortLoop:
    cmp di, cx
    je .end

    push bx ; layer offset
    push ds ; layer segment
    push di        ; offset
    push [bp + 6]  ; controller offset
    push [bp + 4]  ; controller segment
    call getMinDistanceColliderIndex
    pop ax

    push bx ; layer offset
    push ds ; layer segment
    push ax ; min distance index
    push di ; current index
    call swapPointers

    inc di
    jmp .sortLoop
.end:

    pop di
    pop si
    pop ds
    pop ax
    pop cx
    pop bx
    pop bp
    ret 8
endp sortCollisionLayerByDistance

proc swapPointers
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push di
    push si
    push ds

    mov bx, [bp + 10] ; bx -> layer offset
    mov ds, [bp + 8]  ; ds -> layer segment
    mov ax, [bp + 6]  ; ax -> index1
    mov dx, [bp + 4]  ; dx -> index2

    add bx, PointerArrayData
    mov si, bx ; si -> start of data
    mov di, bx ; di -> start of data

    sal dx, 2
    add di, dx ; di -> absolute pointer1

    sal ax, 2
    add si, ax ; si -> absolute pointer2

    mov ax, [si + PointerOffset] ; swap offset
    mov bx, [di + PointerOffset]
    mov [si + PointerOffset], bx
    mov [di + PointerOffset], ax

    mov ax, [si + PointerSegment] ; swap segment
    mov bx, [di + PointerSegment]
    mov [si + PointerSegment], bx
    mov [di + PointerSegment], ax
    
    pop ds
    pop si
    pop di
    pop dx
    pop ax
    pop bx
    pop bp
    ret 8
endp swapPointers

proc getMinDistanceColliderIndex
    push bp
    mov bp, sp
    push cx
    push dx
    push ax
    push bx
    push si
    push ds
    push di

    mov bx, [bp + 12] ; bx -> layer offset
    mov ds, [bp + 10] ; ds -> layer segment

    mov di, [bx + PointerArraySize]  ; di -> size
    sub di, [bp + 8] ; di -> corrected size (size - offset)

    mov ax, [bp + 8]
    sal ax, 2
    add bx, ax
    add bx, PointerArrayData ; corrected data (data + offset)

    mov ax, 10000 ; ax -> min distance
    mov dx, -1    ; dx -> min index
    mov cx, 0     ; cx -> index

.colliderLoop:
    push [bx + PointerOffset]
    push [bx + PointerSegment]
    push [bp + 6]
    push [bp + 4]
    call getDistanceBetweenColliders
    pop si ; si -> distance

    cmp si, ax ; if current dist <= min dist
    jge .skip

    mov ax, si ; ax -> update min distance
    mov dx, cx ; dx -> update min index 
.skip:

    add bx, PointerSize
    inc cx

    cmp cx, di
    jnz .colliderLoop

    add dx, [bp + 8]
    mov [bp + 12], dx ; return min index

    pop di
    pop ds
    pop si
    pop bx
    pop ax
    pop dx
    pop cx
    pop bp
    ret 8
endp getMinDistanceColliderIndex

proc getDistanceBetweenColliders
    push bp
    mov bp, sp
    push di
    push si
    push cx
    push dx
    push bx
    push ax
    push ds
    push es

    push [bp + 10] ; si -> controller1 offset
    push [bp + 8]  ; ds -> controller1 segment
    push RenderComponentId
    call getControllerComponent
    pop si ; si -> component offset
    pop ds ; ds -> component segment
    
    push [bp + 6]  ; bx -> controller2 offset
    push [bp + 4]  ; es -> controller2 segment
    push RenderComponentId
    call getControllerComponent
    pop di ; bx -> component offset
    pop es ; es -> component segment

    mov ax, [si + RenderComponentPositionX]    ; ax -> left1
    mov cx, [es:di + RenderComponentPositionX] ; cx -> left2
    mov dx, ax
    add dx, [si + RenderComponentWidth]        ; dx -> right1
    mov bx, cx
    add bx, [es:di + RenderComponentWidth]     ; bx -> right2
    sub ax, bx ; ax -> left1 - right2
    sub cx, dx ; cx -> left2 - right1
    push ax
    push cx
    call getMax ; store dx in stack

    mov ax, [si + RenderComponentPositionY]    ; ax -> top1
    mov cx, [es:di + RenderComponentPositionY] ; cx -> top2
    mov dx, ax
    add dx, [si + RenderComponentHeight]        ; dx -> bottom1
    mov bx, cx
    add bx, [es:di + RenderComponentHeight]     ; bx -> bottom2
    sub ax, bx ; ax -> top1 - bottom2
    sub cx, dx ; cx -> top2 - bottom1
    push ax
    push cx
    call getMax
    
    pop bx ; bx -> dy
    pop ax ; ax -> dx

    push bx
    push 0
    call getMax
    pop bx ; bx -> corrected dy
    
    push ax
    push 0
    call getMax
    pop ax ; ax -> corrected dx

    push bx
    push 2
    call getPower
    pop bx ; bx -> dy^2

    push ax
    push 2
    call getPower
    pop ax ; ax -> dx^2
    
    add ax, bx ; ax -> dx^2 + dy^2

    push ax
    call getSquareRoot
    pop ax

    mov [bp + 10], ax ; return distance

    pop es
    pop ds
    pop ax
    pop bx
    pop dx
    pop cx
    pop si
    pop di
    pop bp
    ret 6
endp getDistanceBetweenColliders

; integer square root using binary search
; only works for up to 256~
; low = 0
; high = number
; while low <= high:
;     mid = (low + high) / 2
;     if mid * mid == number:
;         return mid
;     elif mid * mid < number:
;         low = mid + 1
;     else:
;         high = mid - 1
; return mid*mid
proc getSquareRoot
    push bp
    mov bp, sp
    push bx
    push cx
    push si
    push ax
    push dx
    push di

    mov di, [bp + 4] ; di -> number
    mov bx, di       ; bx -> high
    mov cx, 0        ; cx -> low

.squareLoop:
    cmp cx, bx ; while low < high
    jg .end

    mov si, cx
    add si, bx
    sar si, 1 ; si -> mid (low + height) / 2

    mov ax, si ; ax -> mid
    imul si    ; ax -> mid * mid

    cmp dx, 0
    jne .skipHeigh

    cmp ax, di ; if (mid * mid == number)
    je .end    ; return mid

    cmp ax, di ; if (mid * mid < number)
    jge .skipHeigh
    mov cx, si
    inc cx     ; cx -> low = mid + 1
    jmp .squareLoop
.skipHeigh:

    mov bx, si
    dec bx ; bx -> high = mid - 1
    jmp .squareLoop
.end:

    mov [bp + 4], si

    pop di
    pop dx
    pop ax
    pop si
    pop cx
    pop bx
    pop bp
    ret
endp getSquareRoot

proc getPower
    push bp
    mov bp, sp
    push ax
    push cx
    push dx
    push di

    mov ax, 1
    mov cx, [bp + 4] ; cx -> power

    cmp cx, 0 ; if power is 0, return 1
    je .end

    mov ax, [bp + 6] ; ax -> base
    mov di, ax       ; di -> base

    dec cx
.powerLoop:
    xor dx, dx
    imul di ; ax -> ax * di
    dec cx
    jnz .powerLoop

.end:
    mov [bp + 6], ax ; return the power

    pop di
    pop dx
    pop cx
    pop ax
    pop bp
    ret 2
endp getPower

; input - x1,y1,x2,y2
; distance = sqrt((x2-x1)^2 + (y2-y1)&2)
proc getDistanceBetweenPoints
    push bp
    mov bp, sp
    push ax
    push bx

    mov bx, [bp + 10] ; x1
    sub bx, [bp + 6]  ; bx -> dx (x1 - x2)
    mov ax, [bp + 8]  ; y1
    sub ax, [bp + 4]  ; ax -> dy (y1 - y2)

    push bx
    push 2
    call getPower
    pop bx ; bx -> dx^2
    
    push ax
    push 2
    call getPower
    pop ax ; ax -> dy^2

    add ax, bx ; ax -> dx^2 + dy^2
    push ax
    call getSquareRoot
    pop ax ; ax -> sqrt(dx^2 + dy^2)

    mov [bp + 10], ax ; return distance

    pop bx
    pop ax
    pop bp
    ret 6
endp getDistanceBetweenPoints

proc getFirstCollisionFromLayer
    push bp
    mov bp, sp
    push cx
    push si
    push ax
    push dx
    push di
    push ds
    push bx

    mov bx, [bp + 6] ; collision layer offset
    mov ds, [bp + 4] ; collision layer segment

    mov cx, [bx + PointerArraySize] ; collision layer size
    mov di, bx
    add di, PointerArrayData ; start of data (colliders)
.collisionLoop:
    push [bp + 10] ; controller offset
    push [bp + 8]  ; controller segment
    push [di + PointerOffset]    ; collider offset
    push [di  + PointerSegment]  ; collider segment
    call areControllersCollidingThisFrame
    pop dx ; x overlap
    pop si ; y overlap
    pop ax ; collision flag

    cmp ax, 1
    je .end ; if collided

    add di, PointerSize ; next collider

    dec cx
    cmp cx, 0
    jge .collisionLoop

.didntCollide:
    mov dx, 0
    mov si, 0
    mov ax, 0
.end:
    mov [bp + 6], dx  ; x overlap
    mov [bp + 8], si  ; y overlap
    mov [bp + 10], ax ; collision flag

    pop bx
    pop ds
    pop di
    pop dx
    pop ax
    pop si
    pop cx
    pop bp
    ret 2
endp getFirstCollisionFromLayer

proc updateAndApplyVelocityLayer
    push bp
    mov bp, sp
    push bx
    push cx
    push ds

    mov bx, [bp + 6] ; bx -> layer offset
    mov ds, [bp + 4] ; ds -> layer segment
    mov cx, [bx + PointerArraySize] ; cx -> size
    add bx, PointerArrayData        ; bx -> start of data

.updateAndApplyLoop:
    cmp cx, 0
    jz .end

    push [bx + PointerOffset]
    push [bx + PointerSegment]
    call updateAndApplyVelocity

    add bx, PointerSize
    dec cx
    jmp .updateAndApplyLoop
.end:

    pop ds
    pop cx
    pop bx
    pop bp
    ret 4
endp updateAndApplyVelocityLayer

proc updateAnimationLayer
    push bp
    mov bp, sp
    push bx
    push cx
    push ds
    push ax

    mov bx, [bp + 8] ; bx -> layer offset
    mov ds, [bp + 6] ; ds -> layer segment
    mov ax, [bp + 4] ; ax -> animation time
    mov cx, [bx + PointerArraySize] ; cx -> size
    add bx, PointerArrayData        ; bx -> start of data

.updateAndApplyLoop:
    cmp cx, 0
    jz .end

    push [bx + PointerOffset]
    push [bx + PointerSegment]
    push ax
    call updateAnimation

    add bx, PointerSize
    dec cx
    jmp .updateAndApplyLoop
.end:

    pop ax
    pop ds
    pop cx
    pop bx
    pop bp
    ret 6
endp updateAnimationLayer

proc clearPointerArray
    push bp
    mov bp, sp
    push bx
    push ds

    mov bx, [bp + 6] ; bx -> array offset
    mov ds, [bp + 4] ; ds -> array segment
    mov [bx + PointerArraySize], 0  ; reset size

    pop ds
    pop bx
    pop bp
    ret 4
endp clearPointerArray

proc getPointerValue
    push bp
    mov bp, sp
    push bx

    mov bx, [bp + 6] ; bx -> pointer offset
    mov ds, [bp + 4] ; ds -> pointer segment

    mov bx, [bx] ; bx -> value
    mov [bp + 6], bx

    pop bx
    pop bp
    ret 2
endp getPointerValue

proc printLabel
    push bp
    mov bp, sp
    push bx
    push ax
    push cx
    push di
    push si
    push dx
    push ds
    push es

    mov bx, [bp + 8] ; bx -> label offset
    mov ds, [bp + 6] ; ds -> label segment
    mov ax, [bp + 4] ; ax -> position
    mov cl, [bx + LabelSize] ; cx -> number of characters

    mov di, [bx + LabelFontOffset]  ; di -> font offset
    mov si, [bx + LabelFontSegment] ; si -> font segment
    add bx, LabelData               ; bx -> pointer to char array

.charLoop:
    xor dx, dx
    mov dl, [bx] ; di -> ascii char

    push bx ; store bx

    push di ; font offset
    push si ; font segment
    push dx ; ascii char
    call getCharFromFont
    pop es ; char image segment
    pop bx ; char image offset

    push bx ; char image offset
    push es ; char image segment
    push ax ; position
    call printImage
    
    add ax, [es:bx + ImageWidth] ; update the position

    pop bx ; restore bx

    inc bx
    dec cx
    jnz .charLoop

    pop es
    pop ds
    pop dx
    pop si
    pop di
    pop cx
    pop ax
    pop bx
    pop bp
    ret 6
endp printLabel

proc printCharFromFont
    push bp
    mov bp, sp
    push ax
    push bx
    push ds

    mov ax, [bp + 4]  ; position

    push [bp + 10] ; font offset
    push [bp + 8]  ; font segment
    push [bp + 6]  ; char ascii
    call getCharFromFont
    pop ds ; char image segment
    pop bx ; char image offset

    push bx
    push ds
    push ax
    call printImage

    add ax, [bx + ImageWidth]
    mov [bp + 10], ax ; return the new position

    pop ds
    pop bx
    pop ax
    pop bp
    ret 6
endp printCharFromFont

proc printNumberByFont
    push bp
    mov bp, sp
    push dx
    push ax
    push cx
    push si
    push bx
    push di

    mov ax, [bp + 6] ; number to print
    mov bx, [bp + 4] ; position

    mov si, 10
    mov cx, 0

    ; check if negative
    cmp ax, 0
    jge .saveLoop    ; if positive or zero, proceed normally

    ; if negative, print '-' and make number positive for correct ASCII
    xor dx, dx
    mov dx, '-'

    push [bp + 10]
    push [bp + 8]
    push dx
    push bx
    call printCharFromFont
    pop bx

    neg ax

.saveLoop:
    cwd
    idiv si  ; ax / 10 -> quotient in ax, remainder in dx

    add dl, '0'
    push dx      ; Store digit on stack
    inc cx       ; Count number of digits

    test ax, ax
    jnz .saveLoop

.printLoop:
    pop dx    ; get digit from stack

    push [bp + 10]
    push [bp + 8]
    push dx
    push bx
    call printCharFromFont
    pop bx

    dec cx
    jnz .printLoop
    
    pop di
    pop bx
    pop si
    pop cx
    pop ax
    pop dx
    pop bp
    ret 8
endp printNumberByFont

proc getCharFromFont
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push cx
    push ds
    push si

    mov bx, [bp + 8] ; bx -> font offset
    mov ds, [bp + 6] ; ds -> font segment
    mov al, [bp + 4] ; al -> ascii character to look for

    mov cx, [bx + FontSize] ; cx -> total chars in font
    mov dx, cx              ; dx -> original size
    add bx, FontData        ; bx -> pointer to ascii array

    xor si, si ; si -> index
.findChar:
    cmp [bx + si], al ; compare with target char
    jz .found

    inc si
    dec cx
    jnz .findChar
    mov si, 0 ; if not found return the first char
.found:
    ; calculate offset to char image pointer
    mov ax, si ; ax -> index
    shl ax, 2  ; ax -> index * 4
    add bx, dx ; bx -> pointer to char image array
    add bx, ax ; bx -> pointer to correct char
    
    mov ax, [bx + PointerSegment]
    mov [bp + 6], ax
    mov ax, [bx + PointerOffset]
    mov [bp + 8], ax

    pop si
    pop ds
    pop cx
    pop dx
    pop ax
    pop bx
    pop bp
    ret 2
endp getCharFromFont

proc isKeyPressed
    push bp
    mov bp, sp
    push ds
    push bx

    mov bx, [bp + 8] ; KeyStateTable offset
    mov ds, [bp + 6] ; KeyStateTable segment
    add bx, [bp + 4] ; key scan code

    mov bl, [bx]
    xor bh, bh
    mov [bp + 8], bx 

    pop bx
    pop ds
    pop bp
    ret 4
endp isKeyPressed

proc gameLoop

    push offset rightPlayerController
    push seg rightPlayerController
    call handleRightPlayer

    push offset leftPlayerController
    push seg leftPlayerController
    call handleLeftPlayer

    push offset physicsLayer
    push seg physicsLayer
    call updateAndApplyVelocityLayer
    
    push offset ballController
    push seg ballController
    push offset collisionLayer
    push seg collisionLayer
    call handleBounceCollisionLayer

    push offset renderLayer
    push seg renderLayer
    call printAllControllers

    push offset globalTime
    push seg globalTime
    call getPointerValue
    pop ax ; ax -> global time

    cmp ax, GAME_SPEED
    jnz .skip ; once per second

    call handleBallAcceleration
 .skip:

    call checkRestart
    ret
endp gameLoop

proc checkRestart

    push offset KeyStateTable
    push seg KeyStateTable
    push R_SCAN_CODE
    call isKeyPressed
    pop ax

    cmp ax, 0
    jz .skip

    call init

.skip:

    ret
endp checkRestart

proc init

    call clearScreen

    push offset palette
    push seg palette
    call setPalette

    push offset collisionLayer
    push seg collisionLayer
    call clearPointerArray

    push offset renderLayer
    push seg renderLayer
    call clearPointerArray

    push offset physicsLayer
    push seg physicsLayer
    call clearPointerArray
    
    push offset ballController
    push seg ballController
    push ScreenWidth / 2
    push ScreenHeight / 2
    push offset renderLayer
    push seg renderLayer
    call initAndUploadController

    push offset physicsLayer
    push seg physicsLayer
    push offset ballController
    push seg ballController
    call uploadPointer

    push offset ballController
    push seg ballController
    push subPixelAmount * 3
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call setControllerWordValue

    push offset ballController
    push seg ballController
    push subPixelAmount * 3
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue

    push offset collisionLayer
    push seg collisionLayer
    push offset downBorder
    push seg downBorder
    call uploadPointer

    push offset collisionLayer
    push seg collisionLayer
    push offset upBorder
    push seg upBorder
    call uploadPointer

    push offset collisionLayer
    push seg collisionLayer
    push offset leftPlayerController
    push seg leftPlayerController
    call uploadPointer

    push offset collisionLayer
    push seg collisionLayer
    push offset rightPlayerController
    push seg rightPlayerController
    call uploadPointer

    push offset physicsLayer
    push seg physicsLayer
    push offset leftPlayerController
    push seg leftPlayerController
    call uploadPointer

    push offset physicsLayer
    push seg physicsLayer
    push offset rightPlayerController
    push seg rightPlayerController
    call uploadPointer

    push offset downBorder
    push seg downBorder
    push 0
    push 199
    call setControllerXandY

    push offset upBorder
    push seg upBorder
    push 0
    push 0
    call setControllerXandY

    push offset rightPlayerController
    push seg rightPlayerController
    push 315
    push 80
    push offset renderLayer
    push seg renderLayer
    call initAndUploadController

    push offset leftPlayerController
    push seg leftPlayerController
    push 0
    push 80
    push offset renderLayer
    push seg renderLayer
    call initAndUploadController

    push offset startButton
    push seg startButton
    push ScreenWidth / 2
    push ScreenHeight / 2
    push offset renderLayer
    push seg renderLayer
    call initAndUploadController

    push offset physicsLayer
    push seg physicsLayer
    push offset startButton
    push seg startButton
    call uploadPointer

    ret
endp init

start:
    mov ax, @data
    mov ds, ax
    mov ax, 13h
    int 10h

    xor ax, ax
    xor dx, dx
    xor bx, bx
    xor si, si
    xor cx, cx
    xor di, di

    call init

; *******************INIT***************
; Note - here order is important, because they save their background here

; **************************************

    push offset oldKeyboardHandlerSegment
    push offset oldKeyboardHandlerOffset
    call setupKeyboardHandler

    push offset previousIRQMask
    call setUpClock

keepAliveLoop:
    jmp keepAliveLoop
exit:
    call endAndCleanUp
END start
