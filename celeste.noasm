IDEAL
MODEL small
STACK 100h

DATASEG

; *********************************IMAGES START********************************
palette db 4 dup(0),33,20,0,45,16,1,1,2,2,3,4,4,5,7,4,6,7,7,10,20,7,10,20,7,2,4,8,8,13,10,43,63,12,4,7,14,14,14,16,8,7,16,8,8,18,10,8,18,10,8,22,21,20,22,23,24,23,21,19,23,21,19,25,9,4,26,26,26,33,31,33,35,12,5
db 36,37,37,38,45,41,38,43,45,40,44,46,42,20,13,42,20,13,48,48,49,53,9,9,62,59,57,63,0,19,63,29,42,63,40,0,63,51,42,63,60,58,63,63,63

backgroundImage dw 128, 128
db 7 dup(39),21,39,39,92 dup(11),39,39,16 dup(0),39,39,6 dup(11),10 dup(39),23 dup(11),39,39,67 dup(11),39,39,16 dup(0),39,39,39,9 dup(11),6 dup(39),11,11,39,20 dup(11),39,39,11,11,39,59 dup(11),39,39
db 11,11,11,39,39,16 dup(0),39,39,39,10 dup(11),5 dup(39),50 dup(11),32,36 dup(11),39,39,11,11,11,39,39,16 dup(0),4 dup(39),10 dup(11),5 dup(39),48 dup(11),39,39,6 dup(11),39,39,6 dup(11),39,39
db 6 dup(11),39,39,6 dup(11),39,39,8 dup(11),39,39,39,16 dup(0),4 dup(39),7 dup(11),39,11,11,6 dup(39),22 dup(11),39,22 dup(11),6 dup(39),11,11,6 dup(39),11,11,6 dup(39),11,11,6 dup(39),11,11,6 dup(39)
db 5 dup(11),4 dup(39),16 dup(0),39,39,39,11 dup(11),10 dup(39),21 dup(11),39,18 dup(11),48 dup(39),16 dup(0),39,39,39,11 dup(11),39,39,21,7 dup(39),40 dup(11),47 dup(39),21,16 dup(0),39,39,14 dup(11)
db 7 dup(39),21,39,39,36 dup(11),39,39,7 dup(21),32,16 dup(0),16 dup(21),24 dup(0),39,39,14 dup(11),10 dup(39),36 dup(11),39,39,7 dup(21),17 dup(0),15 dup(21),25 dup(0),39,39,39,17 dup(11),6 dup(39)
db 11,11,39,28 dup(11),39,39,11,11,11,39,39,6 dup(21),18 dup(0),14 dup(21),26 dup(0),39,39,39,18 dup(11),5 dup(39),31 dup(11),39,39,11,11,11,39,39,5 dup(21),19 dup(0),13 dup(21),27 dup(0),4 dup(39)
db 18 dup(11),5 dup(39),8 dup(11),39,39,6 dup(11),39,39,6 dup(11),39,39,8 dup(11),39,39,39,4 dup(21),20 dup(0),12 dup(21),28 dup(0),4 dup(39),15 dup(11),39,11,11,6 dup(39),5 dup(11),6 dup(39),11,11
db 6 dup(39),11,11,6 dup(39),5 dup(11),4 dup(39),21,21,21,21 dup(0),11 dup(21),29 dup(0),39,39,39,19 dup(11),42 dup(39),21,21,22 dup(0),10 dup(21),30 dup(0),39,39,39,19 dup(11),39,39,21,38 dup(39),21,21
db 23 dup(0),9 dup(21),31 dup(0),39,39,22 dup(11),7 dup(39),21,21,6 dup(39),25 dup(21),24 dup(0),8 dup(21),32 dup(0),39,39,22 dup(11),16 dup(39),17 dup(21),0,6 dup(21),25 dup(0),7 dup(21),32 dup(0)
db 39,39,39,25 dup(11),7 dup(39),11,4 dup(39),21,21,4 dup(0),14 dup(21),0,0,21,21,26 dup(0),6 dup(21),32 dup(0),39,39,39,26 dup(11),5 dup(39),4 dup(11),39,39,21,21,4 dup(0),14 dup(21),0,0,21,21
db 27 dup(0),5 dup(21),32 dup(0),4 dup(39),26 dup(11),4 dup(39),4 dup(11),39,39,21,21,4 dup(0),18 dup(21),28 dup(0),4 dup(21),28 dup(0),2,0,0,0,4 dup(39),23 dup(11),39,11,11,5 dup(39),11,11,39,39,39
db 21,21,4 dup(0),12 dup(21),0,5 dup(21),29 dup(0),21,21,21,27 dup(0),2,0,39,0,0,39,39,39,27 dup(11),10 dup(39),24 dup(21),30 dup(0),21,21,25 dup(0),1,0,2,0,0,1,0,39,39,39,27 dup(11),39,39,21,6 dup(39)
db 25 dup(21),31 dup(0),21,25 dup(0),1,0,1,1,0,1,0,39,39,28 dup(11),39,39,32 dup(21),48 dup(0),21,6 dup(39),21,21,6 dup(39),21,39,39,28 dup(11),39,39,31 dup(21),49 dup(0),19 dup(39),22 dup(11),39,39
db 11,11,11,39,39,30 dup(21),48 dup(0),1,0,39,39,39,11,7 dup(39),11,7 dup(39),22 dup(11),39,39,11,11,11,39,39,29 dup(21),49 dup(0),2,0,39,39,4 dup(11),4 dup(39),4 dup(11),6 dup(39),7 dup(11),39,39
db 6 dup(11),39,39,8 dup(11),39,39,39,28 dup(21),49 dup(0),2,1,0,39,39,4 dup(11),4 dup(39),4 dup(11),6 dup(39),5 dup(11),6 dup(39),11,11,6 dup(39),5 dup(11),4 dup(39),27 dup(21),46 dup(0),1,0,0,0,2,0,0
db 39,39,39,11,11,6 dup(39),11,11,6 dup(39),5 dup(11),24 dup(39),26 dup(21),48 dup(0),2,0,2,1,0,0,19 dup(39),5 dup(11),23 dup(39),26 dup(21),49 dup(0),1,0,1,1,0,0,21,6 dup(39),21,21,6 dup(39),21,39,39
db 6 dup(11),7 dup(39),21,21,4 dup(39),21,21,39,39,39,21,4 dup(39),25 dup(21),7 dup(0),10 dup(21),31 dup(0),21,23 dup(39),8 dup(11),24 dup(39),21,0,21 dup(21),7 dup(0),12 dup(21),30 dup(0),24 dup(39)
db 12 dup(11),8 dup(39),11,11,4 dup(39),11,11,4 dup(39),4 dup(21),0,0,16 dup(21),7 dup(0),14 dup(21),29 dup(0),4 dup(39),11,11,11,9 dup(39),11,6 dup(39),14 dup(11),6 dup(39),10 dup(11),39,39,39
db 4 dup(21),0,0,15 dup(21),7 dup(0),16 dup(21),28 dup(0),39,39,39,5 dup(11),39,11,4 dup(39),5 dup(11),39,39,17 dup(11),4 dup(39),12 dup(11),39,39,20 dup(21),7 dup(0),18 dup(21),27 dup(0),39,39,39
db 7 dup(11),4 dup(39),11,39,19 dup(11),39,11,11,39,39,21,39,11,11,39,39,5 dup(11),39,11,11,39,21,21,21,0,16 dup(21),7 dup(0),20 dup(21),26 dup(0),4 dup(39),11,11,11,9 dup(39),22 dup(11),39,39,21,39,39
db 11,39,39,7 dup(11),39,39,19 dup(21),7 dup(0),22 dup(21),25 dup(0),16 dup(39),22 dup(11),5 dup(39),10 dup(11),39,39,39,17 dup(21),7 dup(0),24 dup(21),24 dup(0),21,15 dup(39),22 dup(11),5 dup(39)
db 10 dup(11),39,39,39,40 dup(21),48 dup(0),39,39,19 dup(11),39,39,39,21,39,39,10 dup(11),39,39,39,39 dup(21),49 dup(0),39,39,19 dup(11),39,39,39,21,39,11,11,39,4 dup(11),39,39,11,11,11,39,19 dup(21)
db 4 dup(0),16 dup(21),50 dup(0),39,39,11,11,39,15 dup(11),6 dup(39),7 dup(11),39,39,11,11,11,39,39,18 dup(21),4 dup(0),15 dup(21),51 dup(0),39,39,18 dup(11),7 dup(39),10 dup(11),39,39,39,18 dup(21)
db 4 dup(0),14 dup(21),52 dup(0),39,39,39,18 dup(11),7 dup(39),11,11,4 dup(39),11,11,4 dup(39),18 dup(21),4 dup(0),13 dup(21),53 dup(0),4 dup(39),17 dup(11),19 dup(39),34 dup(21),54 dup(0),8 dup(39)
db 14 dup(11),39,39,21,4 dup(39),21,4 dup(39),21,21,39,39,39,34 dup(21),55 dup(0),21,7 dup(39),16 dup(11),31 dup(39),17 dup(21),55 dup(0),9 dup(21),39,39,14 dup(11),32 dup(39),16 dup(21),54 dup(0)
db 10 dup(21),39,39,39,14 dup(11),6 dup(39),11,17 dup(39),11,11,11,4 dup(39),16 dup(21),53 dup(0),11 dup(21),39,39,39,16 dup(11),39,39,11,11,11,39,11,4 dup(39),11,32,39,11,4 dup(39),7 dup(11),39,39,39
db 16 dup(21),52 dup(0),12 dup(21),4 dup(39),22 dup(11),4 dup(39),11,39,11,11,4 dup(39),11,39,5 dup(11),39,39,39,16 dup(21),51 dup(0),13 dup(21),4 dup(39),20 dup(11),17 dup(39),11,11,11,4 dup(39)
db 16 dup(21),50 dup(0),14 dup(21),39,39,39,21 dup(11),24 dup(39),16 dup(21),49 dup(0),15 dup(21),39,39,39,21 dup(11),23 dup(39),17 dup(21),48 dup(0),16 dup(21),39,39,20 dup(11),39,39,32 dup(21)
db 56 dup(0),16 dup(21),39,39,20 dup(11),39,39,21,0,29 dup(21),57 dup(0),9 dup(21),0,6 dup(21),39,39,39,14 dup(11),39,39,11,11,11,39,39,4 dup(21),0,0,24 dup(21),58 dup(0),12 dup(21),0,0,21,21,39,39,39
db 14 dup(11),39,39,11,11,11,39,39,4 dup(21),0,0,23 dup(21),59 dup(0),12 dup(21),0,0,21,21,4 dup(39),17 dup(11),39,39,39,28 dup(21),60 dup(0),16 dup(21),4 dup(39),16 dup(11),4 dup(39),21,21,0,24 dup(21)
db 61 dup(0),10 dup(21),0,5 dup(21),39,39,39,13 dup(11),8 dup(39),26 dup(21),62 dup(0),16 dup(21),39,39,39,13 dup(11),7 dup(39),26 dup(21),63 dup(0),16 dup(21),39,39,12 dup(11),39,39,16 dup(0)
db 16 dup(21),39 dup(0),9 dup(21),7 dup(0),25 dup(21),39,39,11 dup(11),39,39,39,17 dup(0),15 dup(21),38 dup(0),10 dup(21),6 dup(0),26 dup(21),39,39,39,10 dup(11),39,39,39,18 dup(0),14 dup(21),37 dup(0)
db 11 dup(21),5 dup(0),27 dup(21),39,39,39,9 dup(11),4 dup(39),19 dup(0),13 dup(21),36 dup(0),12 dup(21),4 dup(0),28 dup(21),4 dup(39),8 dup(11),4 dup(39),20 dup(0),12 dup(21),35 dup(0),13 dup(21),0,0,0
db 29 dup(21),4 dup(39),9 dup(11),39,39,39,21 dup(0),11 dup(21),34 dup(0),14 dup(21),0,0,30 dup(21),39,39,39,10 dup(11),39,39,39,22 dup(0),10 dup(21),33 dup(0),15 dup(21),0,31 dup(21),39,39,39
db 11 dup(11),39,39,23 dup(0),9 dup(21),32 dup(0),48 dup(21),39,39,12 dup(11),39,39,24 dup(0),9 dup(21),31 dup(0),33 dup(21),15 dup(39),14 dup(11),39,39,24 dup(0),10 dup(21),30 dup(0),32 dup(21)
db 16 dup(39),9 dup(11),39,39,11,11,11,39,39,24 dup(0),11 dup(21),29 dup(0),10 dup(21),4 dup(0),18 dup(21),4 dup(39),11,11,11,39,11,6 dup(39),10 dup(11),39,39,11,11,11,39,39,24 dup(0),12 dup(21)
db 28 dup(0),10 dup(21),4 dup(0),18 dup(21),39,39,39,8 dup(11),39,39,16 dup(11),39,39,39,24 dup(0),24 dup(21),16 dup(0),10 dup(21),4 dup(0),18 dup(21),39,39,39,25 dup(11),4 dup(39),24 dup(0),24 dup(21)
db 16 dup(0),10 dup(21),4 dup(0),18 dup(21),4 dup(39),11,11,11,39,16 dup(11),8 dup(39),24 dup(0),24 dup(21),16 dup(0),32 dup(21),8 dup(39),16 dup(11),7 dup(39),21,24 dup(0),24 dup(21),16 dup(0)
db 33 dup(21),7 dup(39),16 dup(11),31 dup(0),25 dup(21),15 dup(0),41 dup(21),39,39,14 dup(11),30 dup(0),19 dup(21),0,6 dup(21),0,0,36,36,0,36,36,7 dup(0),27 dup(21),0,14 dup(21),39,39,39,13 dup(11)
db 29 dup(0),23 dup(21),0,0,21,21,0,0,5 dup(36),6 dup(0),31 dup(21),0,0,10 dup(21),39,39,39,13 dup(11),28 dup(0),24 dup(21),0,0,21,21,0,0,0,36,35,36,6 dup(0),32 dup(21),0,0,10 dup(21),4 dup(39)
db 12 dup(11),27 dup(0),29 dup(21),0,0,5 dup(36),4 dup(0),45 dup(21),4 dup(39),12 dup(11),26 dup(0),24 dup(21),0,5 dup(21),0,0,36,36,1,36,36,0,0,0,32 dup(21),0,13 dup(21),39,39,39,13 dup(11),25 dup(0)
db 31 dup(21),4 dup(0),2,4 dup(0),47 dup(21),39,39,39,13 dup(11),24 dup(0),32 dup(21),4 dup(0),2,0,0,0,48 dup(21),39,39,14 dup(11),24 dup(0),33 dup(21),14 dup(39),9 dup(21),16 dup(0),16 dup(21),39,39
db 14 dup(11),24 dup(0),9 dup(21),0,22 dup(21),16 dup(39),8 dup(21),17 dup(0),15 dup(21),39,39,39,13 dup(11),24 dup(0),12 dup(21),0,0,18 dup(21),4 dup(39),8 dup(11),4 dup(39),8 dup(21),18 dup(0)
db 14 dup(21),39,39,39,13 dup(11),24 dup(0),12 dup(21),0,0,18 dup(21),39,39,39,10 dup(11),39,39,39,8 dup(21),19 dup(0),13 dup(21),4 dup(39),12 dup(11),24 dup(0),32 dup(21),39,39,12 dup(11),39,39
db 8 dup(21),20 dup(0),12 dup(21),4 dup(39),12 dup(11),24 dup(0),10 dup(21),0,21 dup(21),39,39,11,11,39,39,5 dup(11),39,11,11,39,39,8 dup(21),21 dup(0),11 dup(21),39,39,39,13 dup(11),24 dup(0)
db 32 dup(21),39,39,11,11,39,39,8 dup(11),39,39,8 dup(21),22 dup(0),10 dup(21),39,39,39,13 dup(11),24 dup(0),32 dup(21),39,39,12 dup(11),39,39,8 dup(21),23 dup(0),9 dup(21),39,39,14 dup(11),23 dup(0)
db 21,21,15 dup(39),16 dup(21),39,39,12 dup(11),39,39,8 dup(21),32 dup(0),39,39,14 dup(11),22 dup(0),21,21,16 dup(39),8 dup(21),0,7 dup(21),39,39,12 dup(11),39,39,7 dup(21),33 dup(0),39,39,39,13 dup(11)
db 21 dup(0),21,21,21,4 dup(39),8 dup(11),4 dup(39),8 dup(21),0,0,6 dup(21),39,39,11,11,39,4 dup(11),39,39,11,11,11,39,39,6 dup(21),34 dup(0),39,39,39,13 dup(11),20 dup(0),4 dup(21),39,39,39,10 dup(11)
db 39,39,39,8 dup(21),0,0,0,5 dup(21),39,39,7 dup(11),39,39,11,11,11,39,39,5 dup(21),13 dup(0),39,0,0,0,39,0,0,0,39,0,0,0,39,0,0,0,39,0,0,0,39,0,4 dup(39),12 dup(11),19 dup(0),5 dup(21),39,39,12 dup(11)
db 39,39,8 dup(21),4 dup(0),4 dup(21),39,39,39,10 dup(11),39,32,39,4 dup(21),14 dup(0),39,0,0,0,39,0,0,0,39,0,0,0,39,0,0,0,39,0,0,0,39,0,4 dup(39),12 dup(11),18 dup(0),6 dup(21),39,39,11,11,39,39
db 5 dup(11),39,11,11,39,39,8 dup(21),5 dup(0),21,21,21,4 dup(39),8 dup(11),4 dup(39),21,21,21,14 dup(0),32,39,39,0,32,39,39,0,32,39,39,0,32,39,39,0,32,39,39,0,32,5 dup(39),13 dup(11),17 dup(0)
db 7 dup(21),39,39,11,11,39,39,8 dup(11),39,39,8 dup(21),6 dup(0),21,21,16 dup(39),21,21,14 dup(0),21,32,39,32,21,32,39,32,21,32,39,32,21,32,39,32,21,32,39,32,21,32,39,32,39,39,39,13 dup(11),16 dup(0)
db 8 dup(21),39,39,12 dup(11),39,39,8 dup(21),7 dup(0),21,21,14 dup(39),21,21,15 dup(0),21,32,32,32,21,32,32,32,21,32,32,32,21,32,32,32,21,32,32,32,21,32,32,32,39,39,14 dup(11),24 dup(39),14 dup(11)
db 39,39,8 dup(21),8 dup(0),21,14 dup(39),21,16 dup(0),21,23 dup(39),16 dup(11),24 dup(39),13 dup(11),39,39,39,7 dup(21),9 dup(0),16 dup(39),16 dup(0),24 dup(39),17 dup(11),6 dup(39),11,11,6 dup(39)
db 11,11,6 dup(39),14 dup(11),39,39,39,6 dup(21),10 dup(0),4 dup(39),8 dup(11),4 dup(39),16 dup(0),4 dup(39),5 dup(11),6 dup(39),11,11,6 dup(39),20 dup(11),39,39,6 dup(11),39,39,6 dup(11),39,39
db 15 dup(11),4 dup(39),5 dup(21),11 dup(0),39,39,39,10 dup(11),39,39,39,0,0,39,0,0,0,39,0,0,0,39,0,0,0,39,0,39,39,39,8 dup(11),39,39,6 dup(11),39,39,55 dup(11),4 dup(39),4 dup(21),12 dup(0),39,39
db 12 dup(11),39,39,0,0,39,0,0,0,39,0,0,0,39,0,0,0,39,0,39,39,75 dup(11),39,39,39,21,21,21,13 dup(0),39,39,11,11,39,39,5 dup(11),39,11,11,39,39,0,32,39,39,0,32,39,39,0,32,39,39,0,32,4 dup(39),11,11
db 39,39,71 dup(11),39,39,39,21,21,14 dup(0),39,39,11,11,39,39,8 dup(11),39,39,21,32,39,32,21,32,39,32,21,32,39,32,21,32,39,32,39,39,11,11,39,39,72 dup(11),39,39,21,15 dup(0),39,39,12 dup(11),39,39,21
db 32,32,32,21,32,32,32,21,32,32,32,21,32,32,32,39,39,76 dup(11),39,39,16 dup(0),39,39,14 dup(11),16 dup(39),49 dup(11),39,39,26 dup(11),39,39,39,16 dup(0),39,39,39,13 dup(11),16 dup(39),25 dup(11)
db 39,39,5 dup(11),39,16 dup(11),39,39,11,11,39,23 dup(11),39,39,39,16 dup(0),39,39,39,14 dup(11),6 dup(39),11,11,6 dup(39),26 dup(11),39,39,11,11,39,46 dup(11),4 dup(39),0,0,39,0,0,0,39,0,0,0,39,0,0,0
db 39,0,4 dup(39),15 dup(11),39,39,6 dup(11),39,39,79 dup(11),4 dup(39),0,0,39,0,0,0,39,0,0,0,39,0,0,0,39,0,4 dup(39),78 dup(11),39,26 dup(11),39,39,39,0,32,39,39,0,32,39,39,0,32,39,39,0,32,5 dup(39)
db 55 dup(11),39,26 dup(11),39,23 dup(11),39,39,39,21,32,39,32,21,32,39,32,21,32,39,32,21,32,39,32,39,39,39,58 dup(11),39,48 dup(11),39,39,21,32,32,32,21,32,32,32,21,32,32,32,21,32,32,32,39,39
db 110 dup(11),16 dup(39),112 dup(11),16 dup(39),113 dup(11),6 dup(39),11,11,6 dup(39),116 dup(11),39,39,6 dup(11),39,39,587 dup(11)

borderImage dw 128, 16
db 0,126 dup(39),0,39,4 dup(0),39,39,39,4 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39
db 5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),5 dup(39),0,11,11,39,39,39,4 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11)
db 39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39
db 5 dup(11),39,39,39,11,39,39,0,11,39,39,39,4 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39
db 5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,5 dup(11),39,39,39,11,11,39,39,0,39,39,39,4 dup(0),39,39,39,5 dup(0),39,39,39
db 5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39
db 5 dup(0),39,39,39,5 dup(0),39,39,39,0,0,0,5 dup(39),4 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39
db 5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,5 dup(0),39,39,39,4 dup(0),39,39,126 dup(0),39,39,126 dup(0),39,39,126 dup(0),39,39
db 126 dup(0),39,39,11 dup(0),11,7 dup(0),11,7 dup(0),11,7 dup(0),11,8 dup(0),11,7 dup(0),11,6 dup(0),11,7 dup(0),11,7 dup(0),11,7 dup(0),11,8 dup(0),11,7 dup(0),11,7 dup(0),11,7 dup(0),11,9 dup(0)
db 39,39,6 dup(0),11,11,7 dup(0),11,7 dup(0),11,7 dup(0),11,7 dup(0),11,11,7 dup(0),11,6 dup(0),11,7 dup(0),11,7 dup(0),11,7 dup(0),11,7 dup(0),11,11,7 dup(0),11,7 dup(0),11,7 dup(0),11,13 dup(0),39,39
db 6 dup(0),11,11,7 dup(0),11,7 dup(0),11,7 dup(0),11,7 dup(0),11,11,7 dup(0),11,6 dup(0),11,7 dup(0),11,7 dup(0),11,7 dup(0),11,7 dup(0),11,11,7 dup(0),11,7 dup(0),11,7 dup(0),11,9 dup(0),11,0,0,0
db 39,39,0,11,124 dup(0),39,39,126 dup(0),39,0,126 dup(39),0

boxImage1 dw 8, 8
db 31,6 dup(37),31,37,6 dup(8),37,37,6 dup(8),37,37,6 dup(8),37,37,6 dup(8),37,37,6 dup(8),37,37,6 dup(8),37,31,6 dup(37),31

boxImage2 dw 8, 8
db 31,6 dup(37),31,37,8,8,8,31,8,8,37,37,8,8,8,37,8,8,37,37,31,37,31,0,31,8,37,37,8,8,31,0,37,31,37,37,8,8,8,37,8,8,37,37,8,8,31,8,8,8,37,31,6 dup(37),31

boxImage3 dw 8, 8
db 31,37,37,37,0,37,31,31,37,8,8,31,0,37,8,37,31,37,31,0,0,31,8,37,6 dup(0),31,31,37,31,6 dup(0),37,8,31,0,0,31,31,37,37,8,31,0,31,8,8,37,31,31,0,0,31,37,37,31

cursorImage dw 10, 11
db 7 dup(40),-1,-1,-1,40,13,4 dup(0),13,40,-1,-1,40,5 dup(0),13,40,-1,-1,40,4 dup(0),40,40,26,-1,-1,40,4 dup(0),13,40,-1,-1,-1,40,0,0,40,13,0,13,40,-1,-1,40,13,13,40,40,13,0,13,40,-1,26,40,40,26,26,40
db 13,0,13,40,-1,26,26,-1,-1,26,40,13,0,40,6 dup(-1),26,40,40,26,7 dup(-1),26,26,-1

playerIdle dw 8, 8
db 9 dup(-1),5 dup(35),-1,-1,7 dup(35),-1,35,35,4 dup(38),35,-1,35,38,8,38,38,8,35,-1,-1,5 dup(38),-1,-1,-1,4 dup(1),4 dup(-1),39,-1,-1,39,-1,-1,-1

playerImage dw 16, 16
db 68 dup(-1),7 dup(35),8 dup(-1),9 dup(35),7 dup(-1),4 dup(35),4 dup(38),35,7 dup(-1),35,35,35,38,8,38,38,8,35,8 dup(-1),35,35,5 dup(38),10 dup(-1),35,4 dup(1),12 dup(-1),39,-1,-1,39,86 dup(-1)

playerRun1 dw 8, 8
db 9 dup(-1),5 dup(35),-1,-1,7 dup(35),-1,35,35,4 dup(38),35,-1,35,38,8,38,38,8,35,-1,-1,5 dup(38),-1,-1,-1,4 dup(1),4 dup(-1),39,-1,-1,-1,39,-1,-1

playerRun2 dw 8, 8
db 9 dup(-1),5 dup(35),-1,-1,7 dup(35),-1,35,35,4 dup(38),35,-1,35,38,8,38,38,8,35,-1,-1,5 dup(38),-1,-1,39,4 dup(1),7 dup(-1),39,-1,-1,-1

screenImageWrapper db SegmentWrapperId
dw seg screenImageOriginal, offset screenImageOriginal

segment imagesSegment1

screenImageOriginal dw 320, 200
db 47 dup(3),8 dup(4),8 dup(3),43 dup(4),65 dup(6),4,4,65 dup(6),10 dup(4),6,6,6,4 dup(4),6,17 dup(4),6,6,6,18 dup(4),72 dup(3),7 dup(4),7 dup(3),44 dup(4),67 dup(6),4,3,66 dup(6),10 dup(4),6,6,6,4,4,4
db 6,6,17 dup(4),6,6,6,18 dup(4),70 dup(3),5 dup(4),7 dup(3),43 dup(4),71 dup(6),3,3,67 dup(6),9 dup(4),6,6,6,4 dup(4),6,6,17 dup(4),6,6,6,19 dup(4),66 dup(3),6 dup(4),5 dup(3),31 dup(4),6,4,4,4 dup(6)
db 5 dup(4),74 dup(6),3,3,4,67 dup(6),8 dup(4),6,6,6,5 dup(4),6,6,18 dup(4),6,20 dup(4),64 dup(3),6 dup(4),5 dup(3),30 dup(4),6,6,4,4,84 dup(6),3,3,4,68 dup(6),7 dup(4),6,6,6,6 dup(4),6,6,39 dup(4)
db 63 dup(3),6 dup(4),5 dup(3),30 dup(4),6,6,4,4,84 dup(6),3,3,4,68 dup(6),7 dup(4),6,6,6,6 dup(4),6,6,39 dup(4),62 dup(3),5 dup(4),5 dup(3),32 dup(4),6,4,4,85 dup(6),3,3,4,69 dup(6),6 dup(4),6,6
db 8 dup(4),6,6,9 dup(4),6,6,29 dup(4),59 dup(3),5 dup(4),4 dup(3),65 dup(4),11 dup(3),43 dup(4),9 dup(3),19 dup(4),12 dup(3),63 dup(4),6,6,6,28 dup(4),57 dup(3),5 dup(4),3,3,3,68 dup(4),13 dup(3)
db 41 dup(4),6 dup(3),25 dup(4),6 dup(3),66 dup(4),4 dup(6),27 dup(4),55 dup(3),5 dup(4),3,3,3,5 dup(4),6,6,28 dup(4),37 dup(6),4,3,3,4,78 dup(6),3,3,3,54 dup(6),6 dup(4),6 dup(6),4,4,4,5 dup(6)
db 8 dup(4),6,6,17 dup(4),53 dup(3),6 dup(4),3,3,4 dup(4),6,6,6,5 dup(4),6,15 dup(4),6,6,6,4 dup(4),38 dup(6),4,3,3,4,78 dup(6),4,3,3,56 dup(6),5 dup(4),6 dup(6),4,4,6 dup(6),8 dup(4),6,6,18 dup(4)
db 49 dup(3),7 dup(4),3,3,4 dup(4),6,6,6,5 dup(4),6,14 dup(4),4 dup(6),4,4,4,39 dup(6),4,4,3,3,4,78 dup(6),4,3,4,57 dup(6),5 dup(4),5 dup(6),4,4,4,6 dup(6),8 dup(4),6,6,9 dup(4),3,3,7 dup(4),4 dup(3),4
db 42 dup(3),7 dup(4),3,3,4 dup(4),6,6,6,4,4,3,4,4,6,6 dup(4),6,7 dup(4),4 dup(6),4,4,4,40 dup(6),4,4,4,3,4,77 dup(6),4 dup(4),59 dup(6),4,4,4,5 dup(6),5 dup(4),4 dup(6),20 dup(4),3,3,3,6 dup(4)
db 4 dup(3),4,4,39 dup(3),13 dup(4),6,6,6,4,4,3,3,4,6,5 dup(4),6,6,7 dup(4),4 dup(6),4,4,42 dup(6),4,4,3,4,4,77 dup(6),4 dup(4),60 dup(6),4,4,4,4 dup(6),6 dup(4),6,6,6,21 dup(4),3,3,3,6 dup(4),3,3,3
db 4 dup(4),35 dup(3),15 dup(4),6,6,4,4,3,3,4,6,5 dup(4),6,6,6,6 dup(4),5 dup(6),4,43 dup(6),4,4,4,3,4,77 dup(6),4 dup(4),61 dup(6),4,4,4 dup(6),6 dup(4),4 dup(6),11 dup(4),6,6,8 dup(4),3,3,3,6 dup(4)
db 3,3,5 dup(4),34 dup(3),15 dup(4),6,6,4,4,3,3,4,6,5 dup(4),6,6,6,6 dup(4),5 dup(6),4,43 dup(6),4,4,4,3,4,77 dup(6),4 dup(4),61 dup(6),4,4,4 dup(6),6 dup(4),4 dup(6),11 dup(4),6,6,8 dup(4),3,3,3
db 6 dup(4),3,3,5 dup(4),33 dup(3),15 dup(4),6,6,4,4,4,3,8 dup(4),6,6,5 dup(4),50 dup(6),6 dup(4),77 dup(6),4 dup(4),62 dup(6),4,4,6,6,6,7 dup(4),6,6,6,12 dup(4),6,6,8 dup(4),3,3,3,6 dup(4),3,3,5 dup(4)
db 31 dup(3),15 dup(4),6,6,19 dup(4),14 dup(6),162 dup(0),25 dup(6),4,6,6,6,8 dup(4),6,6,23 dup(4),3,3,3,5 dup(4),3,3,6 dup(4),29 dup(3),29 dup(4),6,6 dup(4),14 dup(6),0,28,32,32,159 dup(28),0,25 dup(6)
db 4,6,6,8 dup(4),6,6,23 dup(4),4 dup(3),5 dup(4),3,6 dup(4),22 dup(3),4,5 dup(3),25 dup(4),6,4,4,4,6,6,5 dup(4),14 dup(6),0,28,32,32,161 dup(28),0,24 dup(6),4,6,6,9 dup(4),6,23 dup(4),4 dup(3),5 dup(4)
db 3,3,6 dup(4),20 dup(3),4,5 dup(3),13 dup(4),6,11 dup(4),6,4,4,4,6,6,6,4 dup(4),15 dup(6),0,32,32,162 dup(28),0,25 dup(6),4,6,14 dup(4),6,6,7 dup(4),6,10 dup(4),4 dup(3),5 dup(4),3,6 dup(4),19 dup(3)
db 4,4,4 dup(3),6 dup(4),3,3,5 dup(4),6,6,10 dup(4),6,6,4,4,4,6,6,4 dup(4),16 dup(6),0,32,163 dup(28),0,25 dup(6),4,6,16 dup(4),6,6,6,4 dup(4),6,6,10 dup(4),3,3,3,5 dup(4),3,3,5 dup(4),19 dup(3),4,4
db 4 dup(3),5 dup(4),3,3,3,4 dup(4),6,6,9 dup(4),6,6,6,4,4,4,6,6,6,4,4,4,17 dup(6),0,164 dup(28),0,27 dup(6),17 dup(4),4 dup(6),4,4,4,6,6,10 dup(4),3,3,3,5 dup(4),3,5 dup(4),18 dup(3),4,4,4,3,3,3
db 5 dup(4),3,3,3,16 dup(4),6,6,4,4,4,6,6,6,4,4,4,18 dup(6),0,164 dup(28),0,27 dup(6),17 dup(4),5 dup(6),4,4,4,6,6,6,8 dup(4),4 dup(3),10 dup(4),17 dup(3),4 dup(4),3,3,5 dup(4),3,3,17 dup(4),6,6,4,4,4
db 4 dup(6),4,4,19 dup(6),0,12 dup(28),24,138 dup(18),24,12 dup(28),0,27 dup(6),4,4,4,6,13 dup(4),6 dup(6),4,4,4,6,6,6,8 dup(4),3,3,3,10 dup(4),17 dup(3),4 dup(4),3,3,5 dup(4),3,3,17 dup(4),6,6,4,4,4
db 4 dup(6),4,4,19 dup(6),0,12 dup(28),24,138 dup(18),24,12 dup(28),0,27 dup(6),4,4,4,6,13 dup(4),6 dup(6),4,4,4,6,6,6,8 dup(4),3,3,3,10 dup(4),16 dup(3),5 dup(4),3,6 dup(4),3,17 dup(4),6,6,6,4,4,4
db 6,6,6,4,4,20 dup(6),0,11 dup(28),142 dup(0),11 dup(28),0,27 dup(6),4,4,4,6,6,6,12 dup(4),5 dup(6),4,4,4,4 dup(6),8 dup(4),3,3,10 dup(4),16 dup(3),30 dup(4),6,6,4,4,4,4 dup(6),4,21 dup(6),0,10 dup(28)
db 24,142 dup(0),24,10 dup(28),0,27 dup(6),4,4,4,4 dup(6),11 dup(4),6 dup(6),4,4,4,4 dup(6),7 dup(4),3,3,3,9 dup(4),15 dup(3),30 dup(4),6,6,4,4,4,27 dup(6),0,10 dup(28),24,142 dup(0),24,10 dup(28),0
db 27 dup(6),4,4,4,5 dup(6),6 dup(4),6,4,4,4,7 dup(6),4,4,4,6,6,6,8 dup(4),3,3,9 dup(4),15 dup(3),29 dup(4),6,6,4,4,4,28 dup(6),0,10 dup(28),24,7 dup(0),128 dup(-1),7 dup(0),24,10 dup(28),0,27 dup(6)
db 4,4,4,5 dup(6),6 dup(4),6,6,4,4,4,6 dup(6),4,4,4,4 dup(6),7 dup(4),3,3,9 dup(4),14 dup(3),29 dup(4),6,6,4,4,4,29 dup(6),0,10 dup(28),24,7 dup(0),128 dup(-1),7 dup(0),24,10 dup(28),0,27 dup(6),4,4,4
db 6 dup(6),6 dup(4),6,6,4,4,6,6,4,4 dup(6),4,4,4,4 dup(6),7 dup(4),3,4 dup(4),3,4 dup(4),14 dup(3),29 dup(4),6,4,4,4,4 dup(6),4,4,4,23 dup(6),0,9 dup(28),32,24,7 dup(0),128 dup(-1),7 dup(0),24,32
db 9 dup(28),0,27 dup(6),4,4,4,7 dup(6),5 dup(4),6,6,4,4,4,6,4,4,4 dup(6),4,4,4 dup(6),12 dup(4),3,3,3,4,4,13 dup(3),29 dup(4),6,4,4,4,4 dup(6),4,4,4,24 dup(6),0,7 dup(28),32,28,24,24,7 dup(0)
db 128 dup(-1),7 dup(0),24,24,28,32,7 dup(28),0,27 dup(6),4,4,4,8 dup(6),5 dup(4),6,6,6 dup(4),4 dup(6),4,4,6,6,6,13 dup(4),3,3,3,4,13 dup(3),4 dup(4),3,3,8 dup(4),3,17 dup(4),4 dup(6),4,4,4,25 dup(6),0
db 5 dup(28),32,28,24,24,28,28,7 dup(0),128 dup(-1),7 dup(0),24,28,24,24,28,32,5 dup(28),0,27 dup(6),4,4,4,8 dup(6),5 dup(4),6,6,7 dup(4),6,6,6,4,4,6,6,6,13 dup(4),17 dup(3),4,5 dup(3),6 dup(4),3,3
db 17 dup(4),4 dup(6),4,4,4,26 dup(6),0,28,28,28,32,28,24,24,28,28,24,24,7 dup(0),128 dup(-1),7 dup(0),24,24,28,28,24,24,28,32,28,28,28,0,27 dup(6),3,4,4,4,8 dup(6),4 dup(4),6,6,8 dup(4),6,6,6,4,6,6,6
db 14 dup(4),16 dup(3),4,5 dup(3),6 dup(4),3,3,17 dup(4),4 dup(6),4,4,4,26 dup(6),0,28,28,28,32,28,24,24,28,28,24,24,7 dup(0),128 dup(-1),7 dup(0),24,24,28,28,24,24,28,32,28,28,28,0,27 dup(6),3,4,4,4
db 8 dup(6),4 dup(4),6,6,8 dup(4),6,6,6,4,6,6,6,14 dup(4),21 dup(3),5 dup(4),3,3,3,17 dup(4),5 dup(6),4,4,27 dup(6),0,28,32,28,24,24,28,28,4 dup(24),7 dup(0),128 dup(-1),7 dup(0),4 dup(24),28,28,24,24
db 28,32,28,0,27 dup(6),3,4,4,4,8 dup(6),5 dup(4),6,9 dup(4),7 dup(6),13 dup(4),21 dup(3),4,4,4,4 dup(3),9 dup(4),6,7 dup(4),6 dup(6),4,28 dup(6),0,24,24,24,28,28,6 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 6 dup(24),28,28,24,24,24,0,27 dup(6),3,4 dup(4),8 dup(6),14 dup(4),7 dup(6),14 dup(4),19 dup(3),4,4,4,4 dup(3),9 dup(4),6,6,6 dup(4),36 dup(6),0,24,28,28,8 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 8 dup(24),28,28,24,0,27 dup(6),3,3,4 dup(4),8 dup(6),4,4,4,6,10 dup(4),6 dup(6),4,4,4,6,10 dup(4),18 dup(3),4,6 dup(3),9 dup(4),6,6,6 dup(4),37 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 11 dup(24),0,27 dup(6),3,3,4 dup(4),8 dup(6),4,4,4,6,6,10 dup(4),5 dup(6),4,4,4,6,6,10 dup(4),23 dup(3),9 dup(4),6,6,7 dup(4),37 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0
db 27 dup(6),3,3,5 dup(4),8 dup(6),4,4,4,6,6,4 dup(4),6,5 dup(4),4 dup(6),4,4,4,6,6,6,9 dup(4),22 dup(3),23 dup(4),17 dup(3),16 dup(4),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,26 dup(6),4
db 3,3,4,6,4,4,4,8 dup(6),4,4,4,6,6,6,4 dup(4),6,5 dup(4),6,6,6,4,4,4,6,6,6,10 dup(4),8 dup(3),4,11 dup(3),27 dup(4),17 dup(3),13 dup(4),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,26 dup(6)
db 4,3,3,4,6,6,4,4,4,8 dup(6),4,4,4 dup(6),4,4,4,6,6,4 dup(4),6,6,6,4,4,4,4 dup(6),9 dup(4),7 dup(3),4,4,10 dup(3),8 dup(4),6,4,4,4,6,7 dup(4),12 dup(6),4,3,3,3,4,21 dup(6),0,11 dup(24),7 dup(0)
db 128 dup(-1),7 dup(0),11 dup(24),0,25 dup(6),4,4,3,3,4,6,6,4,4,4,8 dup(6),4,4,5 dup(6),4,4,4,6,5 dup(4),6,6,6,4,4,4,6,6,6,9 dup(4),7 dup(3),4,4,10 dup(3),8 dup(4),6,4,4,4,6,7 dup(4),12 dup(6),4,3,3,3
db 4,21 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,25 dup(6),4,4,3,3,4,6,6,4,4,4,8 dup(6),4,4,5 dup(6),4,4,4,6,5 dup(4),6,6,6,4,4,4,6,6,6,9 dup(4),7 dup(3),4,10 dup(3),8 dup(4),6
db 4,4,4,6,6,6 dup(4),13 dup(6),4,3,3,3,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,17 dup(4),12 dup(3),4,6,6,6,4,4,9 dup(6),4,6 dup(6),4,4,6,6,4 dup(4),6,6,6,4,4,4,4 dup(6)
db 8 dup(4),6 dup(3),4,4,9 dup(3),8 dup(4),6,6,4,4,4,6,7 dup(4),13 dup(6),4,3,3,3,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,16 dup(4),12 dup(3),4,4,4 dup(6),4,4,8 dup(6),4
db 7 dup(6),4,4,6,6,4,4,4,6,6,6,4,4,4,4 dup(6),4,4,4,6,4 dup(4),5 dup(3),4,4,4,8 dup(3),8 dup(4),6,6,4,4,4,6,7 dup(4),14 dup(6),4,3,3,3,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0
db 26 dup(6),4 dup(4),4 dup(6),4,4,20 dup(6),4 dup(4),6,6,4,4,4,4 dup(6),4 dup(4),6,4,4,4,4 dup(3),4 dup(4),3,3,4,4 dup(3),9 dup(4),6,6,4,4,4,6,7 dup(4),14 dup(6),4,3,3,3,22 dup(6),0,11 dup(24),7 dup(0)
db 128 dup(-1),7 dup(0),11 dup(24),0,27 dup(6),4,4,4,5 dup(6),4,21 dup(6),4,4,4,6,6,6,4,4,4,6,6,6,4 dup(4),6,6,4,4,4 dup(3),4,4,4,3,3,4,4,3,3,3,9 dup(4),6,6,4,4,4,6,4,4,4,6,6,4,4,16 dup(6),3,3,3
db 22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,27 dup(6),4,4,4,5 dup(6),4,14 dup(6),4,4,6 dup(6),4,4,6,6,6,4,4,4,6,6,6,4 dup(4),6,6,4,4,3,3,3,4 dup(4),3,4,4,3,3,3,9 dup(4),6,6,6
db 6 dup(4),6,6,6,4,17 dup(6),3,3,3,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,27 dup(6),4,4,4,21 dup(6),4,4,4,4 dup(6),4,4,6,6,6,4,4,4,6,6,6,5 dup(4),6,6,4,3,3,8 dup(4),3,3,3
db 9 dup(4),6,6,6 dup(4),4 dup(6),4,17 dup(6),4,3,3,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,22 dup(6),4,4,4,4 dup(6),4,6,6,6,4,4,4,6,6,6,5 dup(4),6,6,4,3,3
db 8 dup(4),3,3,10 dup(4),6,6,5 dup(4),23 dup(6),4,4,3,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,23 dup(6),4,4,4,6,6,6,4,6,6,4 dup(4),6,6,6,4,4,6,4,4,4,6,4,3,3
db 7 dup(4),3,3,3,9 dup(4),6,6,6 dup(4),23 dup(6),4,4,3,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,23 dup(6),4 dup(4),5 dup(6),5 dup(4),6,6,4,4,6,4,4,4,6,6,3,3
db 7 dup(4),3,3,3,9 dup(4),6,6,6 dup(4),23 dup(6),4,4,3,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,23 dup(6),4 dup(4),5 dup(6),5 dup(4),6,6,4,4,6,4,4,4,6,6,3
db 8 dup(4),3,3,10 dup(4),6,6,5 dup(4),24 dup(6),4,4,4,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,24 dup(6),4 dup(4),4 dup(6),5 dup(4),6,6,4,4,6,6,4,4,4,6,3,8 dup(4)
db 3,3,10 dup(4),6,5 dup(4),26 dup(6),4,4,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,25 dup(6),4 dup(4),6,6,6,5 dup(4),6,6,4,4,6,6,4,4,4,6,3,8 dup(4),3,11 dup(4),6
db 4 dup(4),27 dup(6),4,4,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,25 dup(6),5 dup(4),6,6,6 dup(4),6,4,4,6,6,6,29 dup(4),27 dup(6),4,4,22 dup(6),0,11 dup(24)
db 7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,26 dup(6),12 dup(4),6,4,4,6,6,6,28 dup(4),28 dup(6),4,4,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4
db 26 dup(6),12 dup(4),6,4,4,6,6,6,27 dup(4),29 dup(6),4,4,22 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,27 dup(6),14 dup(4),6,6,6,27 dup(4),29 dup(6),4,4,4,21 dup(6),0
db 11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,27 dup(6),14 dup(4),4 dup(6),14 dup(4),3,3,9 dup(4),30 dup(6),4,4,4,21 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24)
db 0,28 dup(6),4,4,28 dup(6),13 dup(4),4 dup(6),13 dup(4),3,3,9 dup(4),31 dup(6),4,4,4,21 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,28 dup(6),13 dup(4),5 dup(6)
db 12 dup(4),3,3,9 dup(4),31 dup(6),4,4,4,21 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,28 dup(6),13 dup(4),5 dup(6),11 dup(4),3,3,3,9 dup(4),31 dup(6),4,4,4,21 dup(6)
db 0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,29 dup(6),12 dup(4),5 dup(6),10 dup(4),3,3,3,9 dup(4),32 dup(6),3,4,4,21 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 11 dup(24),0,28 dup(6),4,4,29 dup(6),12 dup(4),5 dup(6),9 dup(4),3,3,3,10 dup(4),32 dup(6),3,3,4,21 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,30 dup(6),12 dup(4)
db 5 dup(6),7 dup(4),3,3,3,11 dup(4),32 dup(6),3,3,4,4,20 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,31 dup(6),23 dup(4),3,3,3,10 dup(4),33 dup(6),3,3,4,4,20 dup(6),0
db 11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,32 dup(6),22 dup(4),3,3,11 dup(4),33 dup(6),3,3,4,4,20 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4
db 33 dup(6),20 dup(4),3,3,12 dup(4),33 dup(6),3,3,4,4,20 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,34 dup(6),19 dup(4),3,3,11 dup(4),34 dup(6),3,3,4,4,20 dup(6),0
db 11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,18 dup(6),4,15 dup(6),7 dup(4),6,11 dup(4),3,3,11 dup(4),33 dup(6),4,3,3,4,4,4,19 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 11 dup(24),0,28 dup(6),4,4,19 dup(6),4,4,15 dup(6),5 dup(4),6,11 dup(4),3,3,11 dup(4),33 dup(6),4,3,3,4,4,4,19 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,19 dup(6)
db 4,4,15 dup(6),5 dup(4),6,10 dup(4),3,3,9 dup(4),7 dup(3),25 dup(4),12 dup(3),7 dup(4),10 dup(3),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,20 dup(6),4 dup(4),6,6,6,4
db 8 dup(6),5 dup(4),6,6,9 dup(4),3,3,6 dup(4),11 dup(3),23 dup(4),14 dup(3),8 dup(4),8 dup(3),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,21 dup(6),4 dup(4),6,6,6,4,4,7 dup(6)
db 4 dup(4),6,6,9 dup(4),3,3,12 dup(4),3,3,4,49 dup(6),4,3,3,4,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,22 dup(6),4 dup(4),6,6,6,4,4,6,6,4,4,6,6,4 dup(4),6,6,6,8 dup(4)
db 3,12 dup(4),6,3,3,51 dup(6),3,3,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,23 dup(6),4 dup(4),6,6,4,4,6,6,4,4,4,6,6,4,4,4,6,6,6,8 dup(4),3,12 dup(4),6,3,3,51 dup(6)
db 3,3,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,23 dup(6),5 dup(4),6,6,4,4,6,6,4,4,4,6,4 dup(4),6,6,8 dup(4),3,12 dup(4),6,3,3,51 dup(6),3,3,6,6,6,0,11 dup(24)
db 7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,3,23 dup(6),6 dup(4),6,4,4,4,6,4,4,4,6,4 dup(4),6,6,6,19 dup(4),6,6,3,3,51 dup(6),3,3,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 11 dup(24),0,28 dup(6),4,3,24 dup(6),14 dup(4),6,4,4,4,6,6,6,19 dup(4),6,6,3,3,51 dup(6),3,3,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),3,3,25 dup(6),17 dup(4),6,6,6
db 15 dup(4),6,4,4,4,6,6,3,3,51 dup(6),3,3,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),3,3,25 dup(6),18 dup(4),6,6,15 dup(4),6,4,4,4,6,6,3,3,51 dup(6),3,3,6,6,6,0,11 dup(24)
db 7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),3,3,25 dup(6),18 dup(4),6,6,15 dup(4),6,4,4,4,6,6,3,4,51 dup(6),3,3,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),3,3
db 26 dup(6),17 dup(4),6,6,18 dup(4),6,6,6,4,4,51 dup(6),3,3,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),3,3,4,26 dup(6),16 dup(4),6,6,18 dup(4),6,6,6,4,4,51 dup(6),3,3,6,6,6
db 0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),10 dup(3),35 dup(4),6,6,14 dup(4),6,4,4,4,6,6,6,4,4,51 dup(6),3,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0
db 28 dup(6),9 dup(3),37 dup(4),6,6,13 dup(4),6,4,4,4,6,6,6,4,4,51 dup(6),3,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),3,3,4,31 dup(6),12 dup(4),6,6,16 dup(4),4 dup(6),4,4
db 51 dup(6),3,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),3,3,24 dup(6),4,4,4,6 dup(6),11 dup(4),6,6,12 dup(4),6,4,4,4,4 dup(6),4,4,51 dup(6),3,4,6,6,6,0,11 dup(24)
db 7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),3,3,25 dup(6),4,4,4,6 dup(6),10 dup(4),6,6,12 dup(4),6,4,4,4,4 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 11 dup(24),0,28 dup(6),3,3,27 dup(6),4,4,6 dup(6),6 dup(4),6,4,4,4,6,12 dup(4),6,4,4,4,4 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),3,3,28 dup(6)
db 4,7 dup(6),5 dup(4),6,4,4,4,6,12 dup(4),6,4,4,4,4 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),3,3,28 dup(6),4,7 dup(6),5 dup(4),6,4,4,4,6
db 11 dup(4),6,4,4,4,5 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,3,32 dup(6),4,4 dup(6),4 dup(4),6,4,4,4,6,6,10 dup(4),6,4,4,4,5 dup(6),4,4
db 51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,32 dup(6),4,4,6,6,6,4 dup(4),6,4,4,4,6,6,10 dup(4),6,4,4,4,5 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24)
db 7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,33 dup(6),4,4,6,6,6,4,4,4,6,6,4,4,4,6,9 dup(4),6,6,4,4,4,5 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 11 dup(24),0,28 dup(6),4,4,33 dup(6),4,4,4 dup(6),4,4,6,6,4,4,4,6,9 dup(4),6,6,4,4,4,5 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,34 dup(6)
db 4,4,6,6,6,4,4,6,6,4,4,4,6,8 dup(4),6,6,6,4,4,4,5 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,35 dup(6),4,4,6,6,4,4,6,6,4,4,4,6,8 dup(4),6,6,6
db 4,4,6 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,35 dup(6),4,4,6,6,4,4,6,6,4,4,4,6,8 dup(4),6,6,6,4,4,6 dup(6),4,4,51 dup(6),4,4,6,6,6,0
db 11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,36 dup(6),4,4,6,4,4,6,6,4,4,4,6,8 dup(4),6,6,6,4,4,6 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 11 dup(24),0,28 dup(6),4,4,36 dup(6),4,4,6,4,4,6,6,4,4,4,6,8 dup(4),6,6,6,4,4,6 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,36 dup(6),4,4,6
db 4,4,6,6,4,4,4,6,8 dup(4),6,6,6,4,4,6 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,37 dup(6),4,6,4,4,6,6,6,11 dup(4),6,6,6,4,7 dup(6),4,4
db 51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,39 dup(6),4,4,6,6,6,10 dup(4),4 dup(6),4,7 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1)
db 7 dup(0),11 dup(24),0,28 dup(6),4,4,39 dup(6),4,4,6,6,6,10 dup(4),4 dup(6),4,7 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,8 dup(6),39 dup(9)
db 7 dup(4),4 dup(6),4,7 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,7 dup(6),9,12,38 dup(16),7 dup(4),6,4,6,6,4,7 dup(6),4,4,51 dup(6),4,4,6,6,6
db 0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,12,9 dup(16),15,15,15,24 dup(16),15,15,15,7 dup(4),6,4,6,6,4,7 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0)
db 128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,5 dup(16),15 dup(15),16 dup(16),4 dup(15),7 dup(4),6,4,6,6,4,7 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 11 dup(24),0,28 dup(6),4,4,6 dup(6),9,12 dup(16),15,15,15,20 dup(16),5 dup(15),7 dup(4),6,4,4,9 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4
db 6 dup(6),9,5 dup(16),35 dup(12),7 dup(4),6,4,4,9 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,5 dup(16),35 dup(12),7 dup(4),6,4,4
db 9 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),36 dup(12),7 dup(4),6,4,4,9 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24)
db 7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,12,25 dup(16),9 dup(15),7 dup(4),6,4,4,4,8 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,26 dup(16),9 dup(15),7 dup(4),6,4,4,4,8 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4
db 6 dup(6),9,4 dup(16),12,24 dup(16),11 dup(15),7 dup(4),6,4,4,4,8 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12
db 22 dup(16),15,15,15,8 dup(12),15,15,7 dup(4),6,6,4,4,4,6 dup(6),4,4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,15 dup(16)
db 8 dup(15),12,12,8 dup(22),12,12,21 dup(4),51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,11 dup(16),11 dup(15),12,22,22,25,25,25
db 7 dup(22),21 dup(4),51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,4 dup(16),18 dup(15),12,22,25,25,25,8 dup(22),21 dup(4),51 dup(6)
db 4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,4 dup(16),18 dup(15),12,22,25,25,25,8 dup(22),21 dup(4),51 dup(6),4,4,6,6,6,0,11 dup(24)
db 7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,18 dup(16),4 dup(15),12,9 dup(22),25,25,22,8 dup(4),10 dup(6),4,4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0)
db 128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,4 dup(16),18 dup(15),12,12,12,5 dup(22),25,25,22,12,12,7 dup(4),12 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0)
db 128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,16,16,21 dup(15),12 dup(12),7 dup(4),12 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0
db 28 dup(6),4,4,6 dup(6),9,4 dup(16),12,16,7 dup(15),5 dup(16),12 dup(15),8 dup(12),15,12,7 dup(4),12 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6)
db 4,4,6 dup(6),9,4 dup(16),12,20 dup(16),14 dup(15),12,7 dup(4),12 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,6 dup(16)
db 15,15,15,7 dup(16),18 dup(15),12,7 dup(4),12 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,5 dup(16),7 dup(15),5 dup(16)
db 16 dup(15),12,12,6 dup(4),13 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(16),12,16,16,31 dup(15),12,12,6 dup(4),13 dup(6),4,4
db 51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(15),12,32 dup(15),12,12,12,6 dup(4),13 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0)
db 128 dup(-1),7 dup(0),11 dup(24),0,28 dup(6),4,4,6 dup(6),9,4 dup(15),12,32 dup(15),12,12,12,6 dup(4),13 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0
db 28 dup(6),4,4,6 dup(6),9,5 dup(15),35 dup(12),6 dup(4),13 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,24 dup(6),4,4,4,6,4,4,6 dup(6),9,12,39 dup(16)
db 6 dup(4),13 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,23 dup(6),4,4,4,6,6,4,4,7 dup(6),12,21 dup(16),18 dup(15),6 dup(4),13 dup(6),4,4,51 dup(6),4,4,6,6,6
db 0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,27 dup(6),4 dup(4),6 dup(6),12,16,16,37 dup(15),6 dup(4),13 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 11 dup(24),0,16 dup(4),9 dup(3),12 dup(4),12,16,15,15,15,35 dup(12),6 dup(4),13 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,18 dup(4),8 dup(3),10 dup(4),9
db 16,15,15,15,36 dup(12),6 dup(4),13 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,14 dup(6),4,3,3,4,13 dup(6),9,4 dup(15),12,12,23 dup(16),11 dup(15)
db 6 dup(4),13 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,15 dup(6),3,3,14 dup(6),9,4 dup(15),12,23 dup(16),12 dup(15),7 dup(4),12 dup(6),4,4
db 51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,15 dup(6),3,4,14 dup(6),9,4 dup(15),12,20 dup(16),15 dup(15),7 dup(4),12 dup(6),4,4,51 dup(6),4,4,6,6,6,0
db 11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,15 dup(6),3,4,14 dup(6),9,4 dup(15),12,20 dup(16),15 dup(15),4 dup(4),6,4,4,12 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0)
db 128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,15 dup(6),4,4,14 dup(6),9,4 dup(15),12,17 dup(16),8 dup(15),8 dup(12),15,15,4 dup(4),6,4,4,12 dup(6),4,4,51 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0)
db 128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,15 dup(6),4,4,14 dup(6),9,4 dup(15),12,4 dup(16),9 dup(15),16,16,16,7 dup(15),12,12,8 dup(22),12,12,4 dup(4),6,4,4,4,11 dup(6),4,4,51 dup(6),4,4,6,6,6,0
db 11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,15 dup(6),4,4,14 dup(6),9,4 dup(15),12,8 dup(16),14 dup(15),12,22,22,25,25,25,7 dup(22),4 dup(4),6,6,4,4,11 dup(6),6 dup(0),47 dup(6)
db 4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,15 dup(6),4,4,14 dup(6),9,4 dup(15),12,17 dup(16),5 dup(15),12,22,25,25,25,8 dup(22),4 dup(4),6,6,4,4,4,9 dup(6),0,25
db 4 dup(33),25,0,46 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,15 dup(6),4,4,14 dup(6),9,4 dup(15),12,14 dup(16),8 dup(15),12,9 dup(22),25,25,22,5 dup(4),6,6,4,4
db 9 dup(6),0,25,4 dup(33),25,0,46 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,14 dup(6),4,4,4,14 dup(6),9,4 dup(15),12,10 dup(16),12 dup(15),12,12,12,5 dup(22)
db 25,25,22,12,12,5 dup(4),6,6,4,4,4,8 dup(6),0,25,4 dup(33),25,0,46 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,14 dup(6),4,4,15 dup(6),9,4 dup(15),12,4 dup(16)
db 19 dup(15),12 dup(12),5 dup(4),6,6,6,4,4,4,7 dup(6),0,25,4 dup(33),25,0,39 dup(6),4,4,5 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4,14 dup(6),4,4,15 dup(6),9
db 4 dup(15),12,5 dup(16),20 dup(15),8 dup(12),15,12,5 dup(4),6,6,6,4,4,4,7 dup(6),0,25,4 dup(33),25,0,39 dup(6),4,4,5 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,4,4
db 14 dup(6),4,4,15 dup(6),9,4 dup(15),12,7 dup(16),27 dup(15),12,5 dup(4),6,6,6,4,4,4,7 dup(6),0,25,4 dup(33),25,0,39 dup(6),4,4,5 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24)
db 0,6,6,6,4,4,14 dup(6),4,4,15 dup(6),9,4 dup(15),12,7 dup(16),27 dup(15),12,5 dup(4),4 dup(6),4,4,4,6 dup(6),0,25,25,33,33,25,25,0,37 dup(6),4,6,4,6,6,4,6,6,6,4,4,6,6,6,0,11 dup(24),7 dup(0)
db 128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,3,4,11 dup(6),4,6,6,4,4,6,4,4,12 dup(6),9,4 dup(15),12,7 dup(16),26 dup(15),12,12,6 dup(4),6,6,6,4 dup(4),5 dup(6),0,25,25,33,33,25,25,0,36 dup(6),4,4,6,6,6
db 4,4,6,6,6,4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,3,3,11 dup(6),4,4,6,4,4,6,4,4,4,11 dup(6),9,4 dup(15),12,10 dup(16),23 dup(15),12,12,6 dup(4),4 dup(6),4 dup(4)
db 4 dup(6),0,25,25,33,33,25,25,0,35 dup(6),4,4,4,6,6,4,4,4 dup(6),4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,3,3,9 dup(6),4 dup(4),6,4,3,6,6,4,4,4,10 dup(6),9,16,15,15,15
db 12,12 dup(16),20 dup(15),12,12,12,7 dup(4),4 dup(6),4 dup(4),6,6,6,0,0,4 dup(10),0,0,34 dup(6),4,4,4,8 dup(6),4,4,4,6,6,6,0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,6,6,6,3,3,8 dup(6)
db 4 dup(4),6,6,3,3,6,6,6,4 dup(4),8 dup(6),9,16,16,15,15,12,16 dup(16),16 dup(15),12,12,12,6,6 dup(4),4 dup(6),6 dup(4),6,0,10,10,19,19,10,10,0,44 dup(6),5 dup(4),6,6,0,11 dup(24),7 dup(0),128 dup(-1)
db 7 dup(0),11 dup(24),0,6,6,4,3,3,4,12 dup(6),4,3,3,4,14 dup(6),9,16,16,15,15,15,35 dup(12),6,17 dup(4),0,10,10,19,19,10,10,0,51 dup(4),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,7 dup(3)
db 9 dup(4),8 dup(3),12 dup(4),9,16,16,38 dup(15),6,17 dup(4),0,10,10,19,19,10,10,0,51 dup(4),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,10 dup(3),7 dup(4),6 dup(3),13 dup(4),9,6 dup(16)
db 34 dup(15),4,6,7 dup(4),9 dup(6),0,25,25,33,33,25,25,0,21 dup(6),4 dup(4),26 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,25 dup(6),4 dup(4),7 dup(6),9,9 dup(16),16 dup(15)
db 15 dup(16),4,6,4 dup(4),6,4,4,4,8 dup(6),0,25,25,33,33,25,25,0,22 dup(6),4,4,27 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,26 dup(6),4,4,8 dup(6),9,12,39 dup(16),4,6,4 dup(4),6
db 4,4,4,8 dup(6),0,25,25,33,33,25,25,0,22 dup(6),4,4,27 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,26 dup(6),4,4,8 dup(6),9,12,39 dup(16),4,6,4 dup(4),6,6,4,4,6,6,6,4,4 dup(6),0
db 25,25,33,33,25,25,0,22 dup(6),4,4,27 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,26 dup(6),4,4,8 dup(6),9,9,39 dup(12),4,4,6,4,4,4,6,6,4,4,4,6,6,4,5 dup(6),0,4 dup(10),0,23 dup(6)
db 4,4,27 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,18 dup(6),19 dup(9),12,39 dup(9),4,4,6,4 dup(4),6,4,4,4,6,6,6,4,6,6,6,0,10,10,19,19,10,10,0,22 dup(6),4,4,27 dup(6),0,11 dup(24)
db 7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,17 dup(6),9,12,10 dup(15),48 dup(16),12 dup(4),6,6,4,4,6,6,0,10,10,19,19,10,10,0,22 dup(6),4,4,27 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0)
db 11 dup(24),0,16 dup(6),9,12,7 dup(15),23 dup(16),29 dup(15),8 dup(4),6,4,4,4,6,6,6,4,4,6,0,10,10,19,19,10,10,0,22 dup(6),4,4,27 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0
db 16 dup(6),9,15,15,25 dup(16),32 dup(15),12,6 dup(4),6,4,6,4 dup(4),6,6,6,4,4,0,25,25,33,33,25,25,0,22 dup(6),4,4,27 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,16 dup(6),9,15
db 26 dup(16),31 dup(15),12,12,6 dup(4),6,4,6,6,4,4,4,4 dup(6),4,0,25,25,33,33,25,25,0,22 dup(6),4,4,27 dup(6),0,11 dup(24),7 dup(0),128 dup(-1),7 dup(0),11 dup(24),0,16 dup(6),9,38 dup(16),20 dup(15)
db 12,12,7 dup(4),6,4,6,6,4,4,4,4 dup(6),0,25,25,33,33,25,25,0,22 dup(6),4,4,27 dup(6),0,9 dup(24),28,24,142 dup(0),24,28,9 dup(24),0,16 dup(6),9,41 dup(16),16 dup(15),12,12,12,7 dup(4),6,4,6,6,4,4,4
db 4 dup(6),0,25,25,33,33,25,25,0,22 dup(6),4,4,27 dup(6),0,9 dup(24),28,28,142 dup(0),28,28,9 dup(24),0,16 dup(6),9,44 dup(16),13 dup(15),12,12,15,7 dup(4),6,4,6,6,4,4,4,4 dup(6),0,25,25,33,33,25,25,0
db 22 dup(6),4,4,27 dup(6),0,9 dup(24),28,28,142 dup(0),28,28,9 dup(24),0,16 dup(6),9,44 dup(16),13 dup(15),12,12,15,8 dup(4),6,4,6,6,4,4,4,6,6,6,0,6 dup(10),0,22 dup(6),4,4,27 dup(6),0,9 dup(24),32,28
db 142 dup(0),28,32,9 dup(24),0,16 dup(6),9,48 dup(16),12 dup(15),8 dup(4),6,4,6,6,6,4,4,6,6,6,0,10,10,19,19,10,10,0,22 dup(6),4,4,27 dup(6),0,9 dup(24),32,32,28,140 dup(18),28,32,32,9 dup(24),0
db 16 dup(6),9,8 dup(16),52 dup(12),6,8 dup(4),6,4,6,6,4,4,4,6,6,0,10,10,19,19,10,10,0,22 dup(6),4,4,4,26 dup(6),0,10 dup(24),32,32,140 dup(28),32,32,10 dup(24),0,16 dup(6),9,8 dup(16),12,9,12,46 dup(9)
db 12,9,9,6,8 dup(4),5 dup(6),4,4,6,6,0,10,10,19,19,10,10,0,22 dup(6),29 dup(4),0,164 dup(24),0,16 dup(6),9,8 dup(16),12,12,9,12,46 dup(9),12,9,6,6,7 dup(4),5 dup(6),4,4,4,6,0,10,10,19,19,10,10,0
db 22 dup(6),29 dup(4),0,9 dup(24),10,10,153 dup(24),0,16 dup(6),9,8 dup(16),12,13 dup(15),12,9,36 dup(12),4,6,8 dup(4),5 dup(6),4,4,6,0,10,10,19,19,10,10,0,4,21 dup(6),4,4,4,26 dup(6),0,8 dup(24),10
db 35,35,24 dup(10),129 dup(24),0,15 dup(6),4,9,8 dup(16),12,14 dup(15),12,9,12,29 dup(15),5 dup(12),4,4,6,7 dup(4),5 dup(6),4,4,4,0,10,10,19,19,10,10,0,4,4,4,19 dup(6),4,4,27 dup(6),0,7 dup(24),10,37
db 35,35,38,10,10,39,39,10,10,39,10,10,39,10,10,10,39,6 dup(10),39,10,10,10,87 dup(24),18,18,25 dup(23),18,13 dup(24),0,12 dup(6),4 dup(4),9,8 dup(16),12,15 dup(15),12,9,29 dup(15),5 dup(12),4 dup(4),3
db 6 dup(4),5 dup(6),4,4,0,10,10,19,19,10,10,0,5 dup(4),6,8 dup(0),4 dup(6),8 dup(0),25 dup(6),0,6 dup(24),10,37,37,10,10,36,36,10,39,10,39,10,39,10,39,10,39,10,39,10,39,4 dup(10),39,10,39,10,10
db 86 dup(24),18,28 dup(24),18,12 dup(24),0,10 dup(6),6 dup(4),9,7 dup(16),15,12,16 dup(15),12,9,28 dup(15),12,12,12,15,12,4 dup(4),3,6 dup(4),5 dup(6),4,4,0,10,10,19,19,10,10,0,5 dup(4),0,25,5 dup(33)
db 25,25,0,6,6,0,25,5 dup(33),25,25,0,24 dup(6),0,6 dup(24),10,37,37,10,10,36,36,10,39,39,39,10,39,10,39,10,10,10,39,10,39,10,39,39,10,10,39,10,10,10,85 dup(24),18,21 dup(24),10,10,10,24,24,24,0,24,23
db 12 dup(24),0,16 dup(6),9,5 dup(16),15,15,15,12,17 dup(15),12,9,27 dup(15),12,12,15,15,12,4 dup(4),3,6 dup(4),5 dup(6),4,4,0,10,10,19,19,10,10,0,5 dup(4),0,25,5 dup(33),25,25,0,6,6,0,25,5 dup(33)
db 25,25,0,24 dup(6),0,6 dup(24),10,37,37,10,10,36,36,10,39,39,39,10,39,10,39,10,10,10,39,10,39,10,39,39,10,10,39,10,10,10,85 dup(24),18,21 dup(24),10,10,10,24,24,24,0,24,23,12 dup(24),0,16 dup(6),9
db 5 dup(16),15,15,15,12,17 dup(15),12,9,27 dup(15),12,12,15,15,12,4 dup(4),3,3,5 dup(4),6 dup(6),4,0,10,10,19,19,10,10,0,6,4 dup(4),0,8 dup(33),0,6,6,0,8 dup(33),0,24 dup(6),0,28,6 dup(24),10,2,11,11
db 24,10,10,39,10,10,10,39,10,39,10,39,10,39,10,39,4 dup(10),39,10,39,10,10,84 dup(24),18,21 dup(24),10,1,23,1,10,24,24,0,24,23,11 dup(24),28,0,16 dup(4),9,6 dup(16),15,15,12,18 dup(15),12,9,26 dup(15)
db 12,15,15,12,12,4,4,3,4,4,3,6 dup(4),6 dup(6),0,10,10,19,19,10,10,0,6,6,4,4,4,0,25,5 dup(33),25,25,0,4,4,0,25,5 dup(33),25,25,0,4 dup(6),4,19 dup(6),0,28,28,6 dup(24),10,11,11,10,10,10,39,10,10,10,39
db 10,10,39,10,10,10,39,6 dup(10),39,10,10,10,84 dup(24),18,15 dup(24),10,10,24,24,24,10,1,27,27,27,1,10,24,0,24,23,10 dup(24),28,28,0,16 dup(4),9,6 dup(16),15,15,12,19 dup(15),12,9,21 dup(15),12,15,15
db 12,12,15,15,12,12,4,4,3,3,4,3,3,4,4,4,9 dup(0),6 dup(10),7 dup(0),25,5 dup(33),25,25,4 dup(0),25,5 dup(33),25,25,0,0,0,6,6,6,4,4,17 dup(6),0,18,28,28,6 dup(24),26 dup(10),85 dup(24),23,14 dup(24),10
db 27,27,10,24,24,18,1,27,27,27,1,18,24,0,24,18,9 dup(24),28,28,18,0,16 dup(6),9,4 dup(16),4 dup(15),12,12,19 dup(15),12,12,14 dup(15),12,4 dup(15),12,12,15,15,12,15,15,12,12,12,4,4,4,5 dup(3),4,0,10
db 18,18,23,37 dup(24),23,18,18,10,0,6,6,6,4,4,16 dup(6),0,18,18,28,28,116 dup(24),23,14 dup(24),10,1,1,10,24,24,28,18,1,23,1,18,28,24,0,24,18,8 dup(24),28,28,18,18,0,16 dup(6),9,16,16,16,5 dup(15)
db 12,12,12,19 dup(15),12,12,12 dup(15),12,12,15,15,15,12,12,15,15,7 dup(12),3,4,4,5 dup(3),4,0,45 dup(24),0,4 dup(6),4,4,16 dup(6),0,120 dup(18),15 dup(24),10,10,4 dup(24),28,18,18,18,28,24,24,0,24,10
db 11 dup(18),0,7 dup(6),10 dup(4),9,16,16,16,5 dup(15),4 dup(12),19 dup(15),12,12,10 dup(15),12,12,12,15,15,12,12,12,15,15,7 dup(12),3,4,4,4,5 dup(3),0,45 dup(24),0,6 dup(6),4,16 dup(6),0,118 dup(18)
db 10,22 dup(24),28,28,28,24,24,24,0,24,10,10 dup(18),0,12 dup(6),5 dup(4),6,9,16,16,16,5 dup(15),12,15,12,12,12,19 dup(15),12,12,8 dup(15),12,12,12,15,15,12,12,12,15,15,8 dup(12),3,3,4,4,5 dup(3),0
db 45 dup(24),0,24 dup(6),10 dup(0),4 dup(10),33 dup(0),67 dup(10),5 dup(0),10,18,18,18,22 dup(24),18,18,18,10,11 dup(0),14 dup(6),4,4,4,6,6,9,16,16,16,5 dup(15),12,15,15,12,12,12,19 dup(15),12,12
db 5 dup(15),4 dup(12),15,15,14 dup(12),3,3,3,4,5 dup(3),0,18,23,41 dup(24),23,18,0,8 dup(6),4,24 dup(6),0,21,10,10,10,0,9 dup(6),22 dup(4),0,4 dup(10),18,10,18,18,10,49 dup(18),10,18,18,10,18,4 dup(10)
db 0,4 dup(6),30 dup(0),30 dup(6),9,16,16,16,5 dup(15),12,15,15,15,12,12,12,19 dup(15),12,12,15,15,15,4 dup(12),15,16 dup(12),4 dup(3),4,4 dup(3),0,18,18,23,23,37 dup(24),23,23,18,18,0,6,6,4,4,5 dup(6)
db 4,4,20 dup(6),0,0,25,25,21,10,0,7 dup(6),20 dup(4),5 dup(0),69 dup(10),5 dup(0),14 dup(6),4,4,43 dup(6),9,16,16,6 dup(15),12,4 dup(15),12,12,12,19 dup(15),12 dup(12),15,15,11 dup(12),4 dup(3),4
db 4 dup(3),0,18,18,23,23,37 dup(24),23,23,18,18,0,6,6,4,4,5 dup(6),4,4,20 dup(6),0,0,25,25,21,10,0,7 dup(6),20 dup(4),5 dup(0),69 dup(10),5 dup(0),14 dup(6),4,4,43 dup(6),9,16,16,6 dup(15),12,4 dup(15)
db 12,12,12,19 dup(15),12 dup(12),15,15,11 dup(12),9 dup(3),0,10,4 dup(18),23,23,23,29 dup(24),23,23,23,4 dup(18),10,0,6,6,6,4,4,4,4 dup(6),4,4,4,16 dup(6),0,0,5 dup(25),0,7 dup(6),12 dup(4),9 dup(0)
db 10,10,75 dup(18),10,10,9 dup(0),5 dup(6),4,4,43 dup(6),9,16,16,6 dup(15),12,5 dup(15),12,12,12,19 dup(15),10 dup(12),15,15,12 dup(12),10 dup(3),0,0,41 dup(10),0,0,4,4,4,6,6,4 dup(4),6,6,6,6 dup(4)
db 8 dup(6),4 dup(0),25,33,33,25,25,0,0,5 dup(6),8 dup(4),7 dup(0),10,10,93 dup(18),10,10,7 dup(0),43 dup(6),9,16,16,6 dup(15),12,6 dup(15),12,12,12,16 dup(15),12,15,15,23 dup(12),11 dup(3),0,8 dup(10)
db 7 dup(18),23,18,8 dup(23),18,23,6 dup(18),8 dup(10),0,5 dup(4),6,6,5 dup(4),6,6,6,8 dup(4),4 dup(0),25,25,33,33,33,25,25,0,0,9 dup(4),6 dup(0),10,10,12 dup(23),83 dup(18),12 dup(23),10,10,6 dup(0)
db 30 dup(6),4,4,5 dup(6),9,16,7 dup(15),12,7 dup(15),12,12,12,16 dup(15),12,15,15,22 dup(12),11 dup(3),0,41 dup(10),24 dup(0),25,25,4 dup(33),25,25,0,0,0,7 dup(4),4 dup(0),10,10,26 dup(23),67 dup(18)
db 26 dup(23),10,10,4 dup(0),20 dup(6),4,4,6,6,5 dup(4),4 dup(6),9,16,7 dup(15),12,7 dup(15),4 dup(12),15 dup(15),12,12,15,15,21 dup(12),11 dup(3),0,7 dup(10),7 dup(18),23,18,10 dup(23),18,23,6 dup(18)
db 7 dup(10),21,21,21,4 dup(25),33,33,25,18 dup(33),25,0,0,0,6 dup(4),4 dup(0),10,129 dup(23),10,4 dup(0),15 dup(6),9 dup(4),4 dup(6),4,9,8 dup(15),12,5 dup(15),7 dup(12),13 dup(15),4 dup(12),15,15
db 20 dup(12),11 dup(3),0,41 dup(10),4 dup(21),22 dup(25),0,0,0,8 dup(4),0,10,10,135 dup(23),10,10,0,12 dup(6),9 dup(4),5 dup(6),4,4,9,8 dup(15),12,15,15,15,10 dup(12),8 dup(15),30 dup(12)

ends


; *********************************OFFSET CONSTANTS*********************************

PhysicsComponentId            equ 4

PhysicsComponentAxisX         equ 0
PhysicsComponentVelocityX     equ 0
PhysicsComponentAccelerationX equ 2
PhysicsComponentFrictionX     equ 4
PhysicsComponentMaxVelocityX  equ 6

PhysicsComponentAxisY         equ 8
PhysicsComponentVelocityY     equ 8
PhysicsComponentAccelerationY equ 10
PhysicsComponentFrictionY     equ 12
PhysicsComponentMaxVelocityY  equ 14

; ********************************************

PhysicsComponentAxisVelocity     equ 0
PhysicsComponentAxisAcceleration equ 2
PhysicsComponentAxisFriction     equ 4
PhysicsComponentAxisMaxVelocity  equ 6

; ********************************************

AnimatorComponentId                    equ 3
AnimatorComponentCurrentAnimationIndex equ 0
AnimatorComponentCurrentFrameIndex     equ 1
AnimatorComponentAnimationAmount       equ 2
AnimatorComponentData                  equ 3

AnimationId         equ 2
AnimationSize       equ 1
AnimationSpeed      equ 2
AnimationData       equ 3

; ********************************************

RenderComponentId                  equ 1
RenderComponentPosition            equ 0
RenderComponentImage               equ 2
RenderComponentPreviousPosition    equ 4
RenderComponentWidth               equ 6
RenderComponentHeight              equ 8
RenderComponentBackground          equ 10

; ********************************************

ControllerMaxComponentAmount equ 0
ControllerComponentData      equ 1

ComponentId       equ 0
ComponentLocation equ 1

ImageWidth  equ 0
ImageHeight equ 2
ImageData   equ 4

PrintManagerId               equ 5
PrintManagerControllerAmount equ 1
PrintManagerData             equ 2

SegmentWrapperId       equ 6
SegmentWrapperSegment  equ 1
SegmentWrapperOriginal equ 3

; *********************************CONTROLLERS START********************************

testController db 10
db PhysicsComponentId,  10*2+1
db RenderComponentId,   10*2+1+(8*2)
db AnimatorComponentId, 10*2+1+(8*2)+(5*2+8*8)
dw 7 dup(0)
dw 0, 0, 0, 100  ; vx, ax, fx, mx
dw 0, 0, 0, 100  ; vy, ay, fy, my
dw 0, offset boxImage1, 0, 8, 8
db 8*8 dup(0)
db 0, 0, 1 ; cur anim, cur frame, anim amount
dw offset boxAnimation

borderController db 10
db RenderComponentId, 10*2+1
dw 9 dup(0)
dw 0, offset borderImage, 0, 128, 16
db 128*16 dup(0)

; *********************************ANIMATIONS START********************************

boxAnimation db AnimationId, 3, 30
dw offset boxImage1, offset boxImage2, offset boxImage3

; *********************************OBJECTS START********************************

KeyStateTable db 256 dup(0) ; Table to store key states (0 = released, 1 = pressed)

PlayerSpeed equ 16
JumpHeight equ 16*4

SubPixelAmount equ 16

; *********************************GENERAL START********************************
directionX dw 0
directionY dw 0

animationTime dw 0

gameLoopSpeed equ 17 ; in ms (to calculate FPS -> 1024 / FPS)
globalTime dw 0      ; in ms

; Declare variables to store the old ISR
oldKeyboardHandlerOffset dw ?
oldKeyboardHandlerSegment dw ?

; Save the original mask for restoration
previousIRQMask db ?

printManager db PrintManagerId, 0
dw 50 dup(0)

CODESEG

; input - Mouse pointer
proc initMouse
    push bp
    mov bp, sp
    push ax
    mov ax, 0 ; init Mouse
    int 33h
    push [bp + 4] ; mouse pointer
    push (100 * 320) + 160
    call initController
    pop ax
    pop bp
    ret 2
endp initMouse

proc updateMouse
    push bp
    mov bp, sp
    push bx
    push ax
    push si
    push dx
    push cx
    push di

    mov si, [bp + 6] ; Mouse pointer

    mov ax, 3 ; get mouse position cx - x, dx - y
    int 33h

    shr cx, 1 ; 0-639 -> 0-319
    cmp cx, 319 
    jne .skipFixX
    dec cx
.skipFixX:

    cmp dx, 199 
    jne .skipFixY
    dec dx
.skipFixY:

    mov ax, dx ;  compute screen position
    xor dx, dx
    mov di, 320
    mul di
    add ax, cx
    
    push si ; mouse controller
    push ax ; position
    ; call moveControllerByPosition

    push [bp + 4]
    push si
    call uploadController

    pop di
    pop cx
    pop dx
    pop si
    pop ax
    pop bx
    pop bp
    ret 4
endp updateMouse

proc keyboardHandler far              
	push ax
	push bx
    push cx
    push dx
	push di
	push si
	; read keyboard scan code
    in al, 60h

	; update keyboard state
    xor bh, bh
    mov bl, al
    and bl, 7Fh     ; bl = scan code
	
	; save to the keyboard array
    push cx
	mov cx, 7
    shr al, cl ; al = 0 if pressed, 1 if released
	pop cx
    xor al, 1  ; al = 1 if pressed, 0 if released
    mov [cs:KeyStateTable + bx], al  ; save pressed buttons in array
	
	; send EOI to XT keyboard
    in  al, 61h
    mov ah, al
    or  al, 80h
    out 61h, al
    mov al, ah
    out 61h, al

	; send EOI to master PIC
    mov al, 20h
    out 20h, al
	
    pop si
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    iret
endp keyboardHandler

; interrupt that hooks on to int70h
; that is called by the computer
; and call the "periodic" method 1024 times a sec
proc clock far
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    push ds
    ; Preserve port 70h contents
    in al, 70h
    mov bx, ax
    ; Read status register C to acknowledge RTC interrupt
    mov al, 0Ch
    out 70h, al
    mov al, 8Ch
    out 70h, al
    in al, 71h
    ; Restore port 70h contents
    mov ax, bx
    out 70h, al
    ; Notify PICs that interrupt is handled
    mov al, 20h
    out 0A0h, al
    out 020h, al
    push offset globalTime
    call periodic ; every tick (1024 times a sec)
    pop ds
    pop dx
    pop bx
    pop ax
    pop bp
    iret
endp clock

; setup the game clock
proc setUpClock
    push bp
    mov bp, sp
    push ax
    push ds
    push dx

    cli
    ; Save original mask of secondary PIC
    in al, 0A1h
    mov [bp + 4], al
    and al, 0FEh ; Enable IRQ 8 (RTC)
    out 0A1h, al

    ; Set frequency divisor in RTC register A
    mov al, 0Ah
    out 70h, al
    mov al, 8Ah
    out 70h, al
    in al, 71h
    and al, 11110000b ; Clear rate bits
    or al, 0110b      ; Set rate to 1024 Hz
    out 71h, al
    in al, 71h        ; Ensure the write is complete

    ; Enable periodic interrupts in RTC register B
    mov al, 0Bh
    out 70h, al
    mov al, 8Bh
    out 70h, al
    in al, 71h
    or al, 40h        ; Set PI (bit 6)
    out 71h, al
    in al, 71h        ; Acknowledge the change

    ; Set new interrupt handler for interrupt 70h
    mov al, 70h       ; Interrupt vector 70h
    mov ah, 25h       ; Set interrupt vector
    mov dx, offset clock ; Offset of the ISR
    push seg clock
    pop ds
    int 21h
    sti

    pop dx
    pop ds
    pop ax
    pop bp
    ret 2
endp setUpClock

; clean up the game's clock
proc cleanUpClock
    push bp
    mov bp, sp
    push ax
    ; Restore original mask of secondary PIC
    mov al, [bp + 4] ; mask pointer
    out 0A1h, al
    pop ax
    pop bp
    ret 2
endp cleanUpClock

; ***********************GENERAL GETTERS*********************

proc getControllerWordValue
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 8] ; controller pointer
    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx
    add bx, [bp + 4] ; parameter
    mov bx, [bx]
    mov [bp + 8], bx
    pop bx
    pop bp
    ret 4
endp getControllerWordValue

proc getControllerWordOffset
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 8] ; controller pointer
    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx
    add bx, [bp + 4] ; parameter
    mov [bp + 8], bx
    pop bx
    pop bp
    ret 4
endp getControllerWordOffset

proc getControllerByteValue
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 8] ; controller pointer
    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx
    add bx, [bp + 4] ; parameter
    mov bl, [bx]
    mov [bp + 8], bl
    pop bx
    pop bp
    ret 4
endp getControllerByteValue

; ***********************GENERAL SETTERS*********************

proc setControllerWordValue
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 10] ; controller pointer
    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx
    add bx, [bp + 4] ; parameter
    mov ax, [bp + 8] ; value
    mov [bx], ax
    pop bx
    pop ax
    pop bp
    ret 8
endp setControllerWordValue

proc addControllerWordValue
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 10] ; controller pointer
    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx
    add bx, [bp + 4] ; parameter
    mov ax, [bp + 8] ; addition
    add [bx], ax
    pop bx
    pop ax
    pop bp
    ret 8
endp addControllerWordValue

proc setControllerByteValue
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 10] ; controller pointer
    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx
    add bx, [bp + 4] ; parameter
    mov al, [bp + 8] ; value
    mov [bx], al
    pop bx
    pop ax
    pop bp
    ret 8
endp setControllerByteValue

proc addControllerByteValue
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 10] ; controller pointer
    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx
    add bx, [bp + 4] ; parameter
    mov al, [bp + 8] ; addition
    add [bx], al
    pop bx
    pop ax
    pop bp
    ret 8
endp addControllerByteValue

; ****************************************

; input - word directionX pointer, word directionY pointer
proc updateDirection
    push bp
    mov bp, sp
    push ax
    push si
    push di
    mov si, [bp + 6]  ; directionX pointer
    mov di, [bp + 4]  ; directionY pointer
    mov [word ptr si], 0
    mov [word ptr di], 0
    cmp [byte ptr KeyStateTable + 1Eh], 1 ; Check if 'A' key is pressed (scan code 1Eh)
    je .setLeft
    cmp [byte ptr KeyStateTable + 20h], 1  ; Check if 'D' key is pressed (scan code 20h)
    je .setRight
    jmp .checkY
.setLeft:
    mov [word ptr si], -1 * PlayerSpeed
    jmp .checkY
.setRight:
    mov [word ptr si], PlayerSpeed
.checkY:
    cmp [byte ptr KeyStateTable + 11h], 1 ; Check if 'W' key is pressed (scan code 11h)
    je .setUp
    cmp [byte ptr KeyStateTable + 1Fh], 1 ; Check if 'S' key is pressed (scan code 1Fh)
    je .setDown
    jmp .end
.setUp:
    mov [word ptr di], -1 * PlayerSpeed
    jmp .end
.setDown:
    mov [word ptr di], PlayerSpeed
.end:
    pop di
    pop si
    pop ax
    pop bp
    ret 4
endp updateDirection

; clears the screen (turns all pixels to 0)
proc clearScreen
    push di
    mov di, 64001
.clearLoop:
    dec di
    mov [byte ptr es:di], 0
    jnz .clearLoop
    pop di
    ret
endp clearScreen

; input - palette pointer
; sets it to the screen's palette
proc setPalette
    push bp
    mov bp, sp
    push ax
    push si
    push cx
    push dx
	mov si, [bp + 4]
	mov cx, 256
	mov dx, 3C8h
	mov al, 0
	out dx, al ; copy starting color to port 3C8h
	inc dx     ; copy palette itself to port 3C9h
.setLoop:
	mov al, [si]   ; red
	out dx, al
	mov al, [si + 1] ; green
	out dx, al
	mov al, [si + 2] ; blue
	out dx, al
	add si, 3      ; move to next color
	loop .setLoop
    pop dx
    pop cx
    pop si
    pop ax
    pop bp
	ret 2
endp setPalette

; input - current pixel pos
; output - (ah = 0/1 x border) (al = 0/1 y border)
proc checkImageBorders
    push bp
    mov bp, sp
    push ax
    push cx
    push dx
    push bx

    xor bx, bx
    mov ax, [bp + 4]  ; current pos

    mov cx, 320
    xor dx, dx
    idiv cx ; ax - y, dx - x
    cmp dx, 319
    je .setTrueX
    cmp ax, 199
    je .setTrueY

    jmp .end
.setTrueX:
    mov bh, 1
    jmp .end
.setTrueY:
    mov bl, 1
.end:
    mov [bp + 4], bx
    pop bx
    pop dx
    pop cx
    pop ax
    pop bp
    ret
endp checkImageBorders

proc printImageBySize
    push bp
    mov bp, sp
    push di
    push ax
    push bx
    push cx
    push dx
    push si
    mov bx, [bp + 10] ; image pointer
    mov cx, [bp + 8]  ; height
    mov dx, [bp + 6]  ; width
    mov di, [bp + 4]  ; screen position (left top)
    mov si, 0 ; reset width counter
.printLoop:
    push di
    call checkImageBorders
    pop ax
    cmp al, 1 ; if hit bottom, exit
    je .end
    cmp ah, 1 ; if hit sides, move to next row
    jne .skipCheckX
.disableRow:
    ; set the counters to the next row
    sub di, si
    sub bx, si
    add di, dx
    add bx, dx
    jmp .nextPixelRow
.skipCheckX:
    mov al, [byte ptr bx] ; get the color
    cmp al, -1
    je .skipPixel ; skip if it's empty (-1)
    mov [byte ptr es:di], al
.skipPixel:
    inc di ; move to the next pixel from screen
    inc bx ; move to the next pixel from image
    inc si ; inc the current width counter
    cmp si, dx ; if reached end of the row
    jne .printLoop
.nextPixelRow:
    add di, 320
    sub di, dx ; point to the next column
    xor si, si ; reset width counter
    dec cx
    jnz .printLoop
.end:
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    pop di
    pop bp
    ret 8
endp printImageBySize

; input - image pointer, position (left top corner)
; prints the image at the specified location
proc printImage
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 6] ; image pointer
    mov ax, bx
    add ax, ImageData
    push ax ; image data (colors)
    push [bx + ImageHeight]
    push [bx + ImageWidth]
    push [bp + 4] ; screen position (left top)
    call printImageBySize
    pop bx
    pop ax
    pop bp
    ret 4
endp printImage

; input - controller pointer
; prints it to the screen
proc printController
    push bp
    mov bp, sp
    push di
    mov di, [bp + 4] ; controller pointer
    push di
    push RenderComponentId
    call getControllerComponent
    pop di ; component
    push [word ptr di + RenderComponentImage]
    push [word ptr di + RenderComponentPosition]
    call printImage
    pop di
    pop bp
    ret 2
endp printController

; saves the background to the controller so it could move
; without affecting the background
proc saveController
    push bp
    mov bp, sp
    push di
    push bx
    push cx
    push dx
    push si
    mov di, [bp + 4]  ; controller
    push di
    push RenderComponentId
    call getControllerComponent
    pop di ; component

    mov bx, di
    add bx, RenderComponentBackground

    mov cx, [di + RenderComponentHeight]
    mov dx, [di + RenderComponentWidth]
    mov di, [di + RenderComponentPosition]
    mov si, 0  ; width counter
.saveLoop:
    mov al, [es:di]
    mov [bx], al
    inc di
    inc bx
    inc si
    cmp si, dx ; if reached end of the row
    jne .saveLoop
    add di, 320
    sub di, dx ; point to the next column
    xor si, si
    dec cx
    jnz .saveLoop
    pop si
    pop dx
    pop cx
    pop bx
    pop di
    pop bp
    ret 2
endp saveController

proc printBackground
    push bp
    mov bp, sp
    push di
    push dx
    mov di, [bp + 4] ; controller pointer

    push di
    push RenderComponentId
    call getControllerComponent
    pop di ; component

    mov dx, di
    add dx, RenderComponentWidth 
    push dx ; (width, height, color bytes)
    push [word ptr di + RenderComponentPreviousPosition]
    call printImage

    mov dx, [di + RenderComponentPosition]
    mov [di + RenderComponentPreviousPosition], dx
    
    pop dx
    pop di
    pop bp
    ret 2
endp printBackground

; input - controller pointer, word init position
; init the controller to the set position (saves the background, prints and moves to the location)
proc initController
    push bp
    mov bp, sp
    push di
    push ax
    push bx
    mov di, [bp + 6] ; controller pointer
    mov ax, [bp + 4] ; set position

    push di
    push RenderComponentId
    call getControllerComponent
    pop bx ; component

    mov [bx + RenderComponentPosition], ax
    mov [bx + RenderComponentPreviousPosition], ax
    
    push di
    call saveController
    push di
    call printController
    pop bx
    pop ax
    pop di
    pop bp
    ret 4
endp initController

; input - animated controller pointer
; moves the current animation a frame (if last frame resets it)
proc moveToNextAnimationFrame
    push bp
    mov bp, sp
    push di
    push bx
    push ax
    mov di, [bp + 4] ; controller pointer
    xor ax, ax
    push di
    call getCurrentAnimation
    pop bx ; current animation
    push di
    push AnimatorComponentId
    call getControllerComponent
    pop di ; component
    mov bl, [bx + AnimationSize]    ; animation size
    mov al, [di + AnimatorComponentCurrentFrameIndex] ; current frame number
    inc al                                       ; next frame
    cmp al, bl
    jne .end
    mov al, 0
.end:
    mov [di + AnimatorComponentCurrentFrameIndex], al ; set the frame
    pop ax
    pop bx
    pop di
    pop bp
    ret 2
endp moveToNextAnimationFrame

; input - controller pointer, byte animation number
; sets the current animation by number (first is 0, second is 1...)
proc setAnimation
    push bp
    mov bp, sp
    push di
    push ax
    xor ax, ax
    mov al, [bp + 4] ; animation number
    mov di, [bp + 6] ; controller pointer
    push di
    push AnimatorComponentId
    call getControllerComponent
    pop di ; animator component
    mov [byte ptr di + AnimatorComponentCurrentAnimationIndex], al  ; set current animation
    mov [byte ptr di + AnimatorComponentCurrentFrameIndex], 0       ; set current frame 0
    pop ax
    pop di
    pop bp
    ret 4
endp setAnimation

proc getFrameImage
    push bp
    mov bp, sp
    push bx
    push si

    mov bx, [bp + 6] ; animation
    mov si, [bp + 4] ; frame index

    add bx, AnimationData ; first animation
    add bx, si
    add bx, si ; current animation (every anim is a word)

    mov bx, [bx]
    mov [bp + 6], bx

    pop si
    pop bx
    pop bp
    ret 2
endp getFrameImage

; input - animated controller, current time (0-255)
; updates it's current animation
proc updateAnimation
    push bp
    mov bp, sp
    push ax
    push bx
    push di
    push cx
    mov di, [bp + 6] ; controller pointer
    mov al, [bp + 4] ; current time

    push di
    call getCurrentAnimation
    pop bx
    
    mov ch, [bx + AnimationSpeed] ; animation speed
    div ch ; ah - time % speed
    cmp ah, 0
    jne .end

    push di
    call moveToNextAnimationFrame

    push di
    push AnimatorComponentId
    push AnimatorComponentCurrentFrameIndex
    call getControllerByteValue
    pop cx
    mov ch, 0 ; cl = current frame index

    push bx
    push cx
    call getFrameImage
    pop bx

    push di
    push bx
    push RenderComponentId
    push RenderComponentImage
    call setControllerWordValue

.end:
    pop cx
    pop di
    pop bx
    pop ax
    pop bp
    ret 4
endp updateAnimation

; updates animation time
proc updateAnimationTime
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4]    ; time pointer
    cmp [byte ptr bx], 255
    jne .continue
    mov [byte ptr bx], 0
.continue:
    inc [byte ptr bx]
    pop bx
    pop bp
    ret 2
endp updateAnimationTime

; input - printManager pointer
; prints all the controllers
proc printAllControllers
    push bp
    mov bp, sp
    push bx
    push cx
    push si
    mov si, [bp + 4] ; offset printManager
    add si, PrintManagerControllerAmount
    mov bx, si
    mov cl, [byte ptr bx] ; amount of controllers
.printBackgroundLoop:
    cmp cl, 0
    je .printBackgroundEnd
    push [bx + 1]      ; controller pointer
    call printBackground
    add bx, 2
    dec cl
    jmp .printBackgroundLoop
.printBackgroundEnd:
    mov bx, si
    mov cl, [byte ptr bx] ; amount of controllers
.saveLoop:
    cmp cl, 0
    je .saveEnd
    push [bx + 1]      ; controller pointer
    call saveController
    add bx, 2
    dec cl
    jmp .saveLoop
.saveEnd:
    mov bx, si
    mov cl, [byte ptr bx] ; amount of controllers
    mov [byte ptr bx], 0
.printImageLoop:
    cmp cl, 0
    je .end
    push [bx + 1]      ;  controller pointer
    call printController
    mov [word ptr bx + 1], 0
    add bx, 2
    dec cl
    jmp .printImageLoop
.end:
    pop si
    pop cx
    pop bx
    pop bp
    ret 2
endp printAllControllers

; input - printManager pointer, controller pointer
; uploads the controller to the manager
proc uploadController
    push bp
    mov bp, sp
    push bx
    push di
    push ax
    mov bx, [bp + 6] ; printManager pointer
    mov di, [bp + 4] ; controller pointer
    xor ax, ax
    mov al, [byte ptr bx + PrintManagerControllerAmount] ; amount of controllers
    inc [byte ptr bx + PrintManagerControllerAmount]     ; inc the amount of controllers
    shl ax, 1 ; every pointer is a word
    add bx, ax
    mov [bx + PrintManagerData], di  ; upload it
    pop ax
    pop di
    pop bx
    pop bp
    ret 4
endp uploadController

; input - animated controller
; returns the current animation
proc getCurrentAnimation
    push bp
    mov bp, sp
    push di
    push bx
    mov di, [bp + 4] ; controller pointer

    push di
    push AnimatorComponentId
    call getControllerComponent
    pop di ; component

    xor bx, bx
    mov bl, [di + AnimatorComponentCurrentAnimationIndex]  ; current animation index
    add di, AnimatorComponentData ; animation list
    shl bx, 1                     ; each animation is a word         
    add di, bx                    ; current animation
    mov di, [di]                  ; get the pointer to anim and not the pointer to the pointer
    mov [bp + 4], di

    pop bx
    pop di
    pop bp
    ret
endp getCurrentAnimation

; input - velocity controller
; update its velocity (x and y)
proc updateVelocity
    push bp
    mov bp, sp
    push bx
    push ax
    mov bx, [bp + 4] ; controller

    push bx
    push PhysicsComponentId
    call getControllerComponent
    pop bx ; component

    mov ax, bx
    add ax, PhysicsComponentAxisX
    push ax
    call updatePhysicsAxis      ; update x axis

    mov ax, bx
    add ax, PhysicsComponentAxisY
    push ax
    call updatePhysicsAxis      ; update y axis

    pop ax
    pop bx
    pop bp
    ret 2
endp updateVelocity

; input - velocity axis (start of each axis part)
; updates its velocity
proc updatePhysicsAxis
    push bp
    mov bp, sp
    push bx
    push dx
    push si
    push cx
    mov si, [bp + 4]                                ; physics axis
    mov dx, [si + PhysicsComponentAxisFriction]     ; friction
    mov bx, [si + PhysicsComponentAxisVelocity]     ; velocity
    mov cx, [si + PhysicsComponentAxisMaxVelocity]  ; max velocity
    cmp bx, 0
    jl .positiveFriction ; if we go negative
    cmp bx, 0
    jg .negativeFriction ; if we go negative

    mov bx, [si + PhysicsComponentAxisAcceleration] ; accerlation
    add [si], bx                                    ; add velocity acceleration

    jmp .end
.negativeFriction:
    sub bx, dx ; check if the gravity is too much it will become positive, if so reset it
    cmp bx, 0
    jl .resetFriction
    sub [si + PhysicsComponentAxisVelocity], dx

    mov bx, [si + PhysicsComponentAxisAcceleration] ; accerlation
    add [si], bx                                    ; add velocity acceleration

    jmp .limitPositiveVelocity
.positiveFriction:
    add bx, dx ; check if the gravity is too much it will become negative, if so reset it
    cmp bx, 0
    jg .resetFriction
    add [si + PhysicsComponentAxisVelocity], dx
    
    mov bx, [si + PhysicsComponentAxisAcceleration] ; accerlation
    add [si], bx                                    ; add velocity acceleration

    jmp .limitNegativeVelocity
.resetFriction:
    mov [word ptr si + PhysicsComponentAxisVelocity], 0
    jmp .end
.limitPositiveVelocity:
    cmp [si + PhysicsComponentAxisVelocity], cx
    jl .limitNegativeVelocity
    mov [si + PhysicsComponentAxisVelocity], cx
.limitNegativeVelocity:
    neg cx
    cmp [si + PhysicsComponentAxisVelocity], cx
    jg .end
    mov [si + PhysicsComponentAxisVelocity], cx
.end:
    pop cx
    pop si
    pop dx
    pop bx
    pop bp
    ret 2
endp updatePhysicsAxis

; input - physics controller
; adds the velocity to the controllers using the subPixelAmount
; const to enable sub-pixel movement, for example - 0.5 pixels/frame
proc applyVelocity
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push cx
    push si

    mov bx, [bp + 4] ; controller
    mov si, SubPixelAmount

    push bx
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call getControllerWordValue
    pop ax           ; velocity y
    cwd              ; Sign-extend ax into dx:ax
    idiv si          ; div by subPixelAmount
    mov dx, ax       ; dx = new velocity Y

    sal ax, 6  ; ax = y * 64
    sal dx, 8  ; dx = y * 256
    add ax, dx
    mov cx, ax ; cx = y * 320

    push bx
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call getControllerWordValue
    pop ax           ; velocity x
    cwd              ; Sign-extend ax into dx:ax
    idiv si          ; div by subPixelAmount, ax = new velocity X

    add ax, cx ; add velocity Y
    push bx ; controller
    push ax ; addition (velocity y + x)
    push RenderComponentId
    push RenderComponentPosition
    call addControllerWordValue

    pop si
    pop cx
    pop dx
    pop ax
    pop bx
    pop bp
    ret 2
endp applyVelocity

proc updateAndApplyVelocity
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4] ; controller
    push bx
    call updateVelocity
    push bx
    call applyVelocity
    pop bx
    pop bp
    ret 2
endp updateAndApplyVelocity

proc walk
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 6] ; controller
    mov ax, [bp + 4] ; direction X
    cmp ax, 0
    je .skipX
    push bx
    push ax
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call setControllerWordValue
.skipX:
    pop bx
    pop ax
    pop bp
    ret 4
endp walk

proc move2d
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    mov bx, [bp + 8] ; controller
    mov ax, [bp + 6] ; direction X
    mov dx, [bp + 4] ; direction Y

    push bx
    push ax
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call setControllerWordValue

    push bx
    push dx
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
    
    pop dx
    pop bx
    pop ax
    pop bp
    ret 6
endp move2d   

proc jump
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4] ; controller
    cmp [byte ptr KeyStateTable + 39h], 0 ; space scan code
    je .end
    push bx
    push -1 * JumpHeight
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.end:
    pop bx
    pop bp
    ret 2
endp jump

proc getControllerY
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    mov bx, [bp + 4] ; first controller
    push bx
    push RenderComponentId
    push RenderComponentPosition
    call getControllerWordValue
    pop ax
    mov bx, 320
    xor dx, dx
    div bx
    mov [bp + 4], ax ; y
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerY

proc getControllerX
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    mov bx, [bp + 4] ; first controller
    push bx
    push RenderComponentId
    push RenderComponentPosition
    call getControllerWordValue
    pop ax
    mov bx, 320
    xor dx, dx
    div bx
    mov [bp + 4], dx ; x
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerX

proc getControllerYEdges
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    push di
    mov bx, [bp + 4] ; controller
    push bx
    call getControllerY
    pop ax ; top
    push bx
    push RenderComponentId
    push RenderComponentHeight
    call getControllerWordValue
    pop di
    mov dx, ax
    add dx, di       ; bottom
    mov [bp + 6], ax
    mov [bp + 4], dx
    pop di
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerYEdges

proc getControllerXEdges
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    push di
    mov bx, [bp + 4] ; controller
    push bx
    call getControllerX
    pop ax ; left
    push bx
    push RenderComponentId
    push RenderComponentWidth
    call getControllerWordValue
    pop di
    mov dx, ax
    add dx, di       ; right
    mov [bp + 6], ax
    mov [bp + 4], dx
    pop di
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerXEdges

; return the difference in the Y axis between two objects
; input - first controller, second controller
proc isYCollision
   push bp
    mov bp, sp
    push ax
    push bx
    push si
    push di
    push dx
    mov si, [bp + 6] ; first controller
    mov bx, [bp + 4] ; second controller
    push 0 ; garbage value
    push si
    call getControllerYEdges
    pop ax
    pop dx
    push 0 ; garbage value
    push bx
    call getControllerYEdges
    pop bx
    pop si
    push ax
    push dx
    push bx
    push si
    call isAxisCollision
    pop ax
    mov [bp + 6], ax
    pop dx
    pop di
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp isYCollision

; return the difference in the X axis between two objects
; input - first controller, second controller
proc isXCollision
   push bp
    mov bp, sp
    push ax
    push bx
    push si
    push di
    push dx
    mov si, [bp + 6] ; first controller
    mov bx, [bp + 4] ; second controller
    push 0 ; garbage value
    push si
    call getControllerXEdges
    pop ax
    pop dx
    push 0 ; garbage value
    push bx
    call getControllerXEdges
    pop bx
    pop si
    push ax
    push dx
    push bx
    push si
    call isAxisCollision
    pop ax
    mov [bp + 6], ax
    pop dx
    pop di
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp isXCollision

proc areColliding
    push bp
    mov bp, sp
    push ax
    push bx
    push si
    push cx
    push dx
    mov si, [bp + 6] ; first controller
    mov bx, [bp + 4] ; second controller
    push bx
    push si
    call isXCollision
    pop ax
    push bx
    push si
    call isYCollision
    pop dx
    cmp dx, 0
    je .setFalse
    cmp ax, 0
    je .setFalse
    mov cx, ax
    mov si, dx
    test cx, cx
    jns .xIsPositive
    neg cx
.xIsPositive:
    test si, si
    jns .yIsPositive
    neg si
.yIsPositive:
    cmp cx, si
    jb .end
    mov ax, dx
    mov dx, 320
    imul dx
    jmp .end
.setFalse:
    mov ax, 0
.end:
    mov [bp + 6], ax ; change to correctly collide
    pop dx
    pop cx
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp areColliding

; gets the edge points of 2 objects and return the distance between them,
; and 0 if they don't collide
; input - obj1 bigger, obj2 lower, obj1 bigger, obj lower
; lower - (top/left), bigger - (bottom/right)
proc isAxisCollision
    push bp
    mov bp, sp
    push cx
    push dx
    push bx
    push ax

    mov ax, [bp + 10]  ; bottom/right1
    mov bx, [bp + 8]   ; top/left1
    mov dx, [bp + 6]   ; bottom/right2
    mov cx, [bp + 4]   ; top/left2

    ; if bottom1 is less than top2
    cmp ax, cx
    jle .setFalse
    ; if bottom2 is less than top1
    cmp dx, bx
    jle .setFalse

    cmp ax, dx ; 1 is above 2
    ja .set2
    sub ax, cx
    jmp .end
.set2:
    sub bx, dx
    mov ax, bx
    jmp .end
.setFalse:
    mov ax, 0
.end:
    mov [bp + 10], ax
    pop ax
    pop bx
    pop dx
    pop cx
    pop bp
    ret 6
endp isAxisCollision


proc getControllerComponent
    push bp
    mov bp, sp
    push ax
    push bx
    push si

    mov bx, [bp + 6] ; controller
    mov ax, [bp + 4] ; componentId

    mov si, bx
    add si, ControllerComponentData
    dec si

.componentLoop:
    inc si
    mov ah, [si] ; current component id
    cmp al, ah
    jne .componentLoop

    xor ax, ax
    mov al, [si + ComponentLocation]
    add bx, ax

    mov [bp + 6], bx
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp getControllerComponent

proc endAndCleanUp
    push offset previousIRQMask
    call cleanUpClock

    mov ah, 0
    mov al, 2
    int 10h
    mov ax, 4C00h
    int 21h
    ret
endp endAndCleanUp

; input - the segment wrapper
; output - the original object
; note - need to execute end, to return to the normal ds
proc StartLoadFromOtherSegment
    push bp
    mov bp, sp
    push bx
    push ax
    push si
    mov bx, [bp + 4]
    mov [bp + 6], ds
    mov ax, [bx + SegmentWrapperSegment]
    mov si, [bx + SegmentWrapperOriginal]
    mov ds, ax
    mov [bp + 4], si
    pop si
    pop ax
    pop bx
    pop bp
    ret
endp StartLoadFromOtherSegment

; called 1024 times a sec
proc periodic
    push bp
    mov bp, sp
    push bx
    push cx
    push dx
    push ax
    mov bx, [bp + 4]
    inc [word ptr bx]
    cmp [word ptr bx], 1025
    jl .skipReset
    mov [word ptr bx], 0
.skipReset:
    mov ax, [bx]
    mov cx, gameLoopSpeed
    xor dx, dx
    div cx
    cmp dx, 0
    jne .skipGameLoop
    call gameLoop
.skipGameLoop:
    pop ax
    pop dx
    pop cx
    pop bx
    pop bp
    ret 2
endp periodic

; setups the keyboard handler
; input - pointer to the old segment save, another for the offset
proc setupKeyboardHandler
    push bp
    mov bp, sp
    push ax
    push es
    xor ax, ax
    mov es, ax ; set es to IVT
    cli
    ; Save the original ISR address
    mov ax, [word ptr es:9*4]
    mov [bp + 4], ax ; save old offset
    mov ax, [word ptr es:9*4+2]
    mov [bp + 6], ax ; save old segment
    ; Set the new ISR address
    mov [word ptr es:9*4], offset keyboardHandler
    mov [word ptr es:9*4+2], seg keyboardHandler
    sti
    pop es
    pop ax
    pop bp
    ret 4
endp setupKeyboardHandler

proc gameLoop
    push offset directionX
    push offset directionY
    call updateDirection

    push offset animationTime
    call updateAnimationTime

    ; push offset testController
    ; push [directionX]
    ; call walk

    ; push offset testController
    ; call jump

    push offset testController
    push [directionX]
    push [directionY]
    call move2d

    push offset testController
    push [animationTime]
    call updateAnimation

    push offset testController
    call updateAndApplyVelocity

    push offset testController
    push offset borderController
    call handleCollision

    push offset printManager
    push offset testController
    call uploadController

    push offset printManager
    call printAllControllers

    ret
endp gameLoop

proc handleCollision
    push bp
    mov bp, sp
    push bx
    push ax
    mov bx, [bp + 6] ; controller
    push bx
    push [bp + 4] ; collider
    call areColliding
    pop ax ; amount to move
    cmp ax, 0
    je .end
    push bx
    push ax
    push RenderComponentId
    push RenderComponentPosition
    call addControllerWordValue
.end:
    pop ax
    pop bx
    pop bp
    ret 4
endp handleCollision

start:
    mov ax, @data
    mov ds, ax
    mov ax, 13h
    int 10h
    mov ax, 0A000h
    mov es, ax

    push offset palette
    call setPalette

    call clearScreen

; *******************INIT**************
; Note - here order is important, because they save their background here
    push 0
    push offset screenImageWrapper
    call StartLoadFromOtherSegment

    push 0
    call printImage

    pop ds

    push offset backgroundImage
    push (320 * 36) + 96
    call printImage

    push offset testController
    push (320 * 10) + 10
    call initController

    push offset borderController
    push (100 * 320) + 120
    call initController

; **************************************

    push offset oldKeyboardHandlerSegment
    push offset oldKeyboardHandlerOffset
    call setupKeyboardHandler

    push offset previousIRQMask
    call setUpClock

keepAliveLoop:
    jmp keepAliveLoop
exit:
    call endAndCleanUp
END start
