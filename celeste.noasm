IDEAL
MODEL small
STACK 100h

DATASEG

; *********************************IMAGES *****************************************
palette dw 4
db 0,0,0,14,14,14,63,63,63,36,37,37

cursorImage db ImageId
dw 10, 11
db 7 dup(2),-1,-1,-1,2,1,4 dup(0),1,2,-1,-1,2,5 dup(0),1,2,-1,-1,2,4 dup(0),2,2,3,-1,-1,2,4 dup(0),1,2,-1,-1,-1,2,0,0,2,1,0,1,2,-1,-1,2,1,1,2,2,1,0,1,2,-1,3,2,2,3,3,2,1,0,1,2,-1,3,3,-1,-1,3,2,1,0,2
db 6 dup(-1),3,2,2,3,7 dup(-1),3,3,-1

ballRect db RectId
dw 3, 3
db 2

leftPlayerController db 3
db PhysicsComponentId
db 7
db RenderComponentId
db 23
dw 1 dup(0)
dw 0, 0, 0, 100  ; vx, ax, fx, mx
dw 0, 0, 20, 100  ; vy, ay, fy, my
dw 0, offset playerRect, seg playerRect, 0, 0, 5, 30 ; pos, image, prev-pos, rotation, width, height
db 5*30 dup(0) ; background save place

ballController db 2
db PhysicsComponentId
db 5
db RenderComponentId
db 21
dw -16*4, 0, 0, 3000  ; vx, ax, fx, mx
dw -16*4, 0, 0, 3000  ; vy, ay, fy, my
dw 0, offset ballRect, seg ballRect, 0, 0, 3, 3 ; pos, image, prev-pos, rotation, width, height
db 3*3 dup(0) ; background save place

borderUp db 1
db RenderComponentId
db 3
dw 0, 0, 0, 0, 0, 320, 1 ; pos, image, prev-pos, rotation, width, height
db 320*1 dup(0) ; background save place

borderLeft db 1
db RenderComponentId
db 3
dw 0, 0, 0, 0, 0, 1, 320 ; pos, image, prev-pos, rotation, width, height
db 320*1 dup(0) ; background save place

borderRight db 1
db RenderComponentId
db 3
dw 319, 0, 0, 0, 0, 1, 320 ; pos, image, prev-pos, rotation, width, height
db 320*1 dup(0) ; background save place

borderDown db 1
db RenderComponentId
db 3
dw 199*320, 0, 0, 0, 0, 320, 1 ; pos, image, prev-pos, rotation, width, height
db 320*1 dup(0) ; background save place

mouseController db 2
db RenderComponentId
db 5
db MouseComponentId
db 129
dw (320*20)+315, offset cursorImage, seg cursorImage, 0, 0, 10, 11 ; pos, image, prev-pos, rotation, width, height
db 10*11 dup(0) ; background save place
db 0, 0 ; left click, right click

directionX dw 0
directionY dw 0

vector1 dw 0, 0
vector2 dw 0, 0

; *********************************OFFSET CONSTANTS*********************************

VideoMemory equ 0A000h
RaycastPrecision equ 128
ScreenWidth equ 320
ScreenHeight equ 200

PhysicsComponentId            equ 4
PhysicsComponentAxisX         equ 0
PhysicsComponentVelocityX     equ 0
PhysicsComponentAccelerationX equ 2
PhysicsComponentFrictionX     equ 4
PhysicsComponentMaxVelocityX  equ 6
PhysicsComponentAxisY         equ 8
PhysicsComponentVelocityY     equ 8
PhysicsComponentAccelerationY equ 10
PhysicsComponentFrictionY     equ 12
PhysicsComponentMaxVelocityY  equ 14

; ********************************************

PhysicsComponentAxisVelocity     equ 0
PhysicsComponentAxisAcceleration equ 2
PhysicsComponentAxisFriction     equ 4
PhysicsComponentAxisMaxVelocity  equ 6

; ********************************************

AnimatorComponentId                    equ 3
AnimatorComponentCurrentAnimationIndex equ 0
AnimatorComponentCurrentFrameIndex     equ 1
AnimatorComponentAnimationAmount       equ 2
AnimatorComponentData                  equ 3

AnimationId         equ 2
AnimationSize       equ 1
AnimationSpeed      equ 2
AnimationData       equ 3

ArrayId              equ 8
ArraySize            equ 1
ArrayElementSize     equ 3
ArrayData            equ 5

Array2DId               equ 9
Array2DColumns          equ 1
Array2DRows             equ 3
Array2DElementSize      equ 5
Array2DData             equ 7

; ********************************************

RenderComponentId                  equ 1
RenderComponentPosition            equ 0
RenderComponentImageOffset         equ 2
RenderComponentImageSegment        equ 4
RenderComponentPreviousPosition    equ 6
RenderComponentRotation            equ 8
RenderComponentWidth               equ 10
RenderComponentHeight              equ 12
RenderComponentBackground          equ 14

; ********************************************

MouseComponentId           equ 7
MouseComponentLeftPressed  equ 0
MouseComponentRightPressed equ 1
MouseComponentLeftClicked  equ 2
MouseComponentRightClicked equ 3

; ********************************************

ControllerMaxComponentAmount equ 0
ControllerComponentData      equ 1

ComponentId       equ 0
ComponentLocation equ 1

VectorX equ 0
VectorY equ 2

ImageId     equ 11
ImageWidth  equ 1
ImageHeight equ 3
ImageData   equ 5

RectId     equ 10
RectWidth  equ 1
RectHeight equ 3
RectColor  equ 5

PaletteLength equ 0
PaletteData   equ 2

PrintManagerId               equ 5
PrintManagerControllerAmount equ 1
PrintManagerData             equ 2

SegmentWrapperId       equ -1
SegmentWrapperSegment  equ 1
SegmentWrapperOriginal equ 3

MallocManagerId                equ 12
MallocManagerAllocationAmount  equ 1

playerRect db RectId
dw 5, 30
db 2

rightPlayerController db SegmentWrapperId
dw mallocSegment, offset segmentedRightPlayerController

; *********************************CONTROLLERS START********************************


; *********************************ANIMATIONS START********************************


; *********************************OBJECTS START********************************

KeyStateTable db 256 dup(0) ; Table to store key states (0 = released, 1 = pressed)

DirectionMultiplier equ 16*5
JumpHeight equ 16*4

SubPixelAmount equ 16

; *********************************GENERAL START********************************

animationTime dw 0
gameSpeed equ 50 ; in ms (to calculate FPS -> 1024 / FPS)
globalTime dw 0  ; in ms

; Declare variables to store the old ISR
oldKeyboardHandlerOffset dw ?
oldKeyboardHandlerSegment dw ?

; Save the original mask for restoration
previousIRQMask db ?

printManager db PrintManagerId, 0
dw 50 dup(0)

; segment screenBuffer
;     screen db 64000 dup(0)
; ends

segment mallocSegment

; mallocManager db MallocManagerId

segmentedRightPlayerController db 3
db PhysicsComponentId
db 7
db RenderComponentId
db 23
dw 1 dup(0)
dw 0, 0, 0, 100  ; vx, ax, fx, mx
dw 0, 0, 20, 100  ; vy, ay, fy, my
dw 0, offset playerRect, seg playerRect, 0, 0, 5, 30 ; pos, image, prev-pos, rotation, width, height
db 5*30 dup(0) ; background save place

ends

; **********YOUR SHIT*********** ;

CODESEG

; input - Mouse pointer
proc initMouse
    push bp
    mov bp, sp
    push ax
    mov ax, 0 ; init Mouse
    int 33h
    mov ax, 2 ; disable default mouse icon
    int 33h
    push [bp + 4]                  ; mouse pointer
    push (100 * ScreenWidth) + 160 ; init to the middle of the screen
    call initController
    pop ax
    pop bp
    ret 2
endp initMouse

proc updateMouse
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push cx
    push di
    push ds

    push 0
    push [bp + 4] ; controller
    call resolvePointer
    pop di ; controller
    pop ds ; update the segment

    ; --- Get mouse position and buttons ---
    mov ax, 3
    int 33h           ; cx -> x, dx -> y, bx -> button status
    shr cx, 1         ; convert x from 0–639 to 0–319

    ; --- Store updated position ---
    push cx           ; x
    push dx           ; y
    call toPosition
    pop ax            ; ax -> position

    push di           ; controller
    push ax           ; position
    push RenderComponentId
    push RenderComponentPosition
    call setControllerWordValue

    ; --- Access Mouse component from controller ---
    push di
    push MouseComponentId
    call getControllerComponent
    pop di            ; di = mouse component pointer

    ; --- Extract button states ---
    mov al, bl
    and al, 1         ; al -> left button (bit 0)

    mov ah, bl
    shr ah, 1
    and ah, 1         ; ah -> right button (bit 1)

    ; === Detect Left Click ===
    mov bh, al                                ; current left
    mov bl, [di + MouseComponentLeftPressed]  ; previous left
    not bl
    and bl, bh
    and bl, 1
    mov [di + MouseComponentLeftClicked], bl

    ; === Detect Right Click ===
    mov bh, ah
    mov bl, [di + MouseComponentRightPressed]
    not bl
    and bl, bh
    and bl, 1
    mov [di + MouseComponentRightClicked], bl

    ; --- Save current button states ---
    mov [di + MouseComponentLeftPressed], al
    mov [di + MouseComponentRightPressed], ah

    pop ds
    pop di
    pop cx
    pop dx
    pop ax
    pop bx
    pop bp
    ret 2
endp updateMouse

proc keyboardHandler far              
	push ax
	push bx
    push cx
    push dx
	push di
	push si
	; read keyboard scan code
    in al, 60h

	; update keyboard state
    xor bh, bh
    mov bl, al
    and bl, 7Fh     ; bl = scan code
	
	; save to the keyboard array
    push cx
	mov cx, 7
    shr al, cl ; al = 0 if pressed, 1 if released
	pop cx
    xor al, 1  ; al = 1 if pressed, 0 if released
    mov [cs:KeyStateTable + bx], al  ; save pressed buttons in array
	
	; send EOI to XT keyboard
    in  al, 61h
    mov ah, al
    or  al, 80h
    out 61h, al
    mov al, ah
    out 61h, al

	; send EOI to master PIC
    mov al, 20h
    out 20h, al
	
    pop si
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    iret
endp keyboardHandler

; interrupt that hooks on to int70h
; that is called by the computer
; and call the "periodic" method 1024 times a sec
proc clock far
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    push ds
    ; Preserve port 70h contents
    in al, 70h
    mov bx, ax
    ; Read status register C to acknowledge RTC interrupt
    mov al, 0Ch
    out 70h, al
    mov al, 8Ch
    out 70h, al
    in al, 71h
    ; Restore port 70h contents
    mov ax, bx
    out 70h, al
    ; Notify PICs that interrupt is handled
    mov al, 20h
    out 0A0h, al
    out 020h, al
    push offset globalTime
    call periodic ; every tick (1024 times a sec)
    pop ds
    pop dx
    pop bx
    pop ax
    pop bp
    iret
endp clock

; setup the game clock
proc setUpClock
    push bp
    mov bp, sp
    push ax
    push ds
    push dx

    cli
    ; Save original mask of secondary PIC
    in al, 0A1h
    mov [bp + 4], al
    and al, 0FEh ; Enable IRQ 8 (RTC)
    out 0A1h, al

    ; Set frequency divisor in RTC register A
    mov al, 0Ah
    out 70h, al
    mov al, 8Ah
    out 70h, al
    in al, 71h
    and al, 11110000b ; Clear rate bits
    or al, 0110b      ; Set rate to 1024 Hz
    out 71h, al
    in al, 71h        ; Ensure the write is complete

    ; Enable periodic interrupts in RTC register B
    mov al, 0Bh
    out 70h, al
    mov al, 8Bh
    out 70h, al
    in al, 71h
    or al, 40h        ; Set PI (bit 6)
    out 71h, al
    in al, 71h        ; Acknowledge the change

    ; Set new interrupt handler for interrupt 70h
    mov al, 70h       ; Interrupt vector 70h
    mov ah, 25h       ; Set interrupt vector
    mov dx, offset clock ; Offset of the ISR
    push seg clock
    pop ds
    int 21h
    sti

    pop dx
    pop ds
    pop ax
    pop bp
    ret 2
endp setUpClock

; clean up the game's clock
proc cleanUpClock
    push bp
    mov bp, sp
    push ax
    ; Restore original mask of secondary PIC
    mov al, [bp + 4] ; mask pointer
    out 0A1h, al
    pop ax
    pop bp
    ret 2
endp cleanUpClock

; ***********************GENERAL GETTERS*********************

proc getControllerWordValue
    push bp
    mov bp, sp
    push bx
    push ds

    push 0
    push [bp + 8]  ; controller
    call resolvePointer
    pop bx ; controller
    pop ds ; update the segment

    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx

    add bx, [bp + 4] ; parameter
    mov bx, [bx]

    mov [bp + 8], bx

    pop ds
    pop bx
    pop bp
    ret 4
endp getControllerWordValue

proc getControllerWordOffset
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 8] ; controller pointer
    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx
    add bx, [bp + 4] ; parameter
    mov [bp + 8], bx
    pop bx
    pop bp
    ret 4
endp getControllerWordOffset

proc getControllerByteValue
    push bp
    mov bp, sp
    push bx
    push ds

    push 0
    push [bp + 8]  ; controller
    call resolvePointer
    pop bx ; controller
    pop ds ; update the segment

    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx

    add bx, [bp + 4] ; parameter
    mov bl, [bx]
    mov bh, 0
    mov [bp + 8], bx

    pop ds
    pop bx
    pop bp
    ret 4
endp getControllerByteValue

; ***********************GENERAL SETTERS*********************

proc setControllerWordValue
    push bp
    mov bp, sp
    push ax
    push bx
    push ds

    push 0
    push [bp + 10]  ; controller
    call resolvePointer
    pop bx ; controller
    pop ds ; update the segment

    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx

    add bx, [bp + 4] ; parameter
    mov ax, [bp + 8] ; value
    mov [bx], ax

    pop ds
    pop bx
    pop ax
    pop bp
    ret 8
endp setControllerWordValue

proc addControllerWordValue
    push bp
    mov bp, sp
    push ax
    push bx
    push ds

    push 0
    push [bp + 10]  ; controller
    call resolvePointer
    pop bx ; controller
    pop ds ; update the segment

    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx

    add bx, [bp + 4] ; parameter
    mov ax, [bp + 8] ; addition
    add [bx], ax

    pop ds
    pop bx
    pop ax
    pop bp
    ret 8
endp addControllerWordValue

proc setControllerByteValue
    push bp
    mov bp, sp
    push ax
    push bx
    
    mov bx, [bp + 10] ; controller pointer
    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx
    add bx, [bp + 4] ; parameter
    mov al, [bp + 8] ; value
    mov [bx], al

    pop bx
    pop ax
    pop bp
    ret 8
endp setControllerByteValue

proc addControllerByteValue
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 10] ; controller pointer
    push bx
    push [bp + 6] ; componentId
    call getControllerComponent
    pop bx
    add bx, [bp + 4] ; parameter
    mov al, [bp + 8] ; addition
    add [bx], al
    pop bx
    pop ax
    pop bp
    ret 8
endp addControllerByteValue

; ****************************************

; input - word directionX pointer, word directionY pointer
proc updateDirection
    push bp
    mov bp, sp
    push ax
    push si
    push di
    mov si, [bp + 6]  ; directionX pointer
    mov di, [bp + 4]  ; directionY pointer
    mov [word ptr si], 0
    mov [word ptr di], 0
    cmp [byte ptr KeyStateTable + 1Eh], 1 ; Check if 'A' key is pressed (scan code 1Eh)
    je .setLeft
    cmp [byte ptr KeyStateTable + 20h], 1  ; Check if 'D' key is pressed (scan code 20h)
    je .setRight
    jmp .checkY
.setLeft:
    mov [word ptr si], -1 * DirectionMultiplier
    jmp .checkY
.setRight:
    mov [word ptr si], DirectionMultiplier
.checkY:
    cmp [byte ptr KeyStateTable + 11h], 1 ; Check if 'W' key is pressed (scan code 11h)
    je .setUp
    cmp [byte ptr KeyStateTable + 1Fh], 1 ; Check if 'S' key is pressed (scan code 1Fh)
    je .setDown
    jmp .end
.setUp:
    mov [word ptr di], -1 * DirectionMultiplier
    jmp .end
.setDown:
    mov [word ptr di], DirectionMultiplier
.end:
    pop di
    pop si
    pop ax
    pop bp
    ret 4
endp updateDirection

; clears the screen (turns all pixels to 0)
proc clearScreen
    push di
    push ax
    push es
    mov ax, VideoMemory
    mov es, ax
    mov di, ScreenHeight * ScreenWidth
.clearLoop:
    mov [byte ptr es:di], 0
    dec di
    jnz .clearLoop
    pop es
    pop ax
    pop di
    ret
endp clearScreen

; input - palette pointer
; sets it to the screen's palette
proc setPalette
    push bp
    mov bp, sp
    push ax
    push si
    push cx
    push dx
	mov si, [bp + 4]
	mov cx, [si + PaletteLength]
    add si, PaletteData
	mov dx, 3C8h
	mov al, 0
	out dx, al ; copy starting color to port 3C8h
	inc dx     ; copy palette itself to port 3C9h
.setLoop:
	mov al, [si]   ; red
	out dx, al
	mov al, [si + 1] ; green
	out dx, al
	mov al, [si + 2] ; blue
	out dx, al
	add si, 3      ; move to next color
	loop .setLoop
    pop dx
    pop cx
    pop si
    pop ax
    pop bp
	ret 2
endp setPalette

proc printRect
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 6] ; rect pointer
    push [bx + RectColor]
    push [bx + RectWidth]
    push [bx + RectHeight]
    push [bp + 4] ; screen position (left top)
    call printRectBySize
    pop bx
    pop bp
    ret 4
    ret
endp printRect

proc clampSizeToScreenBounds
    push bp
    mov bp, sp
    push ax
    push dx
    push bx
    push cx
    push si

    mov bx, [bp + 8] ; width
    mov si, [bp + 6] ; height

    push 0
    push [bp + 4] ; position
    call toXandY
    pop dx ; dx -> x
    pop ax ; ax -> y

    ; if position is out of bounds skip draw
    cmp ax, ScreenHeight
    jge .skipDraw
    cmp dx, ScreenWidth
    jge .skipDraw

    ; Clamp width to screen bounds if necessary
    add dx, bx
    cmp dx, ScreenWidth
    jl .checkHeight

    sub dx, ScreenWidth
    sub bx, dx ; bx -> new width

.checkHeight:
    ; Clamp height to screen bounds if necessary
    add ax, si
    cmp ax, ScreenHeight
    jl .end

    sub ax, ScreenHeight
    sub si, ax ; si -> new height

    jmp .end
.skipDraw:
    mov cx, -1
.end:
    mov [bp + 4], bx ; new width
    mov [bp + 6], si ; new height
    mov [bp + 8], cx ; flag (-1 = skip)

    pop si
    pop cx
    pop bx
    pop dx
    pop ax
    pop bp
    ret
endp clampSizeToScreenBounds

proc printRectBySize
    push bp
    mov bp, sp
    push di
    push ax
    push bx
    push cx
    push dx
    push si
    push es
    mov ax, VideoMemory ; set the print location
    mov es, ax
    
    mov bx, [bp + 10] ; color
    mov dx, [bp + 8]  ; width
    mov cx, [bp + 6]  ; height
    mov di, [bp + 4]  ; screen start position

    cmp bl, -1 ; skip draw if color is transparent
    je .end

    ; Adjust size to screen boundaries
    push dx
    push cx
    push di
    call clampSizeToScreenBounds
    pop dx  ; adjusted width
    pop cx  ; adjusted height
    pop ax  ; skip draw flag

    cmp ax, -1
    je .end ; skip draw if completely out of bounds

    ; di = current screen position
    ; dx = width
    ; bx = color
    ; cx = height counter
    ; si = x counter within current row

    mov si, 0
.printLoop:
    mov [byte ptr es:di], bl ; draw pixel
.skipPixel:
    inc di         ; next screen pixel
    inc si
    cmp si, dx     ; if row not done, continue
    jne .printLoop
; move to next row
    add di, ScreenWidth
    sub di, dx     ; move to next row
    xor si, si     ; reset x counter
    dec cx
    jnz .printLoop ; repeat for next row
.end:
    pop es
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    pop di
    pop bp
    ret 8
endp printRectBySize

proc printImageBySize
    push bp
    mov bp, sp
    push di
    push ax
    push bx
    push cx
    push dx
    push si
    push es
    mov ax, VideoMemory
    mov es, ax ; set the print location

    mov bx, [bp + 10] ; image color array
    mov dx, [bp + 8]  ; image width
    mov cx, [bp + 6]  ; image height
    mov di, [bp + 4]  ; screen start position

    ; Adjust size to screen boundaries
    push dx
    push cx
    push di
    call clampSizeToScreenBounds
    pop dx  ; adjusted width
    pop cx  ; adjusted height
    pop ax  ; skip draw flag

    cmp ax, -1
    je .end ; skip drawing if completely out of bounds

    ; di = current screen position
    ; bx = points the current color in image array
    ; dx = image width
    ; cx = image height counter
    ; si = x counter within current row

    xor si, si
.printLoop:
    mov al, [byte ptr bx]    ; get color
    cmp al, -1
    je .skipPixel            ; skip if transparent pixel (-1)
    mov [byte ptr es:di], al ; draw pixel
.skipPixel:
    inc di                   ; next screen pixel
    inc bx                   ; next image pixel
    inc si
    cmp si, dx
    jne .printLoop           ; if row not done, continue
; move to next row
    add di, ScreenWidth
    sub di, dx               ; move to next row

    mov ax, [bp + 8]         ; move to next color row
    sub ax, dx               ; add (original width - new width)
    add bx, ax

    xor si, si               ; reset x counter
    dec cx
    jnz .printLoop           ; repeat for next row
.end:
    pop es
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    pop di
    pop bp
    ret 8
endp printImageBySize

; input - image pointer, position (left top corner)
; prints the image at the specified location
proc printImage
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 6] ; image pointer

    mov ax, bx
    add ax, ImageData
    push ax ; image data (colors)
    push [bx + ImageWidth]
    push [bx + ImageHeight]
    push [bp + 4] ; screen position (left top)
    call printImageBySize

    pop bx
    pop ax
    pop bp
    ret 4
endp printImage

; input - controller pointer
; prints it to the screen
proc printController
    push bp
    mov bp, sp
    push di
    push bx
    push ax
    push ds
    push es

    push 0
    push [bp + 4] ; controller
    call resolvePointer
    pop bx ; controller
    pop ds ; update the segment

    push bx ; controller
    push RenderComponentId
    call getControllerComponent
    pop di ; component

    mov ax, ds
    mov es, ax ; component may need a different segment than image

    mov bx, [es:di + RenderComponentImageOffset]
    mov ds, [es:di + RenderComponentImageSegment]

    mov al, [bx] ; image type

    cmp al, RectId
    jz .isRect
    cmp al, ImageId
    jz .isImage
    cmp al, ArrayId
    jz .isArray

    jmp .end
.isRect:
    push bx ; image
    push [es:di + RenderComponentPosition]
    call printRect
    jmp .end
.isArray:
    push bx ; image
    push [es:di + RenderComponentRotation]
    call getArrayElement
    push [es:di + RenderComponentPosition]
    call printImage
    jmp .end
.isImage:
    push bx ; image
    push [es:di + RenderComponentPosition]
    call printImage
.end:
    pop es
    pop ds
    pop ax
    pop bx
    pop di
    pop bp
    ret 2
endp printController

; saves the background to the controller so it could move
; without affecting the background
proc saveController
    push bp
    mov bp, sp
    push di
    push bx
    push cx
    push dx
    push si
    push ax
    push es
    push ds
    
    mov ax, VideoMemory ; set the input location
    mov es, ax

    push 0
    push [bp + 4]  ; controller
    call resolvePointer
    pop bx ; controller
    pop ds ; update the segment
    
    push bx ; controller
    push RenderComponentId
    call getControllerComponent
    pop di ; component

    mov bx, di
    add bx, RenderComponentBackground ; bx -> background saving place

    mov cx, [di + RenderComponentHeight]
    mov dx, [di + RenderComponentWidth]
    mov di, [di + RenderComponentPosition]

    mov si, 0  ; width counter
.saveLoop:
    mov al, [es:di] ; get color from screen
    mov [bx], al    ; save the color to the background array
    inc di
    inc bx
    inc si
    cmp si, dx ; if reached end of the row
    jne .saveLoop
    add di, ScreenWidth
    sub di, dx ; point to the next column
    xor si, si
    dec cx
    jnz .saveLoop

    pop ds
    pop es
    pop ax
    pop si
    pop dx
    pop cx
    pop bx
    pop di
    pop bp
    ret 2
endp saveController

proc printBackground
    push bp
    mov bp, sp
    push di
    push dx
    push ds
    
    push 0
    push [bp + 4] ; controller
    call resolvePointer
    pop di ; controller
    pop ds ; update the segment

    push di
    push RenderComponentId
    call getControllerComponent
    pop di ; component

    mov dx, di
    add dx, RenderComponentBackground
    push dx ; to give its location, and not its value
    push [di + RenderComponentWidth]
    push [di + RenderComponentHeight]
    push [di + RenderComponentPreviousPosition]
    call printImageBySize

    mov dx, [di + RenderComponentPosition]
    mov [di + RenderComponentPreviousPosition], dx

    pop ds
    pop dx
    pop di
    pop bp
    ret 2
endp printBackground

; input - controller pointer, word init position
; init the controller to the set position (saves the background, prints and moves to the location)
proc initController
    push bp
    mov bp, sp
    push di
    push ax
    push bx
    push ds

    mov di, [bp + 6] ; controller pointer
    mov ax, [bp + 4] ; set position

    push 0
    push di ; controller
    call resolvePointer
    pop di ; controller
    pop ds ; update the segment

    push di
    push RenderComponentId
    call getControllerComponent
    pop bx ; component

    mov [bx + RenderComponentPosition], ax
    mov [bx + RenderComponentPreviousPosition], ax
    
    push di
    call saveController
    push di
    call printController

    pop ds
    pop bx
    pop ax
    pop di
    pop bp
    ret 4
endp initController

; input - animated controller pointer
; moves the current animation a frame (if last frame resets it)
proc moveToNextAnimationFrame
    push bp
    mov bp, sp
    push di
    push bx
    push ax
    mov di, [bp + 4] ; controller pointer
    xor ax, ax
    push di
    call getCurrentAnimation
    pop bx ; current animation
    push di
    push AnimatorComponentId
    call getControllerComponent
    pop di ; component
    mov bl, [bx + AnimationSize]                      ; animation size
    mov al, [di + AnimatorComponentCurrentFrameIndex] ; current frame number
    inc al                                            ; next frame
    cmp al, bl
    jne .end
    mov al, 0
.end:
    mov [di + AnimatorComponentCurrentFrameIndex], al ; set the frame
    pop ax
    pop bx
    pop di
    pop bp
    ret 2
endp moveToNextAnimationFrame

; input - controller pointer, byte animation number
; sets the current animation by number (first is 0, second is 1...)
proc setAnimation
    push bp
    mov bp, sp
    push di
    push ax
    xor ax, ax
    mov al, [bp + 4] ; animation number
    mov di, [bp + 6] ; controller pointer
    push di
    push AnimatorComponentId
    call getControllerComponent
    pop di ; animator component
    mov [byte ptr di + AnimatorComponentCurrentAnimationIndex], al  ; set current animation
    mov [byte ptr di + AnimatorComponentCurrentFrameIndex], 0       ; set current frame 0
    pop ax
    pop di
    pop bp
    ret 4
endp setAnimation

proc getFrameImage
    push bp
    mov bp, sp
    push bx
    push si

    mov bx, [bp + 6] ; animation
    mov si, [bp + 4] ; frame index

    add bx, AnimationData ; first animation
    add bx, si
    add bx, si ; current animation (every anim is a word)

    mov bx, [bx]
    mov [bp + 6], bx

    pop si
    pop bx
    pop bp
    ret 2
endp getFrameImage

; input - animated controller, current time (0-255)
; updates it's current animation
proc updateAnimation
    push bp
    mov bp, sp
    push ax
    push bx
    push di
    push cx
    mov di, [bp + 6] ; controller pointer
    mov al, [bp + 4] ; current time

    push di
    call getCurrentAnimation
    pop bx
    
    mov ch, [bx + AnimationSpeed] ; animation speed
    div ch ; ah - time % speed
    cmp ah, 0
    jne .end

    push di
    call moveToNextAnimationFrame

    push di
    push AnimatorComponentId
    push AnimatorComponentCurrentFrameIndex
    call getControllerByteValue
    pop cx
    mov ch, 0 ; cl = current frame index

    push bx
    push cx
    call getFrameImage
    pop bx

    push di
    push bx
    push RenderComponentId
    push RenderComponentImageOffset
    call setControllerWordValue

.end:
    pop cx
    pop di
    pop bx
    pop ax
    pop bp
    ret 4
endp updateAnimation

; updates animation time
proc updateAnimationTime
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4]    ; time pointer
    cmp [byte ptr bx], 255
    jne .continue
    mov [byte ptr bx], 0
.continue:
    inc [byte ptr bx]
    pop bx
    pop bp
    ret 2
endp updateAnimationTime

; proc printScreenBuffer
;     push bp
;     mov bp, sp
;     push ds
;     push di
;     push ax
;     push es
;     mov ax, VideoMemory
;     mov es, ax
;     mov ax, [bp + 4] ; buffer segment
;     mov ds, ax

;     mov di, 0
; .printLoop:
;     mov al, [di]
;     mov [byte ptr es:di], al

;     inc di
;     cmp di, 64001
;     jnz .printLoop


;     pop es
;     pop ax
;     pop di
;     pop ds
;     pop bp
;     ret 2
; endp printScreenBuffer

; input - printManager pointer
; prints all the controllers
proc printAllControllers
    push bp
    mov bp, sp
    push bx
    push cx
    push si
    mov si, [bp + 4] ; offset printManager
    add si, PrintManagerControllerAmount
    mov bx, si
    mov cl, [byte ptr bx] ; amount of controllers
.printBackgroundLoop:
    cmp cl, 0
    je .printBackgroundEnd
    push [bx + 1]      ; controller pointer
    call printBackground
    add bx, 2
    dec cl
    jmp .printBackgroundLoop
.printBackgroundEnd:
    mov bx, si
    mov cl, [byte ptr bx] ; amount of controllers
.saveLoop:
    cmp cl, 0
    je .saveEnd
    push [bx + 1]      ; controller pointer
    call saveController
    add bx, 2
    dec cl
    jmp .saveLoop
.saveEnd:
    mov bx, si
    mov cl, [byte ptr bx] ; amount of controllers
    mov [byte ptr bx], 0
.printImageLoop:
    cmp cl, 0
    je .end
    push [bx + 1]      ;  controller pointer
    call printController
    mov [word ptr bx + 1], 0
    add bx, 2
    dec cl
    jmp .printImageLoop
.end:
    pop si
    pop cx
    pop bx
    pop bp
    ret 2
endp printAllControllers

; input - printManager pointer, controller pointer
; uploads the controller to the manager
proc uploadController
    push bp
    mov bp, sp
    push bx
    push di
    push ax
    mov bx, [bp + 6] ; printManager pointer
    mov di, [bp + 4] ; controller pointer
    xor ax, ax
    mov al, [byte ptr bx + PrintManagerControllerAmount] ; amount of controllers
    inc [byte ptr bx + PrintManagerControllerAmount]     ; inc the amount of controllers
    shl ax, 1 ; every pointer is a word
    add bx, ax
    mov [bx + PrintManagerData], di  ; upload it
    pop ax
    pop di
    pop bx
    pop bp
    ret 4
endp uploadController

; input - animated controller
; returns the current animation
proc getCurrentAnimation
    push bp
    mov bp, sp
    push di
    push bx
    mov di, [bp + 4] ; controller pointer

    push di
    push AnimatorComponentId
    call getControllerComponent
    pop di ; component

    xor bx, bx
    mov bl, [di + AnimatorComponentCurrentAnimationIndex]  ; current animation index
    add di, AnimatorComponentData ; animation list
    shl bx, 1                     ; each animation is a word         
    add di, bx                    ; current animation
    mov di, [di]                  ; get the pointer to anim and not the pointer to the pointer
    mov [bp + 4], di

    pop bx
    pop di
    pop bp
    ret
endp getCurrentAnimation

; input - velocity controller
; update its velocity (x and y)
proc updateVelocity
    push bp
    mov bp, sp
    push bx
    push ax
    mov bx, [bp + 4] ; controller

    push bx
    push PhysicsComponentId
    call getControllerComponent
    pop bx ; component

    mov ax, bx
    add ax, PhysicsComponentAxisX
    push ax
    call updatePhysicsAxis      ; update x axis

    mov ax, bx
    add ax, PhysicsComponentAxisY
    push ax
    call updatePhysicsAxis      ; update y axis

    pop ax
    pop bx
    pop bp
    ret 2
endp updateVelocity

; input - velocity axis (start of each axis part)
; updates its velocity
proc updatePhysicsAxis
    push bp
    mov bp, sp
    push bx
    push dx
    push si
    push cx
    mov si, [bp + 4]                                ; physics axis
    mov dx, [si + PhysicsComponentAxisFriction]     ; friction
    mov bx, [si + PhysicsComponentAxisVelocity]     ; velocity
    mov cx, [si + PhysicsComponentAxisMaxVelocity]  ; max velocity
    cmp bx, 0
    jl .positiveFriction ; if we go negative
    cmp bx, 0
    jg .negativeFriction ; if we go negative

    mov bx, [si + PhysicsComponentAxisAcceleration] ; accerlation
    add [si], bx                                    ; add velocity acceleration

    jmp .end
.negativeFriction:
    sub bx, dx ; check if the gravity is too much it will become positive, if so reset it
    cmp bx, 0
    jl .resetFriction
    sub [si + PhysicsComponentAxisVelocity], dx

    mov bx, [si + PhysicsComponentAxisAcceleration] ; accerlation
    add [si], bx                                    ; add velocity acceleration

    jmp .limitPositiveVelocity
.positiveFriction:
    add bx, dx ; check if the gravity is too much it will become negative, if so reset it
    cmp bx, 0
    jg .resetFriction
    add [si + PhysicsComponentAxisVelocity], dx
    
    mov bx, [si + PhysicsComponentAxisAcceleration] ; accerlation
    add [si], bx                                    ; add velocity acceleration

    jmp .limitNegativeVelocity
.resetFriction:
    mov [word ptr si + PhysicsComponentAxisVelocity], 0
    jmp .end
.limitPositiveVelocity:
    cmp [si + PhysicsComponentAxisVelocity], cx
    jl .limitNegativeVelocity
    mov [si + PhysicsComponentAxisVelocity], cx
.limitNegativeVelocity:
    neg cx
    cmp [si + PhysicsComponentAxisVelocity], cx
    jg .end
    mov [si + PhysicsComponentAxisVelocity], cx
.end:
    pop cx
    pop si
    pop dx
    pop bx
    pop bp
    ret 2
endp updatePhysicsAxis

; input - value min max
; returns the clamp of a value by: max(minimum, min(x, maximum))
proc getClamp
    push bp
    mov bp, sp
    push ax

    push [bp + 6] ; min

    push [bp + 8] ; value
    push [bp + 4] ; max
    call getMin
    call getMax
    pop ax
    mov [bp + 8], ax

    pop ax
    pop bp
    ret 4
endp getClamp


; width height x y
proc getClampedPosition
    push bp
    mov bp, sp
    push ax
    push cx
    push dx

    mov ax, ScreenWidth
    sub ax, [bp + 10] ; width

    push [bp + 6]     ; x
    push 0
    push ax
    call getClamp
    pop cx

    mov ax, ScreenHeight
    sub ax, [bp + 8] ; height

    push [bp + 4]    ; y
    push 0
    push ax
    call getClamp
    pop dx

    push cx ; x
    push dx ; y
    call toPosition ; new position
    pop [bp + 10]

    pop dx
    pop cx
    pop ax
    pop bp
    ret 6
endp getClampedPosition

; input - physics controller
; adds the velocity to the controllers using the subPixelAmount
; const to enable sub-pixel movement, for example - 0.5 pixels/frame
proc applyVelocity
    push bp
    mov bp, sp
    push bx
    push ax
    push di
    push dx
    push cx

    mov bx, [bp + 4] ; controller

    push bx
    push PhysicsComponentId
    call getControllerComponent
    pop di ; physics component

    push bx
    push RenderComponentId
    call getControllerComponent
    pop bx ; render component

    push 0
    push [bx + RenderComponentPosition]
    call toXandY
    pop cx ; x
    pop dx ; y

    push [di + PhysicsComponentVelocityY]
    push SubPixelAmount
    call divide
    pop ax     ; y add
    add dx, ax ; dx new y

    push [di + PhysicsComponentVelocityX]
    push SubPixelAmount
    call divide
    pop ax     ; x add
    add cx, ax ; cx new x

    push [bx + RenderComponentWidth]
    push [bx + RenderComponentHeight]
    push cx ; x
    push dx ; y
    call getClampedPosition
    pop [bx + RenderComponentPosition]

    pop cx
    pop dx
    pop di
    pop ax
    pop bx
    pop bp
    ret 2
endp applyVelocity

proc updateAndApplyVelocity
    push bp
    mov bp, sp
    push bx
    push ds

    push 0
    push [bp + 4] ; controller
    call resolvePointer
    pop bx ; controller
    pop ds ; update the segment

    push bx
    call updateVelocity
    push bx
    call applyVelocity

    pop ds
    pop bx
    pop bp
    ret 2
endp updateAndApplyVelocity

proc walk
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 6] ; controller
    mov ax, [bp + 4] ; direction X
    cmp ax, 0
    je .skipX
    push bx
    push ax
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call setControllerWordValue
.skipX:
    pop bx
    pop ax
    pop bp
    ret 4
endp walk

proc move2d
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    mov bx, [bp + 8] ; controller
    mov ax, [bp + 6] ; direction X
    mov dx, [bp + 4] ; direction Y

    cmp ax, 0
    je .skipX

    push bx
    push ax
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call setControllerWordValue
.skipX:

    cmp dx, 0
    je .skipY

    push bx
    push dx
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.skipY:

    pop dx
    pop bx
    pop ax
    pop bp
    ret 6
endp move2d   

proc jump
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4] ; controller
    cmp [byte ptr KeyStateTable + 39h], 0 ; space scan code
    je .end
    push bx
    push -1 * JumpHeight
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.end:
    pop bx
    pop bp
    ret 2
endp jump

proc getControllerY
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    mov bx, [bp + 4] ; first controller
    push bx
    push RenderComponentId
    push RenderComponentPosition
    call getControllerWordValue
    pop ax
    mov bx, ScreenWidth
    xor dx, dx
    div bx
    mov [bp + 4], ax ; y
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerY

proc getControllerX
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    mov bx, [bp + 4] ; first controller
    push bx
    push RenderComponentId
    push RenderComponentPosition
    call getControllerWordValue
    pop ax
    mov bx, ScreenWidth
    xor dx, dx
    div bx
    mov [bp + 4], dx ; x
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerX

proc getControllerYEdges
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    push di
    mov bx, [bp + 4] ; controller
    push bx
    call getControllerY
    pop ax ; top
    push bx
    push RenderComponentId
    push RenderComponentHeight
    call getControllerWordValue
    pop di
    mov dx, ax
    add dx, di       ; bottom
    mov [bp + 6], ax
    mov [bp + 4], dx
    pop di
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerYEdges

proc getControllerXEdges
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    push di
    mov bx, [bp + 4] ; controller
    push bx
    call getControllerX
    pop ax ; left
    push bx
    push RenderComponentId
    push RenderComponentWidth
    call getControllerWordValue
    pop di
    mov dx, ax
    add dx, di       ; right
    mov [bp + 6], ax
    mov [bp + 4], dx
    pop di
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerXEdges

; return the difference in the Y axis between two objects
; input - first controller, second controller
proc isYCollision
    push bp
    mov bp, sp
    push ax
    push bx
    push si
    push di
    push dx
    mov si, [bp + 4] ; first controller
    mov bx, [bp + 6] ; second controller

    push 0 ; garbage value
    push si
    call getControllerYEdges
    pop ax
    pop dx

    push 0 ; garbage value
    push bx
    call getControllerYEdges
    pop bx
    pop si

    push ax
    push dx
    push bx
    push si
    call isAxisCollisionSquare
    pop ax
    mov [bp + 6], ax

    pop dx
    pop di
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp isYCollision

; return the difference in the X axis between two objects
; input - first controller, second controller
proc isXCollision
    push bp
    mov bp, sp
    push ax
    push bx
    push si
    push di
    push dx
    mov si, [bp + 4] ; first controller
    mov bx, [bp + 6] ; second controller

    push 0 ; garbage value
    push si
    call getControllerXEdges
    pop ax
    pop dx

    push 0 ; garbage value
    push bx
    call getControllerXEdges
    pop bx
    pop si

    push ax
    push dx
    push bx
    push si
    call isAxisCollisionSquare
    pop ax
    mov [bp + 6], ax

    pop dx
    pop di
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp isXCollision

proc getAbsValue
    push bp
    mov bp, sp
    push ax
    mov ax, [bp + 4]
    cmp ax, 0    ; check if positive
    jge .end     ; if greater than or equal to 0, jump to end
    neg ax       ; negate to get the absolute value
.end:
    mov [bp + 4], ax
    pop ax
    pop bp
    ret
endp getAbsValue

proc toXandY
    push bp
    mov bp, sp
    push ax
    push dx
    push cx

    mov ax, [bp + 4] ; position
    mov cx, ScreenWidth
    xor dx, dx
    idiv cx ; ax = y ; dx = x

    mov [bp + 4], dx
    mov [bp + 6], ax

    pop cx
    pop dx
    pop ax
    pop bp
    ret
endp toXandY

proc isAxisCollisionPoint
    push bp
    mov bp, sp
    push bx
    push cx
    push ax

    mov bx, [bp + 8] ; controller x
    mov cx, [bp + 6] ; controller width
    mov ax, [bp + 4] ; point x

    cmp ax, bx ; point x < controller x
    jl .setFalse

    add bx, cx       ; bx = squareX + squareWidth
    cmp ax, bx       ; if pointY > squareY + squareHeight
    jg .setFalse

    mov ax, 1
    jmp .end

.setFalse:
    mov ax, 0
.end:
    mov [bp + 8], ax

    pop ax
    pop cx
    pop bx
    pop bp
    ret 4
endp isAxisCollisionPoint

proc doesPointCollideController
    push bp
    mov bp, sp
    push bx
    push si
    push ax
    push cx
    push dx
    push di
    push ds

    mov bx, [bp + 6] ; controller
    mov si, [bp + 4] ; point

    push 0
    push bx  ; controller
    call resolvePointer
    pop bx ; controller
    pop ds ; update the segment

    push bx
    push RenderComponentId
    call getControllerComponent
    pop bx ; render component

    cmp [bx + RenderComponentPosition], si
    jg .setFalse

    push 0
    push si
    call toXandY
    pop ax ; point x
    pop dx ; point y

    push 0
    push [bx + RenderComponentPosition]
    call toXandY
    pop cx ; controller x
    pop si ; controller y

    push cx                          ; controller x
    push [bx + RenderComponentWidth] ; width
    push ax                          ; point x
    call isAxisCollisionPoint
    pop ax                           ; if there's collision
    cmp ax, 0
    jz .setFalse

    push si                           ; controller y
    push [bx + RenderComponentHeight] ; height
    push dx                           ; point y
    call isAxisCollisionPoint
    pop ax                            ; if there's collision
    cmp ax, 0
    jz .setFalse

    mov ax, 1 ; if both tests passed
    jmp .end

.setFalse:
    mov ax, 0
.end:
    mov [bp + 6], ax

    pop ds
    pop di
    pop dx
    pop cx
    pop ax
    pop si
    pop bx
    pop bp
    ret 2
endp doesPointCollideController

proc toPosition
    push bp
    mov bp, sp
    push ax
    push dx
    push cx
    push bx

    mov bx, [bp + 6] ; x
    mov ax, [bp + 4] ; y

    mov cx, ScreenWidth
    xor dx, dx
    imul cx ; ax = y * ScreenWidth
    add ax, bx

    mov [bp + 6], ax

    pop bx
    pop cx
    pop dx
    pop ax
    pop bp
    ret 2
endp toPosition

proc getStepElements
    push bp
    mov bp, sp
    push dx
    push cx
    push ax

    push 0
    push [bp + 6] ; current position
    call toXandY
    pop dx ; cur x
    pop cx ; cur y

    push 0
    push [bp + 4]
    call toXandY ; previous position
    pop ax ; prev x
    sub dx, ax ; dx -> diff x
    pop ax ; prev y
    sub cx, ax ; cx -> diff y

    push dx
    push cx
    call getMaxAbs
    pop ax ; ax -> amount of steps

    push dx
    push RaycastPrecision
    call multiply
    pop dx ; dx -> diff x * 128

    push cx
    push RaycastPrecision
    call multiply
    pop cx ; cx -> diff x * 128

    mov [bp + 4], dx ; diff x
    mov [bp + 6], cx ; diff y
    mov [bp + 8], ax ; amount of steps

    pop ax
    pop cx
    pop dx
    pop bp
    ret
endp getStepElements

proc createVector2
    push bp
    mov bp, sp
    push bx
    push ax

    mov bx, [bp + 8] ; TODO - malloc

    mov ax, [bp + 6]
    mov [bx], ax

    mov ax, [bp + 4]
    mov [bx + 2], ax

    mov [bp + 8], bx

    pop ax
    pop bx
    pop bp
    ret 4
endp createVector2

proc getVectorElement
    push bp
    mov bp, sp
    push bx
    push ax

    mov bx, [bp + 6] ; vector
    mov ax, [bp + 4] ; index

    sal ax, 1
    add bx, ax

    mov bx, [bx]
    mov [bp + 6], bx

    pop ax
    pop bx
    pop bp
    ret 2
endp getVectorElement

proc setVectorElement
    push bp
    mov bp, sp
    push bx
    push ax
    push dx

    mov bx, [bp + 8] ; vector
    mov ax, [bp + 6] ; index
    mov dx, [bp + 4] ; value

    sal ax, 1
    add bx, ax

    mov [bx], dx

    pop dx
    pop ax
    pop bx
    pop bp
    ret 6
endp setVectorElement

proc areControllersColliding
    push bp
    mov bp, sp
    push ax
    push bx
    push si
    push cx
    push di
    push dx

    push offset vector1
    push [bp + 6] ; controller
    push [bp + 4] ; collider
    call createVector2
    pop bx ; bx -> vector (controller, collider)

    push [bx + VectorX] ; controller
    push RenderComponentId
    call getControllerComponent
    pop di ; di -> render component

    push [di + RenderComponentPosition] ; save original position

    push 0
    push [di + RenderComponentPosition]
    push [di + RenderComponentPreviousPosition]
    call getStepElements
    pop cx ; diffX
    pop dx ; diffY
    pop ax ; ax -> amount of steps

    push offset vector2
    push cx ; diffX
    push dx ; diffY
    call createVector2
    pop si  ; si -> vector (diffX, diffY)

    ; if no movement, don't raycast
    cmp ax, 0
    jne .startRaycast

    push [bx + VectorX] ; controller
    push [bx + VectorY] ; collider
    call areControllersCollidingThisFrame
    pop ax ; collision overlap
    jmp .cleanup

.startRaycast:
    ; stepX = diffX / steps
    push [si + VectorX]
    push ax
    call divide
    pop [si + VectorX] ; store stepX

    ; stepY = diffY / steps
    push [si + VectorY]
    push ax
    call divide
    pop [si + VectorY] ; store stepY

    ; start raycast from previous position
    mov cx, [di + RenderComponentPreviousPosition]
    mov [di + RenderComponentPosition], cx

    xor cx, cx ; reset sumX
    xor dx, dx ; reset sumY

.raycastLoop:
    push bx ; store bx
    push ax ; store ax

    add cx, [si + VectorX] ; sumX += step X
    add dx, [si + VectorY] ; sumY += step Y

    push cx ; sumX
    push RaycastPrecision
    call divideModulo
    pop bx  ; addX
    pop cx  ; updated sumX

    push dx ; sumY
    push RaycastPrecision
    call divideModulo
    pop ax  ; addY
    pop dx  ; updated sumY

    push bx ; addX
    push ax ; addY
    call toPosition
    pop ax  ; step size (ScreenWidth * y) + x

    add [di + RenderComponentPosition], ax ; apply the step

    pop ax ; restore ax
    pop bx ; restore bx

    push ax ; store ax (steps left)

    ; check collision at current position
    push [bx + VectorX] ; controller
    push [bx + VectorY] ; collider
    call areControllersCollidingThisFrame
    pop ax ; ax -> collision overlap

    cmp ax, 0
    je .didntCollide

    pop dx ; restore ax (steps left)
    jmp .cleanup

.didntCollide:
    pop ax ; restore ax (steps left)
    dec ax
    jnz .raycastLoop
    mov ax, 0

.cleanup:
    pop bx ; get original position
    cmp ax, 0 ; if no collision detect, restore the position
    jne .didCollide
    mov [di + RenderComponentPosition], bx

.didCollide:
    mov [bp + 6], ax ; return the collision overlap
    pop dx
    pop di
    pop cx
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp areControllersColliding

proc getMin
    push bp
    mov bp, sp
    push bx
    push dx

    mov bx, [bp + 4] ; value1
    mov dx, [bp + 6] ; value2

    cmp bx, dx
    jg .end
    mov dx, bx
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMin

proc getMax
   push bp
    mov bp, sp
    push bx
    push dx

    mov bx, [bp + 4] ; value1
    mov dx, [bp + 6] ; value2

    cmp bx, dx
    jl .end
    mov dx, bx
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMax

proc getMinAbs
   push bp
    mov bp, sp
    push bx
    push dx

    mov bx, [bp + 4] ; value1
    mov dx, [bp + 6] ; value2

    push bx
    call getAbsValue
    pop bx
    
    push dx
    call getAbsValue
    pop dx

    cmp bx, dx
    jg .end
    mov dx, bx
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMinAbs

proc getMaxAbsIndex
    push bp
    mov bp, sp
    push bx
    push dx

    mov bx, [bp + 4] ; value1
    mov dx, [bp + 6] ; value2

    push bx
    call getAbsValue
    pop bx
    
    push dx
    call getAbsValue
    pop dx

    cmp bx, dx
    jl .continue
    mov dx, 1
    jmp .end
.continue:
    mov dx, 0
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMaxAbsIndex

proc getMinAbsIndex
    push bp
    mov bp, sp
    push bx
    push dx

    mov bx, [bp + 4] ; value1
    mov dx, [bp + 6] ; value2

    push bx
    call getAbsValue
    pop bx
    
    push dx
    call getAbsValue
    pop dx

    cmp bx, dx
    jg .continue
    mov dx, 1
    jmp .end
.continue:
    mov dx, 0
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMinAbsIndex

proc getMaxAbs
    push bp
    mov bp, sp
    push bx
    push dx

    mov bx, [bp + 4] ; value1
    mov dx, [bp + 6] ; value2

    push bx
    call getAbsValue
    pop bx
    
    push dx
    call getAbsValue
    pop dx

    cmp bx, dx
    jl .end
    mov dx, bx
.end:
    mov [bp + 6], dx

    pop dx
    pop bx
    pop bp
    ret 2
endp getMaxAbs

proc multiply
    push bp
    mov bp, sp
    push ax
    push dx
    push cx

    mov ax, [bp + 6]
    mov cx, [bp + 4]

    xor dx, dx
    imul cx
    mov [bp + 6], ax

    pop cx
    pop dx
    pop ax
    pop bp
    ret 2
endp multiply

proc divideModulo
    push bp
    mov bp, sp
    push ax
    push dx

    mov ax, [bp + 6]

    cwd
    idiv [bp + 4]
    mov [bp + 4], ax ; /
    mov [bp + 6], dx ; %

    pop dx
    pop ax
    pop bp
    ret
endp divideModulo

proc divide
    push bp
    mov bp, sp
    push ax
    push dx
    push cx

    mov ax, [bp + 6]

    cwd
    idiv [bp + 4]
    mov [bp + 6], ax

    pop cx
    pop dx
    pop ax
    pop bp
    ret 2
endp divide

proc getSign
    push bp
    mov bp, sp
    push ax

    cmp [bp + 4], 0
    jnz .isNotZero
    mov ax, 0
    jmp .end
.isNotZero:

    cmp [bp + 4], 0
    jg .isPositive

    mov ax, -1
    jmp .end
.isPositive:
    mov ax, 1

.end:
    mov [bp + 4], ax
    pop ax
    pop bp
    ret
endp getSign

proc getEqual
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4]
    cmp bx, [bp + 6]
    jne .notEqual
    mov bx, 1
    jmp .end
.notEqual:
    mov bx, 0
.end:
    mov [bp + 6], bx
    pop bx
    pop bp
    ret 2
endp getEqual

proc areControllersCollidingThisFrame
    push bp
    mov bp, sp
    push ax
    push bx
    push si
    push dx
    push di
    mov ax, [bp + 6] ; first controller
    mov dx, [bp + 4] ; collider
    
    push ax
    push dx
    call isXCollision
    pop bx ; x collision

    push ax
    push dx
    call isYCollision
    pop si ; y collision

    cmp bx, 0 ; doesn't collide in x
    jz .setFalse
    cmp si, 0 ; doesn't collide in y
    jz .setFalse

    push bx ; x
    push si ; y
    call getMinAbsIndex
    pop ax

    cmp ax, 0
    jz .setX

    mov ax, si
    mov dx, ScreenWidth
    imul dx
    jmp .end
.setX:
    mov ax, bx
    jmp .end
.setFalse:
    mov ax, 0
.end:
    mov [bp + 6], ax ; change to correctly collide
    pop di
    pop dx
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp areControllersCollidingThisFrame

; gets the edge points of 2 objects and return the distance between them,
; and 0 if they don't collide
; input - obj1 bigger, obj2 lower, obj1 bigger, obj lower
; lower - (top/left), bigger - (bottom/right)
proc isAxisCollisionSquare
    push bp
    mov bp, sp
    push cx
    push dx
    push bx
    push ax

    mov ax, [bp + 10]  ; bottom/right1
    mov bx, [bp + 8]   ; top/left1
    mov dx, [bp + 6]   ; bottom/right2
    mov cx, [bp + 4]   ; top/left2

    ; if bottom1 is less than top2
    cmp ax, cx
    jle .setFalse
    ; if bottom2 is less than top1
    cmp dx, bx
    jle .setFalse

    cmp ax, dx ; 1 is above 2
    jge .set2
    sub ax, cx
    jmp .end
.set2:
    sub bx, dx
    mov ax, bx
    jmp .end
.setFalse:
    mov ax, 0
.end:
    mov [bp + 10], ax
    pop ax
    pop bx
    pop dx
    pop cx
    pop bp
    ret 6
endp isAxisCollisionSquare

proc getControllerComponent
    push bp
    mov bp, sp
    push ax
    push bx
    push si

    mov bx, [bp + 6] ; controller
    mov ax, [bp + 4] ; componentId

    mov si, bx
    add si, ControllerComponentData
    dec si

.componentLoop:
    inc si
    mov ah, [si] ; current component id
    cmp al, ah
    jne .componentLoop

    xor ax, ax
    mov al, [si + ComponentLocation]
    add bx, ax

    mov [bp + 6], bx
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp getControllerComponent

proc endAndCleanUp
    push offset previousIRQMask
    call cleanUpClock

    mov ah, 0
    mov al, 2
    int 10h
    mov ax, 4C00h
    int 21h
    ret
endp endAndCleanUp

; input - the segment wrapper
; output - the original object, its segment
proc resolvePointer
    push bp
    mov bp, sp
    push bx
    push ax
    mov bx, [bp + 4] ; pointer
    mov ax, ds

    cmp [byte ptr bx], SegmentWrapperId ; check id
    jne .end ; if not a segment wrapper

    mov ax, [bx + SegmentWrapperSegment]
    mov bx, [bx + SegmentWrapperOriginal]

.end:
    mov [bp + 4], bx
    mov [bp + 6], ax 
    pop ax
    pop bx
    pop bp
    ret
endp resolvePointer

; called 1024 times a sec
proc periodic
    push bp
    mov bp, sp
    push bx
    push cx
    push dx
    push ax
    mov bx, [bp + 4]
    inc [word ptr bx]
    cmp [word ptr bx], 1025
    jl .skipReset
    mov [word ptr bx], 1
.skipReset:
    mov ax, [bx]
    mov cx, gameSpeed
    xor dx, dx
    div cx
    cmp dx, 0
    jne .skipGameLoop
    call gameLoop
.skipGameLoop:
    pop ax
    pop dx
    pop cx
    pop bx
    pop bp
    ret 2
endp periodic

; setups the keyboard handler
; input - pointer to the old segment save, another for the offset
proc setupKeyboardHandler
    push bp
    mov bp, sp
    push ax
    push es
    xor ax, ax
    mov es, ax ; set es to IVT
    cli
    ; Save the original ISR address
    mov ax, [word ptr es:9*4]
    mov [bp + 4], ax ; save old offset
    mov ax, [word ptr es:9*4+2]
    mov [bp + 6], ax ; save old segment
    ; Set the new ISR address
    mov [word ptr es:9*4], offset keyboardHandler
    mov [word ptr es:9*4+2], seg keyboardHandler
    sti
    pop es
    pop ax
    pop bp
    ret 4
endp setupKeyboardHandler

proc handleBounceCollision
    push bp
    mov bp, sp
    push bx
    push ax

    mov bx, [bp + 6] ; controller

    push bx
    push [bp + 4] ; collider
    call areControllersColliding
    pop ax ; overlap

    cmp ax, 0
    je .end

    push bx
    push ax
    push RenderComponentId
    push RenderComponentPosition
    call addControllerWordValue

    push bx
    push PhysicsComponentId
    call getControllerComponent
    pop bx ; bx = physics component

    push ax
    call getAbsValue
    pop ax
    cmp ax, ScreenWidth
    jl .bounceX

.bounceY:
    mov ax, [bx + PhysicsComponentVelocityY]
    neg ax
    mov [bx + PhysicsComponentVelocityY], ax
    jmp .end

.bounceX:
    mov ax, [bx + PhysicsComponentVelocityX]
    neg ax
    mov [bx + PhysicsComponentVelocityX], ax

.end:
    pop ax
    pop bx
    pop bp
    ret 4
endp handleBounceCollision

proc handleWallCollision
    push bp
    mov bp, sp
    push bx
    push ax
    mov bx, [bp + 6] ; controller

    push bx
    push [bp + 4] ; collider
    call areControllersColliding
    pop ax ; amount to move

    cmp ax, 0
    je .skipResetX

    push bx
    push ax
    push RenderComponentId
    push RenderComponentPosition
    call addControllerWordValue

    push ax
    call getAbsValue
    pop ax
    cmp ax, ScreenWidth
    jl .skipResetY

    push bx
    push 0
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
    jmp .skipResetX

.skipResetY:

    push bx
    push 0
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call setControllerWordValue

.skipResetX:
    pop ax
    pop bx
    pop bp
    ret 4
endp handleWallCollision

; Array Procs

proc getArrayElement
    push bp
    mov bp, sp
    push bx
    push dx
    push ax

    mov bx, [bp + 6] ; array
    mov dx, [bp + 4] ; index

    mov ax, [bx + ArrayElementSize]
    mul dx ; ax = index * element size

    add bx, ArrayData
    add bx, ax
    mov bx, [bx]
    mov [bp + 6], bx

    pop ax
    pop dx
    pop bx
    pop bp
    ret 2
endp getArrayElement

proc setArrayElement
    push bp
    mov bp, sp
    push bx
    push si
    push dx
    push ax

    mov bx, [bp + 8] ; array
    mov si, [bp + 6] ; value
    mov ax, [bp + 4] ; index

    mov dx, [bx + ArrayElementSize] ; element size
    mul dx ; ax = index * element size

    add bx, ArrayData ; first element
    add bx, ax

    mov [bx], si

    pop ax
    pop dx
    pop si
    pop bx
    pop bp
    ret 6
endp setArrayElement

proc pushToArray
    push bp
    mov bp, sp
    push bx
    push si
    push dx
    push ax

    mov bx, [bp + 6] ; array
    mov si, [bp + 4] ; value

    mov dx, [bx + ArrayElementSize] ; element size
    mov ax, [bx + ArraySize]        ; array size
    inc [word ptr bx + ArraySize]            ; increase array size
    mul dx                          ; ax = index * element size

    add bx, ArrayData ; first element
    add bx, ax        ; currect element position

    mov [bx], si

    pop ax
    pop dx
    pop si
    pop bx
    pop bp
    ret 4
endp pushToArray

proc popFromArray
    push bp
    mov bp, sp
    push bx
    push dx
    push ax

    mov bx, [bp + 4] ; array

    mov dx, [bx + ArrayElementSize] ; element size
    mov ax, [bx + ArraySize]        ; array size
    dec [word ptr bx + ArraySize]            ; decrease array size
    mul dx                          ; ax = index * element size

    add bx, ArrayData ; first element
    add bx, ax        ; currect element position

    mov bx, [bx]
    mov [bp + 4], bx

    pop ax
    pop dx
    pop bx
    pop bp
    ret
endp popFromArray

proc createArray
    push bp
    mov bp, sp
    push bx
    push si
    push cx

    mov bx, [bp + 8] ; location
    mov si, [bp + 6] ; length
    mov cx, [bp + 4] ; element size
    
    mov [byte ptr bx], ArrayId
    mov [bx + ArrayElementSize], cx
    mov [bx + ArraySize], si

    pop cx
    pop si
    pop bx
    pop bp
    ret 6
endp createArray

proc goThroughArrayDownwards
    push bp
    mov bp, sp
    push bx
    push ax
    push dx

    mov bx, [bp + 6] ; array
    mov dx, [bp + 4] ; current index

    cmp dx, -1
    jnz .continue
    mov dx, [bx + ArraySize]
.continue:
    dec dx
    mov [bp + 4], dx

    push bx
    push dx
    call getArrayElement
    pop bx
    mov [bp + 6], bx

    pop dx
    pop ax
    pop bx
    pop bp
    ret
endp goThroughArrayDownwards

proc goThroughArrayUpwards
    push bp
    mov bp, sp
    push bx
    push ax
    push dx

    mov bx, [bp + 6] ; array
    mov dx, [bp + 4] ; current index

    inc dx
    mov [bp + 4], dx

    mov ax, [bx + ArrayElementSize]
    mul dx ; ax = index * element size

    add bx, ArrayData
    add bx, ax
    mov [bp + 6], bx

    pop dx
    pop ax
    pop bx
    pop bp
    ret
endp goThroughArrayUpwards

proc create2DArray
    push bp
    mov bp, sp
    push bx
    push si
    push cx
    push ax

    mov bx, [bp + 10] ; location
    mov si, [bp + 8]  ; columns
    mov ax, [bp + 6]  ; rows
    mov cx, [bp + 4]  ; element size
    
    mov [byte ptr bx], Array2DId
    mov [bx + Array2DElementSize], cx
    mov [bx + Array2DColumns], si
    mov [bx + Array2DRows], ax

    pop ax
    pop cx
    pop si
    pop bx
    pop bp
    ret 8
endp create2DArray

proc get2DArrayElement
    push bp
    mov bp, sp
    push bx
    push dx
    push ax
    push si

    mov bx, [bp + 8] ; array
    mov si, [bp + 6] ; column
    mov dx, [bp + 4] ; row
    
    mov ax, [bx + Array2DRows]
    mul dx ; ax = rows * row
    add ax, si
    mov dx, [bx + Array2DElementSize]
    mul dx

    add bx, Array2DData
    add bx, ax
    mov bx, [bx]
    mov [bp + 8], bx

    pop si
    pop ax
    pop dx
    pop bx
    pop bp
    ret 4
endp get2DArrayElement

proc get2DArrayRow
    push bp
    mov bp, sp
    push bx
    push dx
    push ax

    mov bx, [bp + 6] ; array
    mov dx, [bp + 4] ; row
    
    mov ax, [bx + Array2DColumns]
    mul dx ; ax = rows * row
    mov dx, [bx + Array2DElementSize]
    mul dx

    add bx, Array2DData
    add bx, ax
    mov [bp + 6], bx

    pop ax
    pop dx
    pop bx
    pop bp
    ret 2
endp get2DArrayRow

proc goThroughRowUpwards
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push di

    mov di, [bp + 8] ; 2d array
    mov bx, [bp + 6] ; row array
    mov dx, [bp + 4] ; current index

    cmp dx, -1
    jnz .continue
    mov dx, [di + Array2DColumns]
    sub bx, [di + Array2DElementSize]
.continue:
    dec dx
    mov [bp + 6], dx

    add bx, [di + Array2DElementSize]
    mov [bp + 8], bx

    pop di
    pop dx
    pop ax
    pop bx
    pop bp
    ret 2
endp goThroughRowUpwards

proc goThroughRowDownwards
    push bp
    mov bp, sp
    push bx
    push dx
    push di
    push ax

    mov di, [bp + 8] ; 2d array
    mov bx, [bp + 6] ; row array
    mov dx, [bp + 4] ; current index

    cmp dx, -1
    jnz .continue
    
    mov ax, [di + Array2DElementSize]
    mov dx, [di + Array2DColumns]
    push dx

    inc dx
    mul dx
    add bx, ax

    pop dx

.continue:
    dec dx
    mov [bp + 6], dx

    sub bx, [di + Array2DElementSize]
    mov [bp + 8], bx

    pop ax
    pop di
    pop dx
    pop bx
    pop bp
    ret 2
endp goThroughRowDownwards

proc printChar
    push bp
    mov bp, sp
    push dx
    push ax
    mov dl, [bp + 4]
    add dl, 30h
    mov ah, 2
    int 21h
    mov dl, ' '
    mov ah, 2
    int 21h
    pop ax
    pop dx
    pop bp
    ret 2
endp printChar

proc printNumber
    push bp
    mov bp, sp
    push dx
    push ax
    push cx
    push si

    mov ax, [bp + 4] ; number to print
    mov si, 10
    mov cx, 0

    ; check if negative
    cmp ax, 0
    jge .saveLoop    ; if positive or zero, proceed normally

    ; if negative, print '-' and make number positive for correct ASCII
    push ax
    mov dl, '-'
    mov ah, 2
    int 21h
    pop ax

    neg ax

.saveLoop:
    cwd
    idiv si  ; ax / 10 -> quotient in ax, remainder in dx

    add dl, '0'  ; Convert remainder to ASCII
    push dx      ; Store digit on stack
    inc cx       ; Count number of digits

    test ax, ax
    jnz .saveLoop

.printLoop:
    pop dx    ; get digit from stack
    mov ah, 2
    int 21h   ; print char

    dec cx
    jnz .printLoop

    ; print space at the end
    mov dl, ' '
    mov ah, 2
    int 21h
    
    pop si
    pop cx
    pop ax
    pop dx
    pop bp
    ret 2
endp printNumber

proc handleRightPlayer
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4] ; controller

    cmp [byte ptr KeyStateTable + 23], 0
    je .skipUp

    push bx
    push -100
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.skipUp:

    cmp [byte ptr KeyStateTable + 37], 0
    je .skipDown

    push bx
    push 100
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.skipDown:

    pop bx
    pop bp
    ret 2
endp handleRightPlayer

proc handleLeftPlayer
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4] ; controller

    cmp [byte ptr KeyStateTable + 17], 0
    je .skipUp

    push bx
    push -100
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.skipUp:

    cmp [byte ptr KeyStateTable + 31], 0
    je .skipDown

    push bx
    push 100
    push PhysicsComponentId
    push PhysicsComponentVelocityY
    call setControllerWordValue
.skipDown:

    pop bx
    pop bp
    ret 2
endp handleLeftPlayer

; prints a controller's outline by a color
proc printOutline
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 6] ; controller pointer

    push bx
    push RenderComponentId
    call getControllerComponent
    pop bx
    
    push [bp + 4] ; color
    push [bx + RenderComponentWidth]
    push [bx + RenderComponentHeight]
    push [bx + RenderComponentPosition] ; screen position (left top)
    call printRectBySize
    
    pop bx
    pop bp
    ret 4
    ret
endp printOutline

proc endGameIfCollide
    push bp
    mov bp, sp
    push ax

    push [bp + 6]
    push [bp + 4]
    call areControllersColliding
    pop ax

    cmp ax, 0
    je .end

    call endAndCleanUp
.end:
    pop ax
    pop bp
    ret 4
endp endGameIfCollide

proc printAllColors
    push bp
    mov bp, sp
    push ax
    push es
    push di
    mov ax, VideoMemory
    mov es, ax
	mov di, 0
.printLoop:
    mov [es:di], di
    inc di
	cmp di, 256
    jne .printLoop
    pop di
    pop es
    pop ax
    pop bp
	ret
endp printAllColors

proc handleBallAcceleration

    push offset ballController
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call getControllerWordValue
    pop bx

    cmp bx, 0
    jl .skipPositive

    push offset ballController
    push 1
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call addControllerWordValue

    jmp .end

.skipPositive:

    push offset ballController
    push -1
    push PhysicsComponentId
    push PhysicsComponentVelocityX
    call addControllerWordValue

.end:

    ret
endp handleBallAcceleration

proc printPoint
    push bp
    mov bp, sp
    push ax
    push es
    push di

    mov ax, VideoMemory
    mov es, ax

    mov di, [bp + 6] ; pos
    mov ax, [bp + 4] ; color

    mov [byte ptr es:di], al

    pop di
    pop es
    pop ax
    pop bp
    ret 4
endp printPoint

proc isClicking
    push bp
    mov bp, sp
    push si
    push bx

    mov bx, [bp + 6] ; mouse controller
    mov si, [bp + 4] ; button controller

    push bx
    push MouseComponentId
    push MouseComponentLeftClicked
    call getControllerByteValue
    pop ax

    cmp al, 0
    je .end ; if did not click

    push bx
    push RenderComponentId
    push RenderComponentPosition
    call getControllerWordValue
    pop ax

    push si ; button
    push ax ; mouse position
    call doesPointCollideController
    pop ax  ; result (1/0)

.end:
    mov [bp + 6], ax

    pop bx
    pop si
    pop bp
    ret 2
endp isClicking

proc gameLoop

    push offset leftPlayerController
    call handleLeftPlayer

    push offset rightPlayerController
    call handleRightPlayer

    push offset leftPlayerController
    call updateAndApplyVelocity

    push offset rightPlayerController
    call updateAndApplyVelocity

    push offset ballController
    call updateAndApplyVelocity

    push offset ballController
    push offset rightPlayerController
    call handleBounceCollision

    push offset ballController
    push offset leftPlayerController
    call handleBounceCollision

    push offset ballController
    push offset borderDown
    call handleBounceCollision

    push offset ballController
    push offset borderUp
    call handleBounceCollision

    ; push offset ballController
    ; push offset borderLeft
    ; call endGameIfCollide

    ; push offset ballController
    ; push offset borderRight
    ; call endGameIfCollide

    push offset mouseController
    call updateMouse

    push offset printManager
    push offset ballController
    call uploadController

    push offset printManager
    push offset leftPlayerController
    call uploadController

    push offset printManager
    push offset rightPlayerController
    call uploadController

    push offset printManager
    push offset mouseController
    call uploadController

    push offset printManager
    call printAllControllers

    cmp [globalTime], gameSpeed
    jne .skip
    call handleBallAcceleration
.skip:

    ret
endp gameLoop

start:
    mov ax, @data
    mov ds, ax
    mov ax, 13h
    int 10h

    xor ax, ax
    xor dx, dx
    xor bx, bx
    xor si, si
    xor cx, cx
    xor di, di

    call clearScreen

    push offset palette
    call setPalette

; *******************INIT***************
; Note - here order is important, because they save their background here

; **************************************

    push offset borderUp
    push 20
    call printOutline

    push offset borderDown
    push 20
    call printOutline

    push offset borderRight
    push 20
    call printOutline

    push offset borderLeft
    push 20
    call printOutline

    push offset rightPlayerController
    push (ScreenWidth * 80) + 315
    call initController

    push offset leftPlayerController
    push (ScreenWidth * 80)
    call initController

    push offset ballController
    push (ScreenWidth * 125) + 160
    call initController

    push offset mouseController
    call initMouse

    push offset oldKeyboardHandlerSegment
    push offset oldKeyboardHandlerOffset
    call setupKeyboardHandler

    push offset previousIRQMask
    call setUpClock

keepAliveLoop:
    jmp keepAliveLoop
exit:
    call endAndCleanUp
END start
