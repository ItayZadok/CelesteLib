IDEAL
MODEL small
STACK 100h

DATASEG

; *********************************IMAGES START********************************
palette db 4 dup(0),33,20,0,45,16,7,10,20,7,10,20,10,43,63,14,14,14,23,21,19,23,21,19,36,37,37,42,20,13,42,20,13,48,48,49,62,59,57,63,0,19,63,29,42,63,40,0,63,51,42,63,60,58,63,63,63

backgroundImage dw 128, 128
db 7 dup(18),8,18,18,92 dup(5),18,18,16 dup(0),18,18,6 dup(5),10 dup(18),23 dup(5),18,18,67 dup(5),18,18,16 dup(0),18,18,18,9 dup(5),6 dup(18),5,5,18,20 dup(5),18,18,5,5,18,59 dup(5),18,18,5,5,5,18,18
db 16 dup(0),18,18,18,10 dup(5),5 dup(18),50 dup(5),12,36 dup(5),18,18,5,5,5,18,18,16 dup(0),4 dup(18),10 dup(5),5 dup(18),48 dup(5),18,18,6 dup(5),18,18,6 dup(5),18,18,6 dup(5),18,18,6 dup(5),18,18
db 8 dup(5),18,18,18,16 dup(0),4 dup(18),7 dup(5),18,5,5,6 dup(18),22 dup(5),18,22 dup(5),6 dup(18),5,5,6 dup(18),5,5,6 dup(18),5,5,6 dup(18),5,5,6 dup(18),5 dup(5),4 dup(18),16 dup(0),18,18,18
db 11 dup(5),10 dup(18),21 dup(5),18,18 dup(5),48 dup(18),16 dup(0),18,18,18,11 dup(5),18,18,8,7 dup(18),40 dup(5),47 dup(18),8,16 dup(0),18,18,14 dup(5),7 dup(18),8,18,18,36 dup(5),18,18,7 dup(8),12
db 16 dup(0),16 dup(8),24 dup(0),18,18,14 dup(5),10 dup(18),36 dup(5),18,18,7 dup(8),17 dup(0),15 dup(8),25 dup(0),18,18,18,17 dup(5),6 dup(18),5,5,18,28 dup(5),18,18,5,5,5,18,18,6 dup(8),18 dup(0)
db 14 dup(8),26 dup(0),18,18,18,18 dup(5),5 dup(18),31 dup(5),18,18,5,5,5,18,18,5 dup(8),19 dup(0),13 dup(8),27 dup(0),4 dup(18),18 dup(5),5 dup(18),8 dup(5),18,18,6 dup(5),18,18,6 dup(5),18,18,8 dup(5)
db 18,18,18,4 dup(8),20 dup(0),12 dup(8),28 dup(0),4 dup(18),15 dup(5),18,5,5,6 dup(18),5 dup(5),6 dup(18),5,5,6 dup(18),5,5,6 dup(18),5 dup(5),4 dup(18),8,8,8,21 dup(0),11 dup(8),29 dup(0),18,18,18
db 19 dup(5),42 dup(18),8,8,22 dup(0),10 dup(8),30 dup(0),18,18,18,19 dup(5),18,18,8,38 dup(18),8,8,23 dup(0),9 dup(8),31 dup(0),18,18,22 dup(5),7 dup(18),8,8,6 dup(18),25 dup(8),24 dup(0),8 dup(8)
db 32 dup(0),18,18,22 dup(5),16 dup(18),17 dup(8),0,6 dup(8),25 dup(0),7 dup(8),32 dup(0),18,18,18,25 dup(5),7 dup(18),5,4 dup(18),8,8,4 dup(0),14 dup(8),0,0,8,8,26 dup(0),6 dup(8),32 dup(0),18,18,18
db 26 dup(5),5 dup(18),4 dup(5),18,18,8,8,4 dup(0),14 dup(8),0,0,8,8,27 dup(0),5 dup(8),32 dup(0),4 dup(18),26 dup(5),4 dup(18),4 dup(5),18,18,8,8,4 dup(0),18 dup(8),28 dup(0),4 dup(8),28 dup(0),2,0,0,0
db 4 dup(18),23 dup(5),18,5,5,5 dup(18),5,5,18,18,18,8,8,4 dup(0),12 dup(8),0,5 dup(8),29 dup(0),8,8,8,27 dup(0),2,0,18,0,0,18,18,18,27 dup(5),10 dup(18),24 dup(8),30 dup(0),8,8,25 dup(0),1,0,2,0,0,1,0
db 18,18,18,27 dup(5),18,18,8,6 dup(18),25 dup(8),31 dup(0),8,25 dup(0),1,0,1,1,0,1,0,18,18,28 dup(5),18,18,32 dup(8),48 dup(0),8,6 dup(18),8,8,6 dup(18),8,18,18,28 dup(5),18,18,31 dup(8),49 dup(0)
db 19 dup(18),22 dup(5),18,18,5,5,5,18,18,30 dup(8),48 dup(0),1,0,18,18,18,5,7 dup(18),5,7 dup(18),22 dup(5),18,18,5,5,5,18,18,29 dup(8),49 dup(0),2,0,18,18,4 dup(5),4 dup(18),4 dup(5),6 dup(18)
db 7 dup(5),18,18,6 dup(5),18,18,8 dup(5),18,18,18,28 dup(8),49 dup(0),2,1,0,18,18,4 dup(5),4 dup(18),4 dup(5),6 dup(18),5 dup(5),6 dup(18),5,5,6 dup(18),5 dup(5),4 dup(18),27 dup(8),46 dup(0),1,0,0,0,2
db 0,0,18,18,18,5,5,6 dup(18),5,5,6 dup(18),5 dup(5),24 dup(18),26 dup(8),48 dup(0),2,0,2,1,0,0,19 dup(18),5 dup(5),23 dup(18),26 dup(8),49 dup(0),1,0,1,1,0,0,8,6 dup(18),8,8,6 dup(18),8,18,18,6 dup(5)
db 7 dup(18),8,8,4 dup(18),8,8,18,18,18,8,4 dup(18),25 dup(8),7 dup(0),10 dup(8),31 dup(0),8,23 dup(18),8 dup(5),24 dup(18),8,0,21 dup(8),7 dup(0),12 dup(8),30 dup(0),24 dup(18),12 dup(5),8 dup(18),5,5
db 4 dup(18),5,5,4 dup(18),4 dup(8),0,0,16 dup(8),7 dup(0),14 dup(8),29 dup(0),4 dup(18),5,5,5,9 dup(18),5,6 dup(18),14 dup(5),6 dup(18),10 dup(5),18,18,18,4 dup(8),0,0,15 dup(8),7 dup(0),16 dup(8)
db 28 dup(0),18,18,18,5 dup(5),18,5,4 dup(18),5 dup(5),18,18,17 dup(5),4 dup(18),12 dup(5),18,18,20 dup(8),7 dup(0),18 dup(8),27 dup(0),18,18,18,7 dup(5),4 dup(18),5,18,19 dup(5),18,5,5,18,18,8,18,5,5
db 18,18,5 dup(5),18,5,5,18,8,8,8,0,16 dup(8),7 dup(0),20 dup(8),26 dup(0),4 dup(18),5,5,5,9 dup(18),22 dup(5),18,18,8,18,18,5,18,18,7 dup(5),18,18,19 dup(8),7 dup(0),22 dup(8),25 dup(0),16 dup(18)
db 22 dup(5),5 dup(18),10 dup(5),18,18,18,17 dup(8),7 dup(0),24 dup(8),24 dup(0),8,15 dup(18),22 dup(5),5 dup(18),10 dup(5),18,18,18,40 dup(8),48 dup(0),18,18,19 dup(5),18,18,18,8,18,18,10 dup(5)
db 18,18,18,39 dup(8),49 dup(0),18,18,19 dup(5),18,18,18,8,18,5,5,18,4 dup(5),18,18,5,5,5,18,19 dup(8),4 dup(0),16 dup(8),50 dup(0),18,18,5,5,18,15 dup(5),6 dup(18),7 dup(5),18,18,5,5,5,18,18,18 dup(8)
db 4 dup(0),15 dup(8),51 dup(0),18,18,18 dup(5),7 dup(18),10 dup(5),18,18,18,18 dup(8),4 dup(0),14 dup(8),52 dup(0),18,18,18,18 dup(5),7 dup(18),5,5,4 dup(18),5,5,4 dup(18),18 dup(8),4 dup(0),13 dup(8)
db 53 dup(0),4 dup(18),17 dup(5),19 dup(18),34 dup(8),54 dup(0),8 dup(18),14 dup(5),18,18,8,4 dup(18),8,4 dup(18),8,8,18,18,18,34 dup(8),55 dup(0),8,7 dup(18),16 dup(5),31 dup(18),17 dup(8),55 dup(0)
db 9 dup(8),18,18,14 dup(5),32 dup(18),16 dup(8),54 dup(0),10 dup(8),18,18,18,14 dup(5),6 dup(18),5,17 dup(18),5,5,5,4 dup(18),16 dup(8),53 dup(0),11 dup(8),18,18,18,16 dup(5),18,18,5,5,5,18,5,4 dup(18)
db 5,12,18,5,4 dup(18),7 dup(5),18,18,18,16 dup(8),52 dup(0),12 dup(8),4 dup(18),22 dup(5),4 dup(18),5,18,5,5,4 dup(18),5,18,5 dup(5),18,18,18,16 dup(8),51 dup(0),13 dup(8),4 dup(18),20 dup(5)
db 17 dup(18),5,5,5,4 dup(18),16 dup(8),50 dup(0),14 dup(8),18,18,18,21 dup(5),24 dup(18),16 dup(8),49 dup(0),15 dup(8),18,18,18,21 dup(5),23 dup(18),17 dup(8),48 dup(0),16 dup(8),18,18,20 dup(5),18,18
db 32 dup(8),56 dup(0),16 dup(8),18,18,20 dup(5),18,18,8,0,29 dup(8),57 dup(0),9 dup(8),0,6 dup(8),18,18,18,14 dup(5),18,18,5,5,5,18,18,4 dup(8),0,0,24 dup(8),58 dup(0),12 dup(8),0,0,8,8,18,18,18
db 14 dup(5),18,18,5,5,5,18,18,4 dup(8),0,0,23 dup(8),59 dup(0),12 dup(8),0,0,8,8,4 dup(18),17 dup(5),18,18,18,28 dup(8),60 dup(0),16 dup(8),4 dup(18),16 dup(5),4 dup(18),8,8,0,24 dup(8),61 dup(0)
db 10 dup(8),0,5 dup(8),18,18,18,13 dup(5),8 dup(18),26 dup(8),62 dup(0),16 dup(8),18,18,18,13 dup(5),7 dup(18),26 dup(8),63 dup(0),16 dup(8),18,18,12 dup(5),18,18,16 dup(0),16 dup(8),39 dup(0),9 dup(8)
db 7 dup(0),25 dup(8),18,18,11 dup(5),18,18,18,17 dup(0),15 dup(8),38 dup(0),10 dup(8),6 dup(0),26 dup(8),18,18,18,10 dup(5),18,18,18,18 dup(0),14 dup(8),37 dup(0),11 dup(8),5 dup(0),27 dup(8),18,18,18
db 9 dup(5),4 dup(18),19 dup(0),13 dup(8),36 dup(0),12 dup(8),4 dup(0),28 dup(8),4 dup(18),8 dup(5),4 dup(18),20 dup(0),12 dup(8),35 dup(0),13 dup(8),0,0,0,29 dup(8),4 dup(18),9 dup(5),18,18,18
db 21 dup(0),11 dup(8),34 dup(0),14 dup(8),0,0,30 dup(8),18,18,18,10 dup(5),18,18,18,22 dup(0),10 dup(8),33 dup(0),15 dup(8),0,31 dup(8),18,18,18,11 dup(5),18,18,23 dup(0),9 dup(8),32 dup(0),48 dup(8)
db 18,18,12 dup(5),18,18,24 dup(0),9 dup(8),31 dup(0),33 dup(8),15 dup(18),14 dup(5),18,18,24 dup(0),10 dup(8),30 dup(0),32 dup(8),16 dup(18),9 dup(5),18,18,5,5,5,18,18,24 dup(0),11 dup(8),29 dup(0)
db 10 dup(8),4 dup(0),18 dup(8),4 dup(18),5,5,5,18,5,6 dup(18),10 dup(5),18,18,5,5,5,18,18,24 dup(0),12 dup(8),28 dup(0),10 dup(8),4 dup(0),18 dup(8),18,18,18,8 dup(5),18,18,16 dup(5),18,18,18,24 dup(0)
db 24 dup(8),16 dup(0),10 dup(8),4 dup(0),18 dup(8),18,18,18,25 dup(5),4 dup(18),24 dup(0),24 dup(8),16 dup(0),10 dup(8),4 dup(0),18 dup(8),4 dup(18),5,5,5,18,16 dup(5),8 dup(18),24 dup(0),24 dup(8)
db 16 dup(0),32 dup(8),8 dup(18),16 dup(5),7 dup(18),8,24 dup(0),24 dup(8),16 dup(0),33 dup(8),7 dup(18),16 dup(5),31 dup(0),25 dup(8),15 dup(0),41 dup(8),18,18,14 dup(5),30 dup(0),19 dup(8),0,6 dup(8)
db 0,0,15,15,0,15,15,7 dup(0),27 dup(8),0,14 dup(8),18,18,18,13 dup(5),29 dup(0),23 dup(8),0,0,8,8,0,0,5 dup(15),6 dup(0),31 dup(8),0,0,10 dup(8),18,18,18,13 dup(5),28 dup(0),24 dup(8),0,0,8,8,0,0,0,15
db 14,15,6 dup(0),32 dup(8),0,0,10 dup(8),4 dup(18),12 dup(5),27 dup(0),29 dup(8),0,0,5 dup(15),4 dup(0),45 dup(8),4 dup(18),12 dup(5),26 dup(0),24 dup(8),0,5 dup(8),0,0,15,15,1,15,15,0,0,0,32 dup(8),0
db 13 dup(8),18,18,18,13 dup(5),25 dup(0),31 dup(8),4 dup(0),2,4 dup(0),47 dup(8),18,18,18,13 dup(5),24 dup(0),32 dup(8),4 dup(0),2,0,0,0,48 dup(8),18,18,14 dup(5),24 dup(0),33 dup(8),14 dup(18)
db 9 dup(8),16 dup(0),16 dup(8),18,18,14 dup(5),24 dup(0),9 dup(8),0,22 dup(8),16 dup(18),8 dup(8),17 dup(0),15 dup(8),18,18,18,13 dup(5),24 dup(0),12 dup(8),0,0,18 dup(8),4 dup(18),8 dup(5),4 dup(18)
db 8 dup(8),18 dup(0),14 dup(8),18,18,18,13 dup(5),24 dup(0),12 dup(8),0,0,18 dup(8),18,18,18,10 dup(5),18,18,18,8 dup(8),19 dup(0),13 dup(8),4 dup(18),12 dup(5),24 dup(0),32 dup(8),18,18,12 dup(5)
db 18,18,8 dup(8),20 dup(0),12 dup(8),4 dup(18),12 dup(5),24 dup(0),10 dup(8),0,21 dup(8),18,18,5,5,18,18,5 dup(5),18,5,5,18,18,8 dup(8),21 dup(0),11 dup(8),18,18,18,13 dup(5),24 dup(0),32 dup(8),18,18
db 5,5,18,18,8 dup(5),18,18,8 dup(8),22 dup(0),10 dup(8),18,18,18,13 dup(5),24 dup(0),32 dup(8),18,18,12 dup(5),18,18,8 dup(8),23 dup(0),9 dup(8),18,18,14 dup(5),23 dup(0),8,8,15 dup(18),16 dup(8),18,18
db 12 dup(5),18,18,8 dup(8),32 dup(0),18,18,14 dup(5),22 dup(0),8,8,16 dup(18),8 dup(8),0,7 dup(8),18,18,12 dup(5),18,18,7 dup(8),33 dup(0),18,18,18,13 dup(5),21 dup(0),8,8,8,4 dup(18),8 dup(5)
db 4 dup(18),8 dup(8),0,0,6 dup(8),18,18,5,5,18,4 dup(5),18,18,5,5,5,18,18,6 dup(8),34 dup(0),18,18,18,13 dup(5),20 dup(0),4 dup(8),18,18,18,10 dup(5),18,18,18,8 dup(8),0,0,0,5 dup(8),18,18,7 dup(5)
db 18,18,5,5,5,18,18,5 dup(8),13 dup(0),18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,4 dup(18),12 dup(5),19 dup(0),5 dup(8),18,18,12 dup(5),18,18,8 dup(8),4 dup(0),4 dup(8),18,18,18,10 dup(5),18,12
db 18,4 dup(8),14 dup(0),18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,4 dup(18),12 dup(5),18 dup(0),6 dup(8),18,18,5,5,18,18,5 dup(5),18,5,5,18,18,8 dup(8),5 dup(0),8,8,8,4 dup(18),8 dup(5)
db 4 dup(18),8,8,8,14 dup(0),12,18,18,0,12,18,18,0,12,18,18,0,12,18,18,0,12,18,18,0,12,5 dup(18),13 dup(5),17 dup(0),7 dup(8),18,18,5,5,18,18,8 dup(5),18,18,8 dup(8),6 dup(0),8,8,16 dup(18),8,8
db 14 dup(0),8,12,18,12,8,12,18,12,8,12,18,12,8,12,18,12,8,12,18,12,8,12,18,12,18,18,18,13 dup(5),16 dup(0),8 dup(8),18,18,12 dup(5),18,18,8 dup(8),7 dup(0),8,8,14 dup(18),8,8,15 dup(0),8,12,12,12,8
db 12,12,12,8,12,12,12,8,12,12,12,8,12,12,12,8,12,12,12,18,18,14 dup(5),24 dup(18),14 dup(5),18,18,8 dup(8),8 dup(0),8,14 dup(18),8,16 dup(0),8,23 dup(18),16 dup(5),24 dup(18),13 dup(5),18,18,18
db 7 dup(8),9 dup(0),16 dup(18),16 dup(0),24 dup(18),17 dup(5),6 dup(18),5,5,6 dup(18),5,5,6 dup(18),14 dup(5),18,18,18,6 dup(8),10 dup(0),4 dup(18),8 dup(5),4 dup(18),16 dup(0),4 dup(18),5 dup(5)
db 6 dup(18),5,5,6 dup(18),20 dup(5),18,18,6 dup(5),18,18,6 dup(5),18,18,15 dup(5),4 dup(18),5 dup(8),11 dup(0),18,18,18,10 dup(5),18,18,18,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,18,18,18,8 dup(5),18,18
db 6 dup(5),18,18,55 dup(5),4 dup(18),4 dup(8),12 dup(0),18,18,12 dup(5),18,18,0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,18,18,75 dup(5),18,18,18,8,8,8,13 dup(0),18,18,5,5,18,18,5 dup(5),18,5,5,18,18,0,12
db 18,18,0,12,18,18,0,12,18,18,0,12,4 dup(18),5,5,18,18,71 dup(5),18,18,18,8,8,14 dup(0),18,18,5,5,18,18,8 dup(5),18,18,8,12,18,12,8,12,18,12,8,12,18,12,8,12,18,12,18,18,5,5,18,18,72 dup(5),18,18,8
db 15 dup(0),18,18,12 dup(5),18,18,8,12,12,12,8,12,12,12,8,12,12,12,8,12,12,12,18,18,76 dup(5),18,18,16 dup(0),18,18,14 dup(5),16 dup(18),49 dup(5),18,18,26 dup(5),18,18,18,16 dup(0),18,18,18,13 dup(5)
db 16 dup(18),25 dup(5),18,18,5 dup(5),18,16 dup(5),18,18,5,5,18,23 dup(5),18,18,18,16 dup(0),18,18,18,14 dup(5),6 dup(18),5,5,6 dup(18),26 dup(5),18,18,5,5,18,46 dup(5),4 dup(18),0,0,18,0,0,0,18,0,0,0
db 18,0,0,0,18,0,4 dup(18),15 dup(5),18,18,6 dup(5),18,18,79 dup(5),4 dup(18),0,0,18,0,0,0,18,0,0,0,18,0,0,0,18,0,4 dup(18),78 dup(5),18,26 dup(5),18,18,18,0,12,18,18,0,12,18,18,0,12,18,18,0,12
db 5 dup(18),55 dup(5),18,26 dup(5),18,23 dup(5),18,18,18,8,12,18,12,8,12,18,12,8,12,18,12,8,12,18,12,18,18,18,58 dup(5),18,48 dup(5),18,18,8,12,12,12,8,12,12,12,8,12,12,12,8,12,12,12,18,18,110 dup(5)
db 16 dup(18),112 dup(5),16 dup(18),113 dup(5),6 dup(18),5,5,6 dup(18),116 dup(5),18,18,6 dup(5),18,18,587 dup(5)

borderImage dw 128, 16
db 0,126 dup(18),0,18,4 dup(0),18,18,18,4 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18
db 5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),5 dup(18),0,5,5,18,18,18,4 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18
db 5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5
db 18,18,0,5,18,18,18,4 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18
db 5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5 dup(5),18,18,18,5,5,18,18,0,18,18,18,4 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0)
db 18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,0,0,0
db 5 dup(18),4 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0)
db 18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,5 dup(0),18,18,18,4 dup(0),18,18,126 dup(0),18,18,126 dup(0),18,18,126 dup(0),18,18,126 dup(0),18,18,11 dup(0),5,7 dup(0),5,7 dup(0),5
db 7 dup(0),5,8 dup(0),5,7 dup(0),5,6 dup(0),5,7 dup(0),5,7 dup(0),5,7 dup(0),5,8 dup(0),5,7 dup(0),5,7 dup(0),5,7 dup(0),5,9 dup(0),18,18,6 dup(0),5,5,7 dup(0),5,7 dup(0),5,7 dup(0),5,7 dup(0),5,5
db 7 dup(0),5,6 dup(0),5,7 dup(0),5,7 dup(0),5,7 dup(0),5,7 dup(0),5,5,7 dup(0),5,7 dup(0),5,7 dup(0),5,13 dup(0),18,18,6 dup(0),5,5,7 dup(0),5,7 dup(0),5,7 dup(0),5,7 dup(0),5,5,7 dup(0),5,6 dup(0),5
db 7 dup(0),5,7 dup(0),5,7 dup(0),5,7 dup(0),5,5,7 dup(0),5,7 dup(0),5,7 dup(0),5,9 dup(0),5,0,0,0,18,18,0,5,124 dup(0),18,18,126 dup(0),18,0,126 dup(18),0

boxImage1 dw 8, 8
db 11,6 dup(16),11,16,6 dup(4),16,16,6 dup(4),16,16,6 dup(4),16,16,6 dup(4),16,16,6 dup(4),16,16,6 dup(4),16,11,6 dup(16),11

boxImage2 dw 8, 8
db 11,6 dup(16),11,16,4,4,4,11,4,4,16,16,4,4,4,16,4,4,16,16,11,16,11,0,11,4,16,16,4,4,11,0,16,11,16,16,4,4,4,16,4,4,16,16,4,4,11,4,4,4,16,11,6 dup(16),11

boxImage3 dw 8, 8
db 11,16,16,16,0,16,11,11,16,4,4,11,0,16,4,16,11,16,11,0,0,11,4,16,6 dup(0),11,11,16,11,6 dup(0),16,4,11,0,0,11,11,16,16,4,11,0,11,4,4,16,11,11,0,0,11,16,16,11

cursorImage dw 10, 11
db 7 dup(19),-1,-1,-1,19,6,4 dup(0),6,19,-1,-1,19,5 dup(0),6,19,-1,-1,19,4 dup(0),19,19,9,-1,-1,19,4 dup(0),6,19,-1,-1,-1,19,0,0,19,6,0,6,19,-1,-1,19,6,6,19,19,6,0,6,19,-1,9,19,19,9,9,19,6,0,6,19,-1,9,9
db -1,-1,9,19,6,0,19,6 dup(-1),9,19,19,9,7 dup(-1),9,9,-1

playerImageOriginal dw 16, 16
db 68 dup(-1),7 dup(14),8 dup(-1),9 dup(14),7 dup(-1),4 dup(14),4 dup(17),14,7 dup(-1),14,14,14,17,4,17,17,4,14,8 dup(-1),14,14,5 dup(17),10 dup(-1),14,4 dup(1),12 dup(-1),18,-1,-1,18,86 dup(-1)

; *********************************OFFSET CONSTANTS*********************************

PhysicsControllerId            equ 5
PhysicsControllerVelocityX     equ 1
PhysicsControllerAccelerationX equ 3
PhysicsControllerFrictionX     equ 5
PhysicsControllerMaxVelocityX  equ 7
PhysicsControllerVelocityY     equ 9
PhysicsControllerAccelerationY equ 11
PhysicsControllerFrictionY     equ 13
PhysicsControllerMaxVelocityY  equ 15
PhysicsControllerPosition      equ 17
PhysicsControllerImage         equ 19
PhysicsControllerWidth         equ 21
PhysicsControllerHeight        equ 23
PhysicsControllerStore         equ 25

PhysicsAnimatedControllerId            equ 6
PhysicsAnimatedControllerVelocityX     equ 1
PhysicsAnimatedControllerAccelerationX equ 3
PhysicsAnimatedControllerFrictionX     equ 5
PhysicsAnimatedControllerMaxVelocityX  equ 7
PhysicsAnimatedControllerVelocityY     equ 9
PhysicsAnimatedControllerAccelerationY equ 11
PhysicsAnimatedControllerFrictionY     equ 13
PhysicsAnimatedControllerMaxVelocityY  equ 15
PhysicsAnimatedControllerPosition      equ 17
PhysicsAnimatedControllerSize          equ 19
PhysicsAnimatedControllerWidth         equ 21
PhysicsAnimatedControllerHeight        equ 23
PhysicsAnimatedControllerStore         equ 25

AnimatorCurrentAnimation equ 0
AnimatorCurrentFrame     equ 1
AnimatorAnimationAmount  equ 2
AnimatorFirstAnimation   equ 3

VelocityAxisVelocity     equ 0
VelocityAxisAcceleration equ 2
VelocityAxisFriction     equ 4
VelocityAxisMaxVelocity  equ 6

AnimationId         equ 3
AnimationSize       equ 1
AnimationSpeed      equ 2
AnimationFirstFrame equ 3

AnimatedControllerId           equ 2
AnimatedControllerPosition     equ 1
AnimatedControllerSize         equ 3
AnimatedControllerWidth        equ 5
AnimatedControllerHeight       equ 7
AnimatedControllerStore        equ 9

ControllerId       equ 1
ControllerPosition equ 1
ControllerImage    equ 3
ControllerWidth    equ 5
ControllerHeight   equ 7
ControllerStore    equ 9

ImageWidth  equ 0
ImageHeight equ 2
ImageData   equ 4

PrintManagerId equ 4
PrintManagerControllerAmount equ 1
PrintManagerFirstController  equ 2

MouseId        equ 7
MouseRightHeld equ 1
MouseLefhtHeld equ 2
MousePosition  equ 3
MouseImage     equ 5
MouseWidth     equ 7
MouseHeight    equ 9
MouseStore     equ 11

; *********************************CONTROLLERS START********************************

borderController db ControllerId
dw 0, offset borderImage, 128, 16
db 128*16 dup(0)

boxController db PhysicsAnimatedControllerId
dw 0, 0, 1, 100  ; vx, ax, fx, mx
dw 0, 5, 1, 100  ; vy, ay, fy, my
dw 0, 64, 8, 8  ; pos, size, width, height
db 64 dup(0),0,0,1
dw offset boxAnimation

; *********************************ANIMATIONS START********************************

boxAnimation db AnimationId, 3, 10
dw offset boxImage1,offset boxImage2,offset boxImage3

; *********************************OBJECTS START********************************

Mouse db MouseId, 0, 0
dw 0, offset cursorImage, 10, 11
db 10*11 dup(0)

KeyStateTable db 256 dup(0) ; Table to store key states (0 = released, 1 = pressed)

PlayerSpeed equ 16*3
JumpHeight equ 16*4

SubPixelAmount equ 16

; *********************************GENERAL START********************************

directionX dw 0
directionY dw 0

animationTime db 0

gameLoopSpeed equ 17 ; in ms (to calculate FPS -> 1024 / FPS)
globalTime dw 0      ; in ms

; Declare variables to store the old ISR
oldKeyboardHandlerOffset dw ?
oldKeyboardHandlerSegment dw ?

; Save the original mask for restoration
previousIRQMask db ?

printManager db PrintManagerId, 0
dw 50 dup(0)

CODESEG

; input - Mouse pointer
proc initMouse
    push bp
    mov bp, sp
    push ax
    mov ax, 0 ; init Mouse
    int 33h
    push [bp + 4] ; mouse pointer
    push (100 * 320) + 160
    call initController
    pop ax
    pop bp
    ret 2
endp initMouse

proc updateMouse
    push bp
    mov bp, sp
    push bx
    push ax
    push si
    push dx
    push cx
    push di

    mov si, [bp + 6] ; Mouse pointer

    mov ax, 3 ; get mouse position cx - x, dx - y
    int 33h

    shr cx, 1 ; 0-639 -> 0-319
    cmp cx, 319 
    jne .skipFixX
    dec cx
.skipFixX:

    cmp dx, 199 
    jne .skipFixY
    dec dx
.skipFixY:

    mov ax, dx ;  compute screen position
    xor dx, dx
    mov di, 320
    mul di
    add ax, cx
    
    push si ; mouse controller
    push ax ; position
    call moveController

    push [bp + 4]
    push si
    call uploadController

    pop di
    pop cx
    pop dx
    pop si
    pop ax
    pop bx
    pop bp
    ret 4
endp updateMouse

proc keyboardHandler far              
	push ax
	push bx
    push cx
    push dx
	push di
	push si
	; read keyboard scan code
    in al, 60h

	; update keyboard state
    xor bh, bh
    mov bl, al
    and bl, 7Fh     ; bl = scan code
	
	; save to the keyboard array
    push cx
	mov cx, 7
    shr al, cl ; al = 0 if pressed, 1 if released
	pop cx
    xor al, 1  ; al = 1 if pressed, 0 if released
    mov [cs:KeyStateTable + bx], al  ; save pressed buttons in array
	
	; send EOI to XT keyboard
    in  al, 61h
    mov ah, al
    or  al, 80h
    out 61h, al
    mov al, ah
    out 61h, al

	; send EOI to master PIC
    mov al, 20h
    out 20h, al
	
    pop si
    pop di
    pop dx
    pop cx
    pop bx
    pop ax
    iret
endp keyboardHandler

; interrupt that hooks on to int70h
; that is called by the computer
; and call the "periodic" method 1024 times a sec
proc clock far
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    push ds
    ; Preserve port 70h contents
    in al, 70h
    mov bx, ax
    ; Read status register C to acknowledge RTC interrupt
    mov al, 0Ch
    out 70h, al
    mov al, 8Ch
    out 70h, al
    in al, 71h
    ; Restore port 70h contents
    mov ax, bx
    out 70h, al
    ; Notify PICs that interrupt is handled
    mov al, 20h
    out 0A0h, al
    out 020h, al
    push offset globalTime
    call periodic ; every tick (1024 times a sec)
    pop ds
    pop dx
    pop bx
    pop ax
    pop bp
    iret
endp clock

; setup the game clock
proc setUpClock
    push bp
    mov bp, sp
    push ax
    push ds
    push dx

    cli
    ; Save original mask of secondary PIC
    in al, 0A1h
    mov [bp + 4], al
    and al, 0FEh ; Enable IRQ 8 (RTC)
    out 0A1h, al

    ; Set frequency divisor in RTC register A
    mov al, 0Ah
    out 70h, al
    mov al, 8Ah
    out 70h, al
    in al, 71h
    and al, 11110000b ; Clear rate bits
    or al, 0110b      ; Set rate to 1024 Hz
    out 71h, al
    in al, 71h        ; Ensure the write is complete

    ; Enable periodic interrupts in RTC register B
    mov al, 0Bh
    out 70h, al
    mov al, 8Bh
    out 70h, al
    in al, 71h
    or al, 40h        ; Set PI (bit 6)
    out 71h, al
    in al, 71h        ; Acknowledge the change

    ; Set new interrupt handler for interrupt 70h
    mov al, 70h       ; Interrupt vector 70h
    mov ah, 25h       ; Set interrupt vector
    mov dx, offset clock ; Offset of the ISR
    push seg clock
    pop ds
    int 21h
    sti

    pop dx
    pop ds
    pop ax
    pop bp
    ret 2
endp setUpClock

; clean up the game's clock
proc cleanUpClock
    push bp
    mov bp, sp
    push ax
    ; Restore original mask of secondary PIC
    mov al, [bp + 4] ; mask pointer
    out 0A1h, al
    pop ax
    pop bp
    ret 2
endp cleanUpClock

; Input - object pointer, offset
; General-purpose getter for word-sized fields
proc getWordField
    push bp
    mov bp, sp
    push si
    mov si, [bp + 6]       ; object pointer
    add si, [bp + 4]       ; add offset
    mov si, [si]
    mov [bp + 6], si       ; return the value
    pop si
    pop bp
    ret 2
endp getWordField

; Input - object pointer, offset, value
; General-purpose setter for word-sized fields
proc setWordField
    push bp
    mov bp, sp
    push si
    push ax
    mov si, [bp + 8]   ; object pointer
    add si, [bp + 6]   ; add offset
    mov ax, [bp + 4]   ; value
    mov [si], ax       ; set the value
    pop ax
    pop si
    pop bp
    ret 6
endp setWordField

; Input - object pointer, offset
; General-purpose getter for byte-sized fields
proc getByteField
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 6]       ; object pointer
    add bx, [bp + 4]       ; add offset
    mov bl, [bx]
    mov [bp + 4], bl       ; return the value
    pop bx
    pop bp
    ret 2
endp getByteField

; Input - object pointer, offset, value
; General-purpose setter for byte-sized fields
proc setByteField
    push bp
    mov bp, sp
    push si
    push ax
    mov si, [bp + 8]   ; object pointer
    add si, [bp + 6]   ; add offset
    mov al, [bp + 4]   ; value
    mov [si], al       ; set the value
    pop ax
    pop si
    pop bp
    ret 6
endp setByteField

proc getControllerPosition
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 4] ; controller pointer
    cmp [byte ptr bx], PhysicsAnimatedControllerId
    je .isPhysicsAnimated
    cmp [byte ptr bx], PhysicsControllerId
    je .isPhysics
    cmp [byte ptr bx], AnimatedControllerId
    je .isAnimated
    cmp [byte ptr bx], MouseId
    je .isMouse
    mov ax, [bx + ControllerPosition]
    jmp .end
.isPhysicsAnimated:
    mov ax, [bx + PhysicsAnimatedControllerPosition]
    jmp .end
.isMouse:
    mov ax, [bx + MousePosition]
    jmp .end
.isAnimated:
    mov ax, [bx + AnimatedControllerPosition]
    jmp .end
.isPhysics:
    mov ax, [bx + PhysicsControllerPosition]
.end:
    mov [bp + 4], ax
    pop bx
    pop ax
    pop bp
    ret
endp getControllerPosition

proc setControllerPosition
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 6] ; controller pointer
    mov ax, [bp + 4] ; position
    cmp [byte ptr bx], PhysicsAnimatedControllerId
    je .isPhysics
    cmp [byte ptr bx], PhysicsControllerId
    je .isPhysics
    cmp [byte ptr bx], AnimatedControllerId
    je .isAnimated
    cmp [byte ptr bx], MouseId
    je .isMouse
    mov [bx + ControllerPosition], ax
    jmp .end
.isAnimated:
    mov [bx + AnimatedControllerPosition], ax
    jmp .end
.isMouse:
    mov [bx + MousePosition], ax
    jmp .end
.isPhysics:
    mov [bx + PhysicsControllerPosition], ax
.end:
    pop bx
    pop ax
    pop bp
    ret 4
endp setControllerPosition

proc getControllerImage
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 4] ; controller pointer
    cmp [byte ptr bx], PhysicsControllerId
    je .isPhysics
    cmp [byte ptr bx], AnimatedControllerId
    je .isAnimated
    cmp [byte ptr bx], PhysicsAnimatedControllerId
    je .isAnimated
    cmp [byte ptr bx], MouseId
    je .isMouse
    mov ax, [bx + ControllerImage]
    jmp .end
.isPhysics:
    mov ax, [bx + PhysicsControllerImage]
    jmp .end
.isMouse:
    mov ax, [bx + MouseImage]
    jmp .end
.isAnimated:
    push bx
    call getCurrentFrame
    pop ax
.end:
    mov [bp + 4], ax
    pop bx
    pop ax
    pop bp
    ret
endp getControllerImage

proc getControllerHeight
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 4] ; controller pointer
    cmp [byte ptr bx], PhysicsAnimatedControllerId
    je .isPhysics
    cmp [byte ptr bx], PhysicsControllerId
    je .isPhysics
    cmp [byte ptr bx], AnimatedControllerId
    je .isAnimated
    cmp [byte ptr bx], MouseId
    je .isMouse
    mov ax, [bx + ControllerHeight]
    jmp .end
.isAnimated:
    mov ax, [bx + AnimatedControllerHeight]
    jmp .end
.isMouse:
    mov ax, [bx + MouseHeight]
    jmp .end
.isPhysics:
    mov ax, [bx + PhysicsControllerHeight]
.end:
    mov [bp + 4], ax
    pop bx
    pop ax
    pop bp
    ret
endp getControllerHeight

proc getControllerWidth
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 4] ; controller pointer
    cmp [byte ptr bx], PhysicsAnimatedControllerId
    je .isPhysics
    cmp [byte ptr bx], PhysicsControllerId
    je .isPhysics
    cmp [byte ptr bx], AnimatedControllerId
    je .isAnimated
    cmp [byte ptr bx], MouseId
    je .isMouse
    mov ax, [bx + ControllerWidth]
    jmp .end
.isAnimated:
    mov ax, [bx + AnimatedControllerWidth]
    jmp .end
.isMouse:
    mov ax, [bx + MouseWidth]
    jmp .end
.isPhysics:
    mov ax, [bx + PhysicsControllerWidth]
.end:
    mov [bp + 4], ax
    pop bx
    pop ax
    pop bp
    ret
endp getControllerWidth

proc getControllerStorePlace
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4] ; controller pointer
    cmp [byte ptr bx], PhysicsAnimatedControllerId
    je .isPhysics
    cmp [byte ptr bx], PhysicsControllerId
    je .isPhysics
    cmp [byte ptr bx], AnimatedControllerId
    je .isAnimated
    cmp [byte ptr bx], MouseId
    je .isMouse
    add bx, ControllerStore
    jmp .end
.isAnimated:
    add bx, AnimatedControllerStore
    jmp .end
.isMouse:
    add bx, MouseStore
    jmp .end
.isPhysics:
    add bx, PhysicsControllerStore
.end:
    mov [bp + 4], bx
    pop bx
    pop bp
    ret
endp getControllerStorePlace

; creates a short delay
proc delay
    push ax
    push cx
    mov cx, 300  ; outer loop
    mov ax, 1000 ; inner loop
.outerLoop:
.innerLoop:
    dec ax
    jnz .innerLoop
    loop .outerLoop
    pop cx
    pop ax
    ret
endp delay

; input - word directionX pointer, word directionY pointer
proc updateDirection
    push bp
    mov bp, sp
    push ax
    push si
    push di
    mov si, [bp + 6]  ; directionX pointer
    mov di, [bp + 4]  ; directionY pointer
    mov [word ptr si], 0
    mov [word ptr di], 0
    ; Check if 'A' key is pressed (scan code 1Eh)
    cmp [byte ptr KeyStateTable + 1Eh], 1
    je .setLeft
    ; Check if 'D' key is pressed (scan code 20h)
    cmp [byte ptr KeyStateTable + 20h], 1
    je .setRight
    jmp .checkY
.setLeft:
    mov [word ptr si], -1 * PlayerSpeed
    jmp .checkY
.setRight:
    mov [word ptr si], PlayerSpeed
.checkY:
    ; Check if 'W' key is pressed (scan code 11h)
    cmp [byte ptr KeyStateTable + 11h], 1
    je .setUp
    ; Check if 'S' key is pressed (scan code 1Fh)
    cmp [byte ptr KeyStateTable + 1Fh], 1
    je .setDown
    jmp .end
.setUp:
    mov [word ptr di], -1 * PlayerSpeed
    jmp .end
.setDown:
    mov [word ptr di], PlayerSpeed
.end:
    pop di
    pop si
    pop ax
    pop bp
    ret 4
endp updateDirection

; clears the screen (turns all pixels to 0)
proc clearScreen
    push di
    mov di, 64001
.clearLoop:
    dec di
    mov [byte ptr es:di], 0
    jnz .clearLoop
    pop di
    ret
endp clearScreen

; input - palette pointer
; sets it to the screen's palette
proc setPalette
    push bp
    mov bp, sp
    push ax
    push si
    push cx
    push dx
	mov si, [bp + 4]
	mov cx, 256
	mov dx, 3C8h
	mov al, 0
	out dx, al ; copy starting color to port 3C8h
	inc dx     ; copy palette itself to port 3C9h
.setLoop:
	mov al, [si]   ; red
	out dx, al
	mov al, [si + 1] ; green
	out dx, al
	mov al, [si + 2] ; blue
	out dx, al
	add si, 3      ; move to next color
	loop .setLoop
    pop dx
    pop cx
    pop si
    pop ax
    pop bp
	ret 2
endp setPalette

; input - current pixel pos
; output - (ah = 0/1 x border) (al = 0/1 y border)
proc checkImageBorders
    push bp
    mov bp, sp
    push ax
    push cx
    push dx
    push bx

    xor bx, bx
    mov ax, [bp + 4]  ; current pos

    mov cx, 320
    xor dx, dx
    idiv cx ; ax - y, dx - x
    cmp dx, 319
    je .setTrueX
    cmp ax, 199
    je .setTrueY

    jmp .end
.setTrueX:
    mov bh, 1
    jmp .end
.setTrueY:
    mov bl, 1
.end:
    mov [bp + 4], bx
    pop bx
    pop dx
    pop cx
    pop ax
    pop bp
    ret
endp checkImageBorders

; input - image pointer, position (left top corner)
; prints the image at the specified location
proc printImage
    push bp
    mov bp, sp
    push di
    push ax
    push bx
    push cx
    push dx
    push si
    mov di, [bp + 4] ; screen position (left top)
    mov bx, [bp + 6] ; image pointer
    mov cx, [bx + ImageHeight]
    mov dx, [bx + ImageWidth]
    add bx, ImageData ; get to the data part
    mov si, 0 ; reset width counter
.printLoop:
    push di
    call checkImageBorders
    pop ax

    cmp al, 1 ; if hit bottom, exit
    je .end
    
    cmp ah, 1 ; if hit sides, move to next row
    jne .skipCheckX
.disableRow:
    ; set the counters to the next row
    sub di, si
    sub bx, si
    add di, dx
    add bx, dx
    jmp .nextPixelRow
.skipCheckX:

    mov al, [byte ptr bx] ; get the color
    cmp al, -1
    je .skipPixel ; skip if it's empty (-1)
    mov [byte ptr es:di], al
.skipPixel:
    inc di ; move to the next pixel from screen
    inc bx ; move to the next pixel from image
    inc si ; inc the current width counter
    cmp si, dx ; if reached end of the row
    jne .printLoop
.nextPixelRow:
    add di, 320
    sub di, dx ; point to the next column
    xor si, si ; reset width counter
    dec cx
    jnz .printLoop
.end:
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    pop di
    pop bp
    ret 4
endp printImage

; input - controller pointer
; prints it to the screen
proc printController
    push bp
    mov bp, sp
    push di
    push ax
    mov di, [bp + 4] ; controller pointer
    push di
    call getControllerPosition
    pop ax ; position
    push di
    call getControllerImage
    pop di ; image
    push di
    push ax
    call printImage
    pop ax
    pop di
    pop bp
    ret 2
endp printController

; saves the background to the controller so it could move
; without affecting the background
proc saveController
    push bp
    mov bp, sp
    push di
    push ax
    push bx
    push cx
    push dx
    push si
    mov di, [bp + 4]  ; controller
    push di
    call getControllerStorePlace
    pop bx     ; saving place
    push di
    call getControllerHeight
    pop cx     ; height
    push di
    call getControllerWidth
    pop dx     ; width
    push di
    call getControllerPosition
    pop di     ; position
    mov si, 0  ; width counter
.saveLoop:
    mov al, [es:di]
    mov [bx], al
    inc di
    inc bx
    inc si
    cmp si, dx ; if reached end of the row
    jne .saveLoop
    add di, 320
    sub di, dx ; point to the next column
    xor si, si
    dec cx
    jnz .saveLoop
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    pop di
    pop bp
    ret 2
endp saveController

; input - controller pointer, word position value
; prints the saved background and moves the controller to the new position (doesn't print it)
proc moveController
    push bp
    mov bp, sp
    push di
    push ax
    push bx
    push dx
    mov di, [bp + 6] ; controller pointer
    mov bx, [bp + 4] ; position
    ; print the saved data
    push di
    call getControllerPosition
    pop ax
    push di
    call getControllerStorePlace
    pop dx
    sub dx, 4 ; to also get the width and height
    push dx ; (width, height, color bytes)
    push ax ; old position
    call printImage
    ; set the new position
    push di
    push bx
    call setControllerPosition
    pop dx
    pop bx
    pop ax
    pop di
    pop bp
    ret 4
endp moveController

; input - controller pointer, word init position
; init the controller to the set position (saves the background, prints and moves to the location)
proc initController
    push bp
    mov bp, sp
    push di
    push ax
    mov di, [bp + 6] ; controller pointer
    mov ax, [bp + 4] ; set position
    push di
    push ax
    call setControllerPosition
    push di
    call saveController
    push di
    call printController
    pop ax
    pop di
    pop bp
    ret 4
endp initController

; input - animated controller pointer
; moves the current animation a frame (if last frame resets it)
proc moveFrame
    push bp
    mov bp, sp
    push di
    push bx
    push ax
    mov di, [bp + 4]          ; controller pointer
    xor ax, ax
    push di
    call getControllerAnimator
    push di                   ; start of animating (current animation)
    call getCurrentAnimation
    pop bx                          ; current animation
    mov bl, [bx + AnimationSize]    ; animation size
    pop di ; - ?
    mov al, [di + AnimatorCurrentFrame]          ; current frame number
    inc al                                       ; next frame
    cmp al, bl
    jne .end
    mov al, 0
.end:
    mov [di + AnimatorCurrentFrame], al
    pop ax
    pop bx
    pop di
    pop bp
    ret 2
endp moveFrame

; input - controller pointer, byte animation number
; sets the current animation by number (first is 0, second is 1...)
proc setAnimation
    push bp
    mov bp, sp
    push di
    push ax
    xor ax, ax
    mov al, [bp + 4] ; animation number
    mov di, [bp + 6] ; controller pointer
    push di
    call getControllerAnimator
    pop di
    mov [byte ptr di + AnimatorCurrentAnimation], al  ; set current animation
    mov [byte ptr di + AnimatorCurrentFrame], 0       ; set current frame 0
    pop ax
    pop di
    pop bp
    ret 4
endp setAnimation

; input - animated controller, current time (0-255)
; updates it's current animation
proc updateAnimation
    push bp
    mov bp, sp
    push dx
    push ax
    push di
    push bx
    xor ax, ax
    mov di, [bp + 6]          ; controller pointer
    mov al, [bp + 4]          ; current time
    push di
    call getCurrentAnimation
    pop bx
    mov dh, [bx + AnimationSpeed]          ; animation speed
    div dh ; ah - time % speed
    cmp ah, 0
    jne .end
    push di
    call moveFrame
.end:
    pop bx
    pop di
    pop ax
    pop dx
    pop bp
    ret 4
endp updateAnimation

; updates animation time
proc updateAnimationTime
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4]    ; time pointer
    cmp [byte ptr bx], 255
    jne .continue
    mov [byte ptr bx], -1
.continue:
    inc [byte ptr bx]
    pop bx
    pop bp
    ret 2
endp updateAnimationTime

; input - printManager pointer
; prints all the controllers
proc printAllControllers
    push bp
    mov bp, sp
    push bx
    push di
    push cx
    push si
    mov si, [bp + 4] ; offset printManager
    inc si           ; skip id
    mov bx, si
    mov cl, [byte ptr bx] ; amount of controllers
.saveLoop:
    cmp cl, 0
    je .saveEnd
    push [bx + 1]      ; controller pointer
    call saveController
    add bx, 2
    dec cl
    jmp .saveLoop
.saveEnd:
    mov bx, si
    mov cl, [byte ptr bx] ; amount of controllers
    mov [byte ptr bx], 0
.printLoop:
    cmp cl, 0
    je .printEnd
    push [bx + 1]      ;  controller pointer
    call printController
    mov [word ptr bx + 1], 0
    add bx, 2
    dec cl
    jmp .printLoop
.printEnd:
    pop si
    pop cx
    pop di
    pop bx
    pop bp
    ret 2
endp printAllControllers

; input - printManager pointer, controller pointer
; uploads the controller to the manager
proc uploadController
    push bp
    mov bp, sp
    push bx
    push di
    push ax
    mov bx, [bp + 6] ; printManager pointer
    mov di, [bp + 4] ; controller pointer
    xor ax, ax
    mov al, [byte ptr bx + PrintManagerControllerAmount] ; amount of controllers
    inc [byte ptr bx + PrintManagerControllerAmount]     ; inc the amount of controllers
    shl ax, 1 ; every pointer is a word
    add bx, ax
    mov [bx + PrintManagerFirstController], di  ; upload it
    pop ax
    pop di
    pop bx
    pop bp
    ret 4
endp uploadController

; input - animated controller
; returns the current animation
proc getCurrentAnimation
    push bp
    mov bp, sp
    push di
    push bx
    mov di, [bp + 4] ; controller pointer
    push di
    call getControllerAnimator
    pop di
    xor bx, bx
    mov bl, [di + AnimatorCurrentAnimation]  ; current animation number
    add di, AnimatorFirstAnimation           ; first animation pointer
    shl bx, 1
    add di, bx
    mov di, [di]
    mov [word ptr bp + 4], di
    pop bx
    pop di
    pop bp
    ret
endp getCurrentAnimation

; input - animated controller
; returns the current animation frame
proc getCurrentFrame
    push bp
    mov bp, sp
    push di
    push bx
    push si
    push ax
    mov di, [bp + 4] ; controller pointer
    push di
    call getControllerAnimator
    pop si
    xor bx, bx
    xor ax, ax
    mov bl, [si + AnimatorFirstAnimation] ; current animation number
    mov al, [si + AnimatorCurrentFrame]   ; current frame number
    push di
    call getCurrentAnimation
    pop si ; current animation
    add si, AnimationFirstFrame        ; first frame
    shl al, 1        ; each frame is a word
    add si, ax       ; current frame pointer
    mov si, [si]     ; current frame
    mov [bp + 4], si ; return it
    pop ax
    pop si
    pop bx
    pop di
    pop bp
    ret
endp getCurrentFrame

; input - animated controller
; returns the start of the animating part of the controller
proc getControllerAnimator
    push bp
    mov bp, sp
    push di
    mov di, [bp + 4] ; controller pointer
    cmp [byte ptr di], PhysicsAnimatedControllerId
    je .isPhysics
    add di, [di + AnimatedControllerSize] ; add the size
    add di, AnimatedControllerStore       ; add the storing place     
    jmp .end   
.isPhysics:
    add di, [di + PhysicsAnimatedControllerSize]
    add di, PhysicsAnimatedControllerStore
.end:
    mov [bp + 4], di ; send back
    pop di
    pop bp
    ret
endp getControllerAnimator

; input - velocity controller
; update its velocity (x and y)
proc updateVelocity
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4] ; controller
    add bx, PhysicsControllerVelocityX
    push bx
    call updateAxisVelocity ; update velocity x
    sub bx, PhysicsControllerVelocityX
    add bx, PhysicsControllerVelocityY
    push bx
    call updateAxisVelocity ; update velocity y
    pop bx
    pop bp
    ret 2
endp updateVelocity

; input - velocity axis pointer (start of each axis part)
; updates it's velocity
proc updateAxisVelocity
    push bp
    mov bp, sp
    push bx
    push dx
    push si
    push cx
    mov si, [bp + 4]                        ; velocity pointer
    mov dx, [si + VelocityAxisFriction]     ; friction
    mov bx, [si + VelocityAxisVelocity]    
    mov cx, [si + VelocityAxisMaxVelocity]  ; max velocity
    cmp bx, 0
    jl .positiveFriction ; if we go negative
    cmp bx, 0
    jg .negativeFriction ; if we go negative

    mov bx, [si + VelocityAxisAcceleration] ; accerlation
    add [si], bx                            ; add velocity acceleration

    jmp .end
.negativeFriction:
    sub bx, dx ; check if the gravity is too much it will become positive, if so reset it
    cmp bx, 0
    jl .resetFriction
    sub [si + VelocityAxisVelocity], dx

    mov bx, [si + VelocityAxisAcceleration] ; accerlation
    add [si], bx                            ; add velocity acceleration

    jmp .limitPositiveVelocity
.positiveFriction:
    add bx, dx ; check if the gravity is too much it will become negative, if so reset it
    cmp bx, 0
    jg .resetFriction
    add [si + VelocityAxisVelocity], dx
    
    mov bx, [si + VelocityAxisAcceleration] ; accerlation
    add [si], bx                            ; add velocity acceleration

    jmp .limitNegativeVelocity
.resetFriction:
    mov [word ptr si + VelocityAxisVelocity], 0
    jmp .end
.limitPositiveVelocity:
    cmp [si + VelocityAxisVelocity], cx
    jl .limitNegativeVelocity
    mov [si + VelocityAxisVelocity], cx
.limitNegativeVelocity:
    neg cx
    cmp [si + VelocityAxisVelocity], cx
    jg .end
    mov [si + VelocityAxisVelocity], cx
.end:
    pop cx
    pop si
    pop dx
    pop bx
    pop bp
    ret 2
endp updateAxisVelocity

; input - physics controller
; adds the velocity to the controllers using the subPixelAmount
; const to enable sub-pixel movement, for example - 0.5 pixels/frame
proc applyVelocity
    push bp
    mov bp, sp
    push bx
    push ax
    push dx
    push cx
    push si

    mov bx, [bp + 4] ; controller
    mov si, SubPixelAmount

    mov ax, [bx + PhysicsControllerVelocityY]
    cwd              ; Sign-extend ax into dx:ax
    idiv si          ; div by subPixelAmount
    
    mov dx, ax
    sal ax, 6  ; ax = y * 64
    sal dx, 8  ; dx = y * 256
    add ax, dx
    mov cx, ax ; cx = y * 320

    mov ax, [bx + PhysicsControllerVelocityX]
    cwd              ; Sign-extend ax into dx:ax
    idiv si          ; div by subPixelAmount

    add ax, [bx + PhysicsControllerPosition]
    add ax, cx
    push bx ; controller
    push ax ; new position (old + velocities)
    call moveController

    pop si
    pop cx
    pop dx
    pop ax
    pop bx
    pop bp
    ret 2
endp applyVelocity

proc updateAndApplyVelocity
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4] ; controller
    push bx
    call updateVelocity
    push bx
    call applyVelocity
    pop bx
    pop bp
    ret 2
endp updateAndApplyVelocity

proc walk
    push bp
    mov bp, sp
    push ax
    push bx
    mov bx, [bp + 6] ; controller
    mov ax, [bp + 4] ; direction X
    cmp ax, 0
    je .skipX
    push bx
    push PhysicsControllerVelocityX
    push ax
    call setWordField
.skipX:
    pop bx
    pop ax
    pop bp
    ret 4
endp walk

proc move2d
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    mov bx, [bp + 8] ; controller
    mov ax, [bp + 6] ; direction X
    mov dx, [bp + 4] ; direction Y
    cmp ax, 0
    je .skipX
    push bx
    push PhysicsControllerVelocityX
    push ax
    call setWordField
.skipX:
    cmp dx, 0
    je .skipY
    push bx
    push PhysicsControllerVelocityY
    push dx
    call setWordField
.skipY:
    pop dx
    pop bx
    pop ax
    pop bp
    ret 6
endp move2d   

proc jump
    push bp
    mov bp, sp
    push bx
    mov bx, [bp + 4] ; controller
    cmp [byte ptr KeyStateTable + 11h], 0
    je .end

    push bx
    push PhysicsControllerVelocityY
    push -1 * JumpHeight
    call setWordField

.end:
    pop bx
    pop bp
    ret 2
endp jump

proc getControllerY
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    mov bx, [bp + 4] ; first controller
    push bx
    call getControllerPosition
    pop ax
    mov bx, 320
    xor dx, dx
    div bx
    mov [bp + 4], ax ; y
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerY

proc getControllerX
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    mov bx, [bp + 4] ; first controller
    push bx
    call getControllerPosition
    pop ax
    mov bx, 320
    xor dx, dx
    div bx
    mov [bp + 4], dx ; x
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerX

proc getControllerYEdges
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    push di
    mov bx, [bp + 4] ; controller
    push bx
    call getControllerY
    pop ax ; top
    push bx
    call getControllerHeight
    pop di
    mov dx, ax
    add dx, di       ; bottom
    mov [bp + 6], ax
    mov [bp + 4], dx
    pop di
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerYEdges

proc getControllerXEdges
    push bp
    mov bp, sp
    push ax
    push bx
    push dx
    push di
    mov bx, [bp + 4] ; controller
    push bx
    call getControllerX
    pop ax ; left
    push bx
    call getControllerWidth
    pop di
    mov dx, ax
    add dx, di       ; right
    mov [bp + 6], ax
    mov [bp + 4], dx
    pop di
    pop dx
    pop bx
    pop ax
    pop bp
    ret
endp getControllerXEdges

; return the difference in the Y axis between two objects
; input - first controller, second controller
proc isYCollision
   push bp
    mov bp, sp
    push ax
    push bx
    push si
    push di
    push dx
    mov si, [bp + 6] ; first controller
    mov bx, [bp + 4] ; second controller
    push si
    push si ; garbage value
    call getControllerYEdges
    pop ax
    pop dx
    push bx
    push bx ; garbage value
    call getControllerYEdges
    pop bx
    pop si
    push ax
    push dx
    push bx
    push si
    call isAxisCollision
    pop ax
    mov [bp + 6], ax
    pop dx
    pop di
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp isYCollision

; return the difference in the X axis between two objects
; input - first controller, second controller
proc isXCollision
   push bp
    mov bp, sp
    push ax
    push bx
    push si
    push di
    push dx
    mov si, [bp + 6] ; first controller
    mov bx, [bp + 4] ; second controller
    push si
    push si ; garbage value
    call getControllerXEdges
    pop ax
    pop dx
    push bx
    push bx ; garbage value
    call getControllerXEdges
    pop bx
    pop si
    push ax
    push dx
    push bx
    push si
    call isAxisCollision
    pop ax
    mov [bp + 6], ax
    pop dx
    pop di
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp isXCollision

proc areColliding
    push bp
    mov bp, sp
    push ax
    push bx
    push si
    push cx
    push dx
    mov si, [bp + 6] ; first controller
    mov bx, [bp + 4] ; second controller
    push bx
    push si
    call isXCollision
    pop ax
    push bx
    push si
    call isYCollision
    pop dx
    cmp dx, 0
    je .setFalse
    cmp ax, 0
    je .setFalse
    mov cx, ax
    mov si, dx
    test cx, cx
    jns .xIsPositive
    neg cx
.xIsPositive:
    test si, si
    jns .yIsPositive
    neg si
.yIsPositive:
    cmp cx, si
    jb .end
    mov ax, dx
    mov dx, 320
    imul dx
    jmp .end
.setFalse:
    mov ax, 0
.end:
    mov [bp + 6], ax ; change to correctly collide
    pop dx
    pop cx
    pop si
    pop bx
    pop ax
    pop bp
    ret 2
endp areColliding

; gets the edge points of 2 objects and return the distance between them,
; and 0 if they don't collide
; input - obj1 bigger, obj2 lower, obj1 bigger, obj lower
; lower - (top/left), bigger - (bottom/right)
proc isAxisCollision
    push bp
    mov bp, sp
    push cx
    push dx
    push bx
    push ax

    mov ax, [bp + 10]  ; bottom/right1
    mov bx, [bp + 8]   ; top/left1
    mov dx, [bp + 6]   ; bottom/right2
    mov cx, [bp + 4]   ; top/left2

    ; if bottom1 is less than top2
    cmp ax, cx
    jle .setFalse
    ; if bottom2 is less than top1
    cmp dx, bx
    jle .setFalse

    cmp ax, dx ; 1 is above 2
    ja .set2
    sub ax, cx
    jmp .end
.set2:
    sub bx, dx
    mov ax, bx
    jmp .end
.setFalse:
    mov ax, 0
.end:
    mov [bp + 10], ax
    pop ax
    pop bx
    pop dx
    pop cx
    pop bp
    ret 6
endp isAxisCollision

; creates a basic controller starting from the given place
; input - place to save, image
proc createBasicController
    push bp
    mov bp, sp
    push bx
    push si
    push ax
    mov bx, [bp + 6] ; place to build it
    mov si, [bp + 4] ; image pointer
    mov [byte ptr bx], ControllerId
    mov [word ptr bx + ControllerPosition], 0
    mov [word ptr bx + ControllerImage], si
    mov ax, [si + ImageHeight]
    mov [word ptr bx + ControllerHeight], ax
    mov ax, [si + ImageWidth]
    mov [word ptr bx + ControllerWidth], ax
    pop ax
    pop si
    pop bx
    pop bp
    ret 4
endp createBasicController

; called 1024 times a sec
proc periodic
    push bp
    mov bp, sp
    push bx
    push cx
    push dx
    push ax
    mov bx, [bp + 4]
    inc [word ptr bx]
    cmp [word ptr bx], 1025
    jl .skipReset
    mov [word ptr bx], 0
.skipReset:
    mov ax, [bx]
    mov cx, gameLoopSpeed
    xor dx, dx
    div cx
    cmp dx, 0
    jne skipGameLoop
    call gameLoop
skipGameLoop:
    pop ax
    pop dx
    pop cx
    pop bx
    pop bp
    ret 2
endp periodic

; setups the keyboard handler
; input - pointer to the old segment save, another for the offset
proc setupKeyboardHandler
    push bp
    mov bp, sp
    push ax
    push es
    xor ax, ax
    mov es, ax ; set es to IVT
    cli
    ; Save the original ISR address
    mov ax, [word ptr es:9*4]
    mov [bp + 4], ax ; save old offset
    mov ax, [word ptr es:9*4+2]
    mov [bp + 6], ax ; save old segment
    ; Set the new ISR address
    mov [word ptr es:9*4], offset keyboardHandler
    mov [word ptr es:9*4+2], seg keyboardHandler
    sti
    pop es
    pop ax
    pop bp
    ret 4
endp setupKeyboardHandler

proc gameLoop

    push offset directionX
    push offset directionY
    call updateDirection

    push offset animationTime
    call updateAnimationTime

    push offset boxController
    push [directionX]
    call walk

    push offset boxController
    call jump

    push offset boxController
    push [word ptr animationTime]
    call updateAnimation

    push offset boxController
    call updateAndApplyVelocity

    push offset printManager
    push offset boxController
    call uploadController

    push offset Mouse
    push offset printManager
    call updateMouse

    push offset printManager
    call printAllControllers

    push offset boxController
    push offset borderController
    call areColliding
    pop ax ; amount to move
    cmp ax, 0
    je continueGameLoop

    push offset boxController
    push PhysicsControllerVelocityY
    push 0
    call setWordField

    push offset boxController
    call getControllerPosition
    pop bx
    add bx, ax
    push offset boxController
    push bx
    call moveController

    push offset printManager
    push offset boxController
    call uploadController

    push offset printManager
    call printAllControllers

continueGameLoop:

    ret
endp gameLoop

proc endAndCleanUp
    push offset previousIRQMask
    call cleanUpClock

    mov ah, 0
    mov al, 2
    int 10h
    mov ax, 4C00h
    int 21h
    ret
endp endAndCleanUp

start:
    mov ax, @data
    mov ds, ax
    mov ax, 13h
    int 10h
    mov ax, 0A000h
    mov es, ax

    push offset palette
    call setPalette

    call clearScreen

; *******************INIT**************
; Note - here order is important, because they save their background here

    push offset backgroundImage
    push (320 * 36) + 96
    call printImage

    push offset borderController
    push (100 * 320) + 120
    call initController

    push offset boxController
    push (80 * 320) + 120
    call initController
    
    push offset Mouse
    call initMouse

; **************************************

    push offset oldKeyboardHandlerSegment
    push offset oldKeyboardHandlerOffset
    call setupKeyboardHandler

    push offset previousIRQMask
    call setUpClock

keepAliveLoop:
    jmp keepAliveLoop
exit:
    call endAndCleanUp
END start
